//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcService.h"
#include "SSroGameserver/MapClient.h"
#include "MapService.generated.h"

class UTurboLinkGrpcManager;

UCLASS(ClassGroup = TurboLink, BlueprintType)
class TURBOLINKGRPC_API UMapService : public UGrpcService
{
	GENERATED_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = TurboLink)
	virtual void Connect() override;
	
	UFUNCTION(BlueprintCallable, Category = TurboLink)
	virtual EGrpcServiceState GetServiceState() const override;

	UFUNCTION(BlueprintCallable, Category = TurboLink)
	UMapServiceClient* MakeClient();

private:
	virtual void Shutdown() override;

	UPROPERTY()
	TObjectPtr<UMapServiceClient> InnerClient; 
public:
	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcSroGameserverMap& Response)> FGetMapResponseLambda;
	void CallGetMap(const FGrpcSroTargetId& Request, FGetMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcSroGameserverMaps& Response)> FGetMapsResponseLambda;
	void CallGetMaps(const FGrpcGoogleProtobufEmpty& Request, FGetMapsResponseLambda ResponseLambda, TMap<FString, FString>& MetaData);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcSroGameserverMap& Response)> FCreateMapResponseLambda;
	void CallCreateMap(const FGrpcSroGameserverCreateMapRequest& Request, FCreateMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcSroGameserverMap& Response)> FEditMapResponseLambda;
	void CallEditMap(const FGrpcSroGameserverEditMapRequest& Request, FEditMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)> FDeleteMapResponseLambda;
	void CallDeleteMap(const FGrpcSroTargetId& Request, FDeleteMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData);

public:
	class Private;
	Private* const d = nullptr;

public:
	UMapService();
	virtual ~UMapService();
};

