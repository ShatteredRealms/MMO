//Generated by TurboLink CodeGenerator, do not edit!
#include "ChatMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatLogRequest* in, FGrpcSroChatChatLogRequest* out)
{
    out->ChannelId=UTF8_TO_TCHAR(in->channel_id().c_str());
    switch(in->optional_sender_id_case())
    {
    case ::sro::chat::ChatLogRequest::kSenderId:
        out->Optional_sender_id.SenderId=UTF8_TO_TCHAR(in->sender_id().c_str());
        out->Optional_sender_id.Optional_sender_idCase = EGrpcSroChatChatLogRequestOptional_sender_id::SenderId;
        break;
    }
    switch(in->optional_before_case())
    {
    case ::sro::chat::ChatLogRequest::kBefore:
        out->Optional_before.Before=in->before();
        out->Optional_before.Optional_beforeCase = EGrpcSroChatChatLogRequestOptional_before::Before;
        break;
    }
    switch(in->optional_after_case())
    {
    case ::sro::chat::ChatLogRequest::kAfter:
        out->Optional_after.After=in->after();
        out->Optional_after.Optional_afterCase = EGrpcSroChatChatLogRequestOptional_after::After;
        break;
    }
    switch(in->optional_limit_case())
    {
    case ::sro::chat::ChatLogRequest::kLimit:
        out->Optional_limit.Limit=in->limit();
        out->Optional_limit.Optional_limitCase = EGrpcSroChatChatLogRequestOptional_limit::Limit;
        break;
    }
    switch(in->optional_offset_case())
    {
    case ::sro::chat::ChatLogRequest::kOffset:
        out->Optional_offset.Offset=in->offset();
        out->Optional_offset.Optional_offsetCase = EGrpcSroChatChatLogRequestOptional_offset::Offset;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatLogRequest* in, ::sro::chat::ChatLogRequest* out)
{
    out->set_channel_id(TCHAR_TO_UTF8(*(in->ChannelId)));
    switch (in->Optional_sender_id.Optional_sender_idCase)
    {
    case EGrpcSroChatChatLogRequestOptional_sender_id::SenderId:
        out->set_sender_id(TCHAR_TO_UTF8(*(in->Optional_sender_id.SenderId)));
        break;
    }
    switch (in->Optional_before.Optional_beforeCase)
    {
    case EGrpcSroChatChatLogRequestOptional_before::Before:
        out->set_before(in->Optional_before.Before);
        break;
    }
    switch (in->Optional_after.Optional_afterCase)
    {
    case EGrpcSroChatChatLogRequestOptional_after::After:
        out->set_after(in->Optional_after.After);
        break;
    }
    switch (in->Optional_limit.Optional_limitCase)
    {
    case EGrpcSroChatChatLogRequestOptional_limit::Limit:
        out->set_limit(in->Optional_limit.Limit);
        break;
    }
    switch (in->Optional_offset.Optional_offsetCase)
    {
    case EGrpcSroChatChatLogRequestOptional_offset::Offset:
        out->set_offset(in->Optional_offset.Offset);
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatLog* in, FGrpcSroChatChatLog* out)
{
    out->SentAt=in->sent_at();
    out->ChannelId=UTF8_TO_TCHAR(in->channel_id().c_str());
    out->SenderId=UTF8_TO_TCHAR(in->sender_id().c_str());
    out->Content=UTF8_TO_TCHAR(in->content().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatLog* in, ::sro::chat::ChatLog* out)
{
    out->set_sent_at(in->SentAt);
    out->set_channel_id(TCHAR_TO_UTF8(*(in->ChannelId)));
    out->set_sender_id(TCHAR_TO_UTF8(*(in->SenderId)));
    out->set_content(TCHAR_TO_UTF8(*(in->Content)));
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatLogs* in, FGrpcSroChatChatLogs* out)
{
    out->Total=in->total();
    out->Logs.Empty();
    for (int i=0; i<in->logs_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->logs(i)), &(out->Logs.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatLogs* in, ::sro::chat::ChatLogs* out)
{
    out->set_total(in->Total);
    for(const auto& value : in->Logs) {
        TURBOLINK_TO_GRPC(&value, out->add_logs());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::chat::BanRequest* in, FGrpcSroChatBanRequest* out)
{
    out->CharacterId=UTF8_TO_TCHAR(in->character_id().c_str());
    out->ChannelId=UTF8_TO_TCHAR(in->channel_id().c_str());
    out->Duration=in->duration();
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatBanRequest* in, ::sro::chat::BanRequest* out)
{
    out->set_character_id(TCHAR_TO_UTF8(*(in->CharacterId)));
    out->set_channel_id(TCHAR_TO_UTF8(*(in->ChannelId)));
    out->set_duration(in->Duration);
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ConnectChatChannelRequest* in, FGrpcSroChatConnectChatChannelRequest* out)
{
    out->ChannelId=UTF8_TO_TCHAR(in->channel_id().c_str());
    out->CharacterId=UTF8_TO_TCHAR(in->character_id().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatConnectChatChannelRequest* in, ::sro::chat::ConnectChatChannelRequest* out)
{
    out->set_channel_id(TCHAR_TO_UTF8(*(in->ChannelId)));
    out->set_character_id(TCHAR_TO_UTF8(*(in->CharacterId)));
}

void GRPC_TO_TURBOLINK(const ::sro::chat::RequestSetCharacterSetChatChannelAuth* in, FGrpcSroChatRequestSetCharacterSetChatChannelAuth* out)
{
    out->CharacterId=UTF8_TO_TCHAR(in->character_id().c_str());
    out->Ids.Empty();
    for (int i=0; i<in->ids_size(); ++i) {
        out->Ids.Add(UTF8_TO_TCHAR(in->ids(i).c_str()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatRequestSetCharacterSetChatChannelAuth* in, ::sro::chat::RequestSetCharacterSetChatChannelAuth* out)
{
    out->set_character_id(TCHAR_TO_UTF8(*(in->CharacterId)));
    for(const auto& value : in->Ids) {
        out->add_ids(TCHAR_TO_UTF8(*(value)));
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* in, FGrpcSroChatRequestUpdateCharacterSetChatChannelAuth* out)
{
    out->CharacterId=UTF8_TO_TCHAR(in->character_id().c_str());
    out->Add=in->add();
    out->Ids.Empty();
    for (int i=0; i<in->ids_size(); ++i) {
        out->Ids.Add(UTF8_TO_TCHAR(in->ids(i).c_str()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatRequestUpdateCharacterSetChatChannelAuth* in, ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* out)
{
    out->set_character_id(TCHAR_TO_UTF8(*(in->CharacterId)));
    out->set_add(in->Add);
    for(const auto& value : in->Ids) {
        out->add_ids(TCHAR_TO_UTF8(*(value)));
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatChannel* in, FGrpcSroChatChatChannel* out)
{
    out->Id=UTF8_TO_TCHAR(in->id().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->DimensionId=UTF8_TO_TCHAR(in->dimension_id().c_str());
    out->Public=in->public_();
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatChannel* in, ::sro::chat::ChatChannel* out)
{
    out->set_id(TCHAR_TO_UTF8(*(in->Id)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_dimension_id(TCHAR_TO_UTF8(*(in->DimensionId)));
    out->set_public_(in->Public);
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatChannels* in, FGrpcSroChatChatChannels* out)
{
    out->Channels.Empty();
    for (int i=0; i<in->channels_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->channels(i)), &(out->Channels.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatChannels* in, ::sro::chat::ChatChannels* out)
{
    for(const auto& value : in->Channels) {
        TURBOLINK_TO_GRPC(&value, out->add_channels());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::chat::CreateChatChannelMessage* in, FGrpcSroChatCreateChatChannelMessage* out)
{
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->DimensionId=UTF8_TO_TCHAR(in->dimension_id().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatCreateChatChannelMessage* in, ::sro::chat::CreateChatChannelMessage* out)
{
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_dimension_id(TCHAR_TO_UTF8(*(in->DimensionId)));
}

void GRPC_TO_TURBOLINK(const ::sro::chat::ChatMessage* in, FGrpcSroChatChatMessage* out)
{
    out->SenderCharacterId=UTF8_TO_TCHAR(in->sender_character_id().c_str());
    out->Content=UTF8_TO_TCHAR(in->content().c_str());
    out->SentTimeMs=in->sent_time_ms();
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatChatMessage* in, ::sro::chat::ChatMessage* out)
{
    out->set_sender_character_id(TCHAR_TO_UTF8(*(in->SenderCharacterId)));
    out->set_content(TCHAR_TO_UTF8(*(in->Content)));
    out->set_sent_time_ms(in->SentTimeMs);
}

void GRPC_TO_TURBOLINK(const ::sro::chat::SendChatChannelMessageRequest* in, FGrpcSroChatSendChatChannelMessageRequest* out)
{
    out->ChannelId=UTF8_TO_TCHAR(in->channel_id().c_str());
    GRPC_TO_TURBOLINK(&(in->chat_message()), &(out->ChatMessage));
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatSendChatChannelMessageRequest* in, ::sro::chat::SendChatChannelMessageRequest* out)
{
    out->set_channel_id(TCHAR_TO_UTF8(*(in->ChannelId)));
    TURBOLINK_TO_GRPC(&(in->ChatMessage), out->mutable_chat_message());
}

void GRPC_TO_TURBOLINK(const ::sro::chat::SendDirectMessageRequest* in, FGrpcSroChatSendDirectMessageRequest* out)
{
    out->CharacterId=UTF8_TO_TCHAR(in->character_id().c_str());
    GRPC_TO_TURBOLINK(&(in->chat_message()), &(out->ChatMessage));
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatSendDirectMessageRequest* in, ::sro::chat::SendDirectMessageRequest* out)
{
    out->set_character_id(TCHAR_TO_UTF8(*(in->CharacterId)));
    TURBOLINK_TO_GRPC(&(in->ChatMessage), out->mutable_chat_message());
}

void GRPC_TO_TURBOLINK(const ::sro::chat::UpdateChatChannelRequest* in, FGrpcSroChatUpdateChatChannelRequest* out)
{
    out->ChannelId=UTF8_TO_TCHAR(in->channel_id().c_str());
    switch(in->optional_name_case())
    {
    case ::sro::chat::UpdateChatChannelRequest::kName:
        out->Optional_name.Name=UTF8_TO_TCHAR(in->name().c_str());
        out->Optional_name.Optional_nameCase = EGrpcSroChatUpdateChatChannelRequestOptional_name::Name;
        break;
    }
    switch(in->optional_dimension_case())
    {
    case ::sro::chat::UpdateChatChannelRequest::kDimension:
        out->Optional_dimension.Dimension=UTF8_TO_TCHAR(in->dimension().c_str());
        out->Optional_dimension.Optional_dimensionCase = EGrpcSroChatUpdateChatChannelRequestOptional_dimension::Dimension;
        break;
    }
    switch(in->optional_public_case())
    {
    case ::sro::chat::UpdateChatChannelRequest::kPublic:
        out->Optional_public.Public=in->public_();
        out->Optional_public.Optional_publicCase = EGrpcSroChatUpdateChatChannelRequestOptional_public::Public;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroChatUpdateChatChannelRequest* in, ::sro::chat::UpdateChatChannelRequest* out)
{
    out->set_channel_id(TCHAR_TO_UTF8(*(in->ChannelId)));
    switch (in->Optional_name.Optional_nameCase)
    {
    case EGrpcSroChatUpdateChatChannelRequestOptional_name::Name:
        out->set_name(TCHAR_TO_UTF8(*(in->Optional_name.Name)));
        break;
    }
    switch (in->Optional_dimension.Optional_dimensionCase)
    {
    case EGrpcSroChatUpdateChatChannelRequestOptional_dimension::Dimension:
        out->set_dimension(TCHAR_TO_UTF8(*(in->Optional_dimension.Dimension)));
        break;
    }
    switch (in->Optional_public.Optional_publicCase)
    {
    case EGrpcSroChatUpdateChatChannelRequestOptional_public::Public:
        out->set_public_(in->Optional_public.Public);
        break;
    }
}

