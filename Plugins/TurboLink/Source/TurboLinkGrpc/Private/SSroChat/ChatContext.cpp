//Generated by TurboLink CodeGenerator, do not edit!
#include "ChatContext.h"
#include "SSroChat/ChatClient.h"
#include "ChatService_Private.h"
#include "ChatMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_ChatService_ConnectChatChannel::GrpcContext_ChatService_ConnectChatChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_ConnectChatChannel::Call(const FGrpcSroChatConnectChatChannelRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::ConnectChatChannelRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncConnectChatChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ChatService_ConnectChatChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatMessage* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnConnectChatChannelResponse.IsBound())) return;

			FGrpcSroChatChatMessage response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnConnectChatChannelResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_ConnectDirectMessages::GrpcContext_ChatService_ConnectDirectMessages(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_ConnectDirectMessages::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncConnectDirectMessages(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_ChatService_ConnectDirectMessages::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatMessage* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnConnectDirectMessagesResponse.IsBound())) return;

			FGrpcSroChatChatMessage response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnConnectDirectMessagesResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_SendChatChannelMessage::GrpcContext_ChatService_SendChatChannelMessage(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_SendChatChannelMessage::Call(const FGrpcSroChatSendChatChannelMessageRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::SendChatChannelMessageRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSendChatChannelMessage(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_SendChatChannelMessage::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnSendChatChannelMessageResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSendChatChannelMessageResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_SendDirectMessage::GrpcContext_ChatService_SendDirectMessage(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_SendDirectMessage::Call(const FGrpcSroChatSendDirectMessageRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::SendDirectMessageRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSendDirectMessage(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_SendDirectMessage::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnSendDirectMessageResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSendDirectMessageResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_GetChatChannels::GrpcContext_ChatService_GetChatChannels(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_GetChatChannels::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetChatChannels(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_GetChatChannels::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatChannels* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnGetChatChannelsResponse.IsBound())) return;

			FGrpcSroChatChatChannels response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetChatChannelsResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_GetChatChannel::GrpcContext_ChatService_GetChatChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_GetChatChannel::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetChatChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_GetChatChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatChannel* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnGetChatChannelResponse.IsBound())) return;

			FGrpcSroChatChatChannel response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetChatChannelResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_CreateChatChannel::GrpcContext_ChatService_CreateChatChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_CreateChatChannel::Call(const FGrpcSroChatCreateChatChannelMessage& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::CreateChatChannelMessage rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateChatChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_CreateChatChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatChannel* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnCreateChatChannelResponse.IsBound())) return;

			FGrpcSroChatChatChannel response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateChatChannelResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_DeleteChatChannel::GrpcContext_ChatService_DeleteChatChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_DeleteChatChannel::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteChatChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_DeleteChatChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatChannel* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnDeleteChatChannelResponse.IsBound())) return;

			FGrpcSroChatChatChannel response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDeleteChatChannelResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_EditChatChannel::GrpcContext_ChatService_EditChatChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_EditChatChannel::Call(const FGrpcSroChatUpdateChatChannelRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::UpdateChatChannelRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncEditChatChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_EditChatChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatChannel* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnEditChatChannelResponse.IsBound())) return;

			FGrpcSroChatChatChannel response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnEditChatChannelResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_GetAuthorizedChatChannels::GrpcContext_ChatService_GetAuthorizedChatChannels(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_GetAuthorizedChatChannels::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetAuthorizedChatChannels(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_GetAuthorizedChatChannels::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatChannels* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnGetAuthorizedChatChannelsResponse.IsBound())) return;

			FGrpcSroChatChatChannels response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetAuthorizedChatChannelsResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_SetCharacterChatChannelAuth::GrpcContext_ChatService_SetCharacterChatChannelAuth(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_SetCharacterChatChannelAuth::Call(const FGrpcSroChatRequestSetCharacterSetChatChannelAuth& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::RequestSetCharacterSetChatChannelAuth rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSetCharacterChatChannelAuth(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_SetCharacterChatChannelAuth::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnSetCharacterChatChannelAuthResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSetCharacterChatChannelAuthResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_UpdateCharacterChatChannelAuth::GrpcContext_ChatService_UpdateCharacterChatChannelAuth(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_UpdateCharacterChatChannelAuth::Call(const FGrpcSroChatRequestUpdateCharacterSetChatChannelAuth& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::RequestUpdateCharacterSetChatChannelAuth rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncUpdateCharacterChatChannelAuth(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_UpdateCharacterChatChannelAuth::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnUpdateCharacterChatChannelAuthResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnUpdateCharacterChatChannelAuthResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_BanCharacterFromChatChannel::GrpcContext_ChatService_BanCharacterFromChatChannel(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_BanCharacterFromChatChannel::Call(const FGrpcSroChatBanRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::BanRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncBanCharacterFromChatChannel(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_BanCharacterFromChatChannel::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnBanCharacterFromChatChannelResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnBanCharacterFromChatChannelResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ChatService_GetChatLogs::GrpcContext_ChatService_GetChatLogs(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ChatService_GetChatLogs::Call(const FGrpcSroChatChatLogRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::chat::ChatLogRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UChatService* service = (UChatService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetChatLogs(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ChatService_GetChatLogs::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::chat::ChatLogs* _RpcResponse) 
		{
			UChatServiceClient* client = (UChatServiceClient*)(this->Client);
			if (!(client->OnGetChatLogsResponse.IsBound())) return;

			FGrpcSroChatChatLogs response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetChatLogsResponse.Broadcast(Handle, _Result, response);
		}
	);
}
