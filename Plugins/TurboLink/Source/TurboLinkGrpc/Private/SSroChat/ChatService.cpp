//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroChat/ChatService.h"
#include "SSroChat/ChatClient.h"
#include "ChatService_Private.h"
#include "ChatMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UChatService::UChatService()
	: d(new UChatService::Private())
{
}

UChatService::~UChatService()
{
	delete d;
}

void UChatService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("ChatService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to ChatService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::chat::ChatService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UChatService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UChatServiceClient* UChatService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UChatServiceClient>();
	return client;
}

void UChatService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UChatService::CallConnectChatChannel(const FGrpcSroChatConnectChatChannelRequest& Request, FConnectChatChannelResponseLambda ResponseLambda, FConnectChatChannelFinishLambda FinishLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceConnectChatChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceConnectChatChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitConnectChatChannel();
	InnerClient->OnConnectChatChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectChatChannelLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectChatChannelLambdaWrapper::OnContextStateChanged);
	InnerClient->ConnectChatChannel(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallConnectDirectMessages(const FGrpcSroTargetId& Request, FConnectDirectMessagesResponseLambda ResponseLambda, FConnectDirectMessagesFinishLambda FinishLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceConnectDirectMessagesLambdaWrapper* lambdaWrapper = NewObject<UChatServiceConnectDirectMessagesLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->FinishLambda = FinishLambda;
	lambdaWrapper->Handle = InnerClient->InitConnectDirectMessages();
	InnerClient->OnConnectDirectMessagesResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectDirectMessagesLambdaWrapper::OnResponse);
	InnerClient->OnContextStateChange.AddUniqueDynamic(lambdaWrapper, &UChatServiceConnectDirectMessagesLambdaWrapper::OnContextStateChanged);
	InnerClient->ConnectDirectMessages(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallSendChatChannelMessage(const FGrpcSroChatSendChatChannelMessageRequest& Request, FSendChatChannelMessageResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceSendChatChannelMessageLambdaWrapper* lambdaWrapper = NewObject<UChatServiceSendChatChannelMessageLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSendChatChannelMessage();
	InnerClient->OnSendChatChannelMessageResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceSendChatChannelMessageLambdaWrapper::OnResponse);
	InnerClient->SendChatChannelMessage(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallSendDirectMessage(const FGrpcSroChatSendDirectMessageRequest& Request, FSendDirectMessageResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceSendDirectMessageLambdaWrapper* lambdaWrapper = NewObject<UChatServiceSendDirectMessageLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSendDirectMessage();
	InnerClient->OnSendDirectMessageResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceSendDirectMessageLambdaWrapper::OnResponse);
	InnerClient->SendDirectMessage(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallGetChatChannels(const FGrpcGoogleProtobufEmpty& Request, FGetChatChannelsResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceGetChatChannelsLambdaWrapper* lambdaWrapper = NewObject<UChatServiceGetChatChannelsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetChatChannels();
	InnerClient->OnGetChatChannelsResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceGetChatChannelsLambdaWrapper::OnResponse);
	InnerClient->GetChatChannels(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallGetChatChannel(const FGrpcSroTargetId& Request, FGetChatChannelResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceGetChatChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceGetChatChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetChatChannel();
	InnerClient->OnGetChatChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceGetChatChannelLambdaWrapper::OnResponse);
	InnerClient->GetChatChannel(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallCreateChatChannel(const FGrpcSroChatCreateChatChannelMessage& Request, FCreateChatChannelResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceCreateChatChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceCreateChatChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateChatChannel();
	InnerClient->OnCreateChatChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceCreateChatChannelLambdaWrapper::OnResponse);
	InnerClient->CreateChatChannel(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallDeleteChatChannel(const FGrpcSroTargetId& Request, FDeleteChatChannelResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceDeleteChatChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceDeleteChatChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteChatChannel();
	InnerClient->OnDeleteChatChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceDeleteChatChannelLambdaWrapper::OnResponse);
	InnerClient->DeleteChatChannel(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallEditChatChannel(const FGrpcSroChatUpdateChatChannelRequest& Request, FEditChatChannelResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceEditChatChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceEditChatChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitEditChatChannel();
	InnerClient->OnEditChatChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceEditChatChannelLambdaWrapper::OnResponse);
	InnerClient->EditChatChannel(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallGetAuthorizedChatChannels(const FGrpcSroTargetId& Request, FGetAuthorizedChatChannelsResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceGetAuthorizedChatChannelsLambdaWrapper* lambdaWrapper = NewObject<UChatServiceGetAuthorizedChatChannelsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetAuthorizedChatChannels();
	InnerClient->OnGetAuthorizedChatChannelsResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceGetAuthorizedChatChannelsLambdaWrapper::OnResponse);
	InnerClient->GetAuthorizedChatChannels(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallSetCharacterChatChannelAuth(const FGrpcSroChatRequestSetCharacterSetChatChannelAuth& Request, FSetCharacterChatChannelAuthResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceSetCharacterChatChannelAuthLambdaWrapper* lambdaWrapper = NewObject<UChatServiceSetCharacterChatChannelAuthLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSetCharacterChatChannelAuth();
	InnerClient->OnSetCharacterChatChannelAuthResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceSetCharacterChatChannelAuthLambdaWrapper::OnResponse);
	InnerClient->SetCharacterChatChannelAuth(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallUpdateCharacterChatChannelAuth(const FGrpcSroChatRequestUpdateCharacterSetChatChannelAuth& Request, FUpdateCharacterChatChannelAuthResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceUpdateCharacterChatChannelAuthLambdaWrapper* lambdaWrapper = NewObject<UChatServiceUpdateCharacterChatChannelAuthLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitUpdateCharacterChatChannelAuth();
	InnerClient->OnUpdateCharacterChatChannelAuthResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceUpdateCharacterChatChannelAuthLambdaWrapper::OnResponse);
	InnerClient->UpdateCharacterChatChannelAuth(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallBanCharacterFromChatChannel(const FGrpcSroChatBanRequest& Request, FBanCharacterFromChatChannelResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceBanCharacterFromChatChannelLambdaWrapper* lambdaWrapper = NewObject<UChatServiceBanCharacterFromChatChannelLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitBanCharacterFromChatChannel();
	InnerClient->OnBanCharacterFromChatChannelResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceBanCharacterFromChatChannelLambdaWrapper::OnResponse);
	InnerClient->BanCharacterFromChatChannel(lambdaWrapper->Handle, Request, MetaData);
}

void UChatService::CallGetChatLogs(const FGrpcSroChatChatLogRequest& Request, FGetChatLogsResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UChatServiceGetChatLogsLambdaWrapper* lambdaWrapper = NewObject<UChatServiceGetChatLogsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetChatLogs();
	InnerClient->OnGetChatLogsResponse.AddUniqueDynamic(lambdaWrapper, &UChatServiceGetChatLogsLambdaWrapper::OnResponse);
	InnerClient->GetChatLogs(lambdaWrapper->Handle, Request, MetaData);
}
