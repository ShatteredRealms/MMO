//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroChat/ChatNode.h"
#include "SSroChat/ChatService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallChatServiceConnectChatChannel* UCallChatServiceConnectChatChannel::ConnectChatChannel(UObject* WorldContextObject, const FGrpcSroChatConnectChatChannelRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceConnectChatChannel* node = NewObject<UCallChatServiceConnectChatChannel>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceConnectChatChannel::OnServiceStateChanged);
	return node;
}

void UCallChatServiceConnectChatChannel::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceConnectChatChannel::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatMessage response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceConnectChatChannel::OnContextStateChange);
		ChatServiceClient->OnConnectChatChannelResponse.AddUniqueDynamic(this, &UCallChatServiceConnectChatChannel::OnResponse);

		Context = ChatServiceClient->InitConnectChatChannel();
		ChatServiceClient->ConnectChatChannel(Context, Request, MetaData);
	}
}

void UCallChatServiceConnectChatChannel::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		OnFinished.Broadcast(FGrpcResult{}, FGrpcSroChatChatMessage{});
		Shutdown();
	}
}

void UCallChatServiceConnectChatChannel::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatMessage& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnConnectChatChannelResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceConnectChatChannel::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceConnectChatChannel::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceConnectDirectMessages* UCallChatServiceConnectDirectMessages::ConnectDirectMessages(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceConnectDirectMessages* node = NewObject<UCallChatServiceConnectDirectMessages>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceConnectDirectMessages::OnServiceStateChanged);
	return node;
}

void UCallChatServiceConnectDirectMessages::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceConnectDirectMessages::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatMessage response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceConnectDirectMessages::OnContextStateChange);
		ChatServiceClient->OnConnectDirectMessagesResponse.AddUniqueDynamic(this, &UCallChatServiceConnectDirectMessages::OnResponse);

		Context = ChatServiceClient->InitConnectDirectMessages();
		ChatServiceClient->ConnectDirectMessages(Context, Request, MetaData);
	}
}

void UCallChatServiceConnectDirectMessages::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		OnFinished.Broadcast(FGrpcResult{}, FGrpcSroChatChatMessage{});
		Shutdown();
	}
}

void UCallChatServiceConnectDirectMessages::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatMessage& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnConnectDirectMessagesResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceConnectDirectMessages::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceConnectDirectMessages::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceSendChatChannelMessage* UCallChatServiceSendChatChannelMessage::SendChatChannelMessage(UObject* WorldContextObject, const FGrpcSroChatSendChatChannelMessageRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceSendChatChannelMessage* node = NewObject<UCallChatServiceSendChatChannelMessage>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceSendChatChannelMessage::OnServiceStateChanged);
	return node;
}

void UCallChatServiceSendChatChannelMessage::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceSendChatChannelMessage::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceSendChatChannelMessage::OnContextStateChange);
		ChatServiceClient->OnSendChatChannelMessageResponse.AddUniqueDynamic(this, &UCallChatServiceSendChatChannelMessage::OnResponse);

		Context = ChatServiceClient->InitSendChatChannelMessage();
		ChatServiceClient->SendChatChannelMessage(Context, Request, MetaData);
	}
}

void UCallChatServiceSendChatChannelMessage::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceSendChatChannelMessage::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSendChatChannelMessageResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceSendChatChannelMessage::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceSendChatChannelMessage::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceSendDirectMessage* UCallChatServiceSendDirectMessage::SendDirectMessage(UObject* WorldContextObject, const FGrpcSroChatSendDirectMessageRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceSendDirectMessage* node = NewObject<UCallChatServiceSendDirectMessage>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceSendDirectMessage::OnServiceStateChanged);
	return node;
}

void UCallChatServiceSendDirectMessage::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceSendDirectMessage::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceSendDirectMessage::OnContextStateChange);
		ChatServiceClient->OnSendDirectMessageResponse.AddUniqueDynamic(this, &UCallChatServiceSendDirectMessage::OnResponse);

		Context = ChatServiceClient->InitSendDirectMessage();
		ChatServiceClient->SendDirectMessage(Context, Request, MetaData);
	}
}

void UCallChatServiceSendDirectMessage::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceSendDirectMessage::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSendDirectMessageResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceSendDirectMessage::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceSendDirectMessage::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceGetChatChannels* UCallChatServiceGetChatChannels::GetChatChannels(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceGetChatChannels* node = NewObject<UCallChatServiceGetChatChannels>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceGetChatChannels::OnServiceStateChanged);
	return node;
}

void UCallChatServiceGetChatChannels::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceGetChatChannels::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatChannels response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceGetChatChannels::OnContextStateChange);
		ChatServiceClient->OnGetChatChannelsResponse.AddUniqueDynamic(this, &UCallChatServiceGetChatChannels::OnResponse);

		Context = ChatServiceClient->InitGetChatChannels();
		ChatServiceClient->GetChatChannels(Context, Request, MetaData);
	}
}

void UCallChatServiceGetChatChannels::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceGetChatChannels::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatChannels& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetChatChannelsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceGetChatChannels::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceGetChatChannels::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceGetChatChannel* UCallChatServiceGetChatChannel::GetChatChannel(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceGetChatChannel* node = NewObject<UCallChatServiceGetChatChannel>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceGetChatChannel::OnServiceStateChanged);
	return node;
}

void UCallChatServiceGetChatChannel::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceGetChatChannel::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatChannel response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceGetChatChannel::OnContextStateChange);
		ChatServiceClient->OnGetChatChannelResponse.AddUniqueDynamic(this, &UCallChatServiceGetChatChannel::OnResponse);

		Context = ChatServiceClient->InitGetChatChannel();
		ChatServiceClient->GetChatChannel(Context, Request, MetaData);
	}
}

void UCallChatServiceGetChatChannel::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceGetChatChannel::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatChannel& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetChatChannelResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceGetChatChannel::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceGetChatChannel::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceCreateChatChannel* UCallChatServiceCreateChatChannel::CreateChatChannel(UObject* WorldContextObject, const FGrpcSroChatCreateChatChannelMessage& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceCreateChatChannel* node = NewObject<UCallChatServiceCreateChatChannel>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceCreateChatChannel::OnServiceStateChanged);
	return node;
}

void UCallChatServiceCreateChatChannel::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceCreateChatChannel::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatChannel response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceCreateChatChannel::OnContextStateChange);
		ChatServiceClient->OnCreateChatChannelResponse.AddUniqueDynamic(this, &UCallChatServiceCreateChatChannel::OnResponse);

		Context = ChatServiceClient->InitCreateChatChannel();
		ChatServiceClient->CreateChatChannel(Context, Request, MetaData);
	}
}

void UCallChatServiceCreateChatChannel::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceCreateChatChannel::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatChannel& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateChatChannelResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceCreateChatChannel::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceCreateChatChannel::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceDeleteChatChannel* UCallChatServiceDeleteChatChannel::DeleteChatChannel(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceDeleteChatChannel* node = NewObject<UCallChatServiceDeleteChatChannel>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceDeleteChatChannel::OnServiceStateChanged);
	return node;
}

void UCallChatServiceDeleteChatChannel::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceDeleteChatChannel::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatChannel response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceDeleteChatChannel::OnContextStateChange);
		ChatServiceClient->OnDeleteChatChannelResponse.AddUniqueDynamic(this, &UCallChatServiceDeleteChatChannel::OnResponse);

		Context = ChatServiceClient->InitDeleteChatChannel();
		ChatServiceClient->DeleteChatChannel(Context, Request, MetaData);
	}
}

void UCallChatServiceDeleteChatChannel::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceDeleteChatChannel::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatChannel& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDeleteChatChannelResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceDeleteChatChannel::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceDeleteChatChannel::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceEditChatChannel* UCallChatServiceEditChatChannel::EditChatChannel(UObject* WorldContextObject, const FGrpcSroChatUpdateChatChannelRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceEditChatChannel* node = NewObject<UCallChatServiceEditChatChannel>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceEditChatChannel::OnServiceStateChanged);
	return node;
}

void UCallChatServiceEditChatChannel::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceEditChatChannel::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatChannel response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceEditChatChannel::OnContextStateChange);
		ChatServiceClient->OnEditChatChannelResponse.AddUniqueDynamic(this, &UCallChatServiceEditChatChannel::OnResponse);

		Context = ChatServiceClient->InitEditChatChannel();
		ChatServiceClient->EditChatChannel(Context, Request, MetaData);
	}
}

void UCallChatServiceEditChatChannel::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceEditChatChannel::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatChannel& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnEditChatChannelResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceEditChatChannel::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceEditChatChannel::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceGetAuthorizedChatChannels* UCallChatServiceGetAuthorizedChatChannels::GetAuthorizedChatChannels(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceGetAuthorizedChatChannels* node = NewObject<UCallChatServiceGetAuthorizedChatChannels>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceGetAuthorizedChatChannels::OnServiceStateChanged);
	return node;
}

void UCallChatServiceGetAuthorizedChatChannels::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceGetAuthorizedChatChannels::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatChannels response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceGetAuthorizedChatChannels::OnContextStateChange);
		ChatServiceClient->OnGetAuthorizedChatChannelsResponse.AddUniqueDynamic(this, &UCallChatServiceGetAuthorizedChatChannels::OnResponse);

		Context = ChatServiceClient->InitGetAuthorizedChatChannels();
		ChatServiceClient->GetAuthorizedChatChannels(Context, Request, MetaData);
	}
}

void UCallChatServiceGetAuthorizedChatChannels::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceGetAuthorizedChatChannels::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatChannels& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetAuthorizedChatChannelsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceGetAuthorizedChatChannels::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceGetAuthorizedChatChannels::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceSetCharacterChatChannelAuth* UCallChatServiceSetCharacterChatChannelAuth::SetCharacterChatChannelAuth(UObject* WorldContextObject, const FGrpcSroChatRequestSetCharacterSetChatChannelAuth& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceSetCharacterChatChannelAuth* node = NewObject<UCallChatServiceSetCharacterChatChannelAuth>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceSetCharacterChatChannelAuth::OnServiceStateChanged);
	return node;
}

void UCallChatServiceSetCharacterChatChannelAuth::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceSetCharacterChatChannelAuth::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceSetCharacterChatChannelAuth::OnContextStateChange);
		ChatServiceClient->OnSetCharacterChatChannelAuthResponse.AddUniqueDynamic(this, &UCallChatServiceSetCharacterChatChannelAuth::OnResponse);

		Context = ChatServiceClient->InitSetCharacterChatChannelAuth();
		ChatServiceClient->SetCharacterChatChannelAuth(Context, Request, MetaData);
	}
}

void UCallChatServiceSetCharacterChatChannelAuth::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceSetCharacterChatChannelAuth::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSetCharacterChatChannelAuthResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceSetCharacterChatChannelAuth::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceSetCharacterChatChannelAuth::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceUpdateCharacterChatChannelAuth* UCallChatServiceUpdateCharacterChatChannelAuth::UpdateCharacterChatChannelAuth(UObject* WorldContextObject, const FGrpcSroChatRequestUpdateCharacterSetChatChannelAuth& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceUpdateCharacterChatChannelAuth* node = NewObject<UCallChatServiceUpdateCharacterChatChannelAuth>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceUpdateCharacterChatChannelAuth::OnServiceStateChanged);
	return node;
}

void UCallChatServiceUpdateCharacterChatChannelAuth::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceUpdateCharacterChatChannelAuth::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceUpdateCharacterChatChannelAuth::OnContextStateChange);
		ChatServiceClient->OnUpdateCharacterChatChannelAuthResponse.AddUniqueDynamic(this, &UCallChatServiceUpdateCharacterChatChannelAuth::OnResponse);

		Context = ChatServiceClient->InitUpdateCharacterChatChannelAuth();
		ChatServiceClient->UpdateCharacterChatChannelAuth(Context, Request, MetaData);
	}
}

void UCallChatServiceUpdateCharacterChatChannelAuth::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceUpdateCharacterChatChannelAuth::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnUpdateCharacterChatChannelAuthResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceUpdateCharacterChatChannelAuth::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceUpdateCharacterChatChannelAuth::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceBanCharacterFromChatChannel* UCallChatServiceBanCharacterFromChatChannel::BanCharacterFromChatChannel(UObject* WorldContextObject, const FGrpcSroChatBanRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceBanCharacterFromChatChannel* node = NewObject<UCallChatServiceBanCharacterFromChatChannel>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceBanCharacterFromChatChannel::OnServiceStateChanged);
	return node;
}

void UCallChatServiceBanCharacterFromChatChannel::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceBanCharacterFromChatChannel::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceBanCharacterFromChatChannel::OnContextStateChange);
		ChatServiceClient->OnBanCharacterFromChatChannelResponse.AddUniqueDynamic(this, &UCallChatServiceBanCharacterFromChatChannel::OnResponse);

		Context = ChatServiceClient->InitBanCharacterFromChatChannel();
		ChatServiceClient->BanCharacterFromChatChannel(Context, Request, MetaData);
	}
}

void UCallChatServiceBanCharacterFromChatChannel::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceBanCharacterFromChatChannel::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnBanCharacterFromChatChannelResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceBanCharacterFromChatChannel::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceBanCharacterFromChatChannel::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallChatServiceGetChatLogs* UCallChatServiceGetChatLogs::GetChatLogs(UObject* WorldContextObject, const FGrpcSroChatChatLogRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallChatServiceGetChatLogs* node = NewObject<UCallChatServiceGetChatLogs>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ChatService = Cast<UChatService>(turboLinkManager->MakeService("ChatService"));
	if (node->ChatService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ChatService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallChatServiceGetChatLogs::OnServiceStateChanged);
	return node;
}

void UCallChatServiceGetChatLogs::Activate()
{
	ChatService->Connect();
}

void UCallChatServiceGetChatLogs::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroChatChatLogs response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ChatServiceClient = ChatService->MakeClient();
		ChatServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallChatServiceGetChatLogs::OnContextStateChange);
		ChatServiceClient->OnGetChatLogsResponse.AddUniqueDynamic(this, &UCallChatServiceGetChatLogs::OnResponse);

		Context = ChatServiceClient->InitGetChatLogs();
		ChatServiceClient->GetChatLogs(Context, Request, MetaData);
	}
}

void UCallChatServiceGetChatLogs::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallChatServiceGetChatLogs::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroChatChatLogs& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetChatLogsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallChatServiceGetChatLogs::Shutdown()
{
	ChatService->OnServiceStateChanged.RemoveDynamic(this, &UCallChatServiceGetChatLogs::OnServiceStateChanged);
	if (ChatServiceClient != nullptr)
	{
		ChatService->RemoveClient(ChatServiceClient);
		ChatServiceClient->Shutdown();
		ChatServiceClient = nullptr;
	}

	if (ChatService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ChatService);
		ChatService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
