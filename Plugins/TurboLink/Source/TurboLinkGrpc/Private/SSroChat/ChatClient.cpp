//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroChat/ChatClient.h"
#include "SSroChat/ChatService.h"
#include "ChatContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UChatServiceClient::InitConnectChatChannel()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_ConnectChatChannel>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::ConnectChatChannel(FGrpcContextHandle Handle, const FGrpcSroChatConnectChatChannelRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextConnectChatChannel = StaticCastSharedPtr<GrpcContext_ChatService_ConnectChatChannel>(*context);
		contextConnectChatChannel->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitConnectDirectMessages()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_ConnectDirectMessages>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::ConnectDirectMessages(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextConnectDirectMessages = StaticCastSharedPtr<GrpcContext_ChatService_ConnectDirectMessages>(*context);
		contextConnectDirectMessages->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitSendChatChannelMessage()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_SendChatChannelMessage>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::SendChatChannelMessage(FGrpcContextHandle Handle, const FGrpcSroChatSendChatChannelMessageRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextSendChatChannelMessage = StaticCastSharedPtr<GrpcContext_ChatService_SendChatChannelMessage>(*context);
		contextSendChatChannelMessage->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitSendDirectMessage()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_SendDirectMessage>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::SendDirectMessage(FGrpcContextHandle Handle, const FGrpcSroChatSendDirectMessageRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextSendDirectMessage = StaticCastSharedPtr<GrpcContext_ChatService_SendDirectMessage>(*context);
		contextSendDirectMessage->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitGetChatChannels()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_GetChatChannels>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::GetChatChannels(FGrpcContextHandle Handle, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetChatChannels = StaticCastSharedPtr<GrpcContext_ChatService_GetChatChannels>(*context);
		contextGetChatChannels->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitGetChatChannel()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_GetChatChannel>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::GetChatChannel(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetChatChannel = StaticCastSharedPtr<GrpcContext_ChatService_GetChatChannel>(*context);
		contextGetChatChannel->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitCreateChatChannel()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_CreateChatChannel>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::CreateChatChannel(FGrpcContextHandle Handle, const FGrpcSroChatCreateChatChannelMessage& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextCreateChatChannel = StaticCastSharedPtr<GrpcContext_ChatService_CreateChatChannel>(*context);
		contextCreateChatChannel->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitDeleteChatChannel()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_DeleteChatChannel>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::DeleteChatChannel(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextDeleteChatChannel = StaticCastSharedPtr<GrpcContext_ChatService_DeleteChatChannel>(*context);
		contextDeleteChatChannel->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitEditChatChannel()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_EditChatChannel>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::EditChatChannel(FGrpcContextHandle Handle, const FGrpcSroChatUpdateChatChannelRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextEditChatChannel = StaticCastSharedPtr<GrpcContext_ChatService_EditChatChannel>(*context);
		contextEditChatChannel->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitGetAuthorizedChatChannels()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_GetAuthorizedChatChannels>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::GetAuthorizedChatChannels(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetAuthorizedChatChannels = StaticCastSharedPtr<GrpcContext_ChatService_GetAuthorizedChatChannels>(*context);
		contextGetAuthorizedChatChannels->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitSetCharacterChatChannelAuth()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_SetCharacterChatChannelAuth>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::SetCharacterChatChannelAuth(FGrpcContextHandle Handle, const FGrpcSroChatRequestSetCharacterSetChatChannelAuth& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextSetCharacterChatChannelAuth = StaticCastSharedPtr<GrpcContext_ChatService_SetCharacterChatChannelAuth>(*context);
		contextSetCharacterChatChannelAuth->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitUpdateCharacterChatChannelAuth()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_UpdateCharacterChatChannelAuth>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::UpdateCharacterChatChannelAuth(FGrpcContextHandle Handle, const FGrpcSroChatRequestUpdateCharacterSetChatChannelAuth& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextUpdateCharacterChatChannelAuth = StaticCastSharedPtr<GrpcContext_ChatService_UpdateCharacterChatChannelAuth>(*context);
		contextUpdateCharacterChatChannelAuth->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitBanCharacterFromChatChannel()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_BanCharacterFromChatChannel>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::BanCharacterFromChatChannel(FGrpcContextHandle Handle, const FGrpcSroChatBanRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextBanCharacterFromChatChannel = StaticCastSharedPtr<GrpcContext_ChatService_BanCharacterFromChatChannel>(*context);
		contextBanCharacterFromChatChannel->Call(Request);
	}
}

FGrpcContextHandle UChatServiceClient::InitGetChatLogs()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_ChatService_GetChatLogs>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UChatServiceClient::GetChatLogs(FGrpcContextHandle Handle, const FGrpcSroChatChatLogRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetChatLogs = StaticCastSharedPtr<GrpcContext_ChatService_GetChatLogs>(*context);
		contextGetChatLogs->Call(Request);
	}
}

void UChatServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UChatServiceClient::Shutdown()
{
	OnConnectChatChannelResponse.Clear();
	OnConnectDirectMessagesResponse.Clear();
	OnSendChatChannelMessageResponse.Clear();
	OnSendDirectMessageResponse.Clear();
	OnGetChatChannelsResponse.Clear();
	OnGetChatChannelResponse.Clear();
	OnCreateChatChannelResponse.Clear();
	OnDeleteChatChannelResponse.Clear();
	OnEditChatChannelResponse.Clear();
	OnGetAuthorizedChatChannelsResponse.Clear();
	OnSetCharacterChatChannelAuthResponse.Clear();
	OnUpdateCharacterChatChannelAuthResponse.Clear();
	OnBanCharacterFromChatChannelResponse.Clear();
	OnGetChatLogsResponse.Clear();
	Super::Shutdown();
}

