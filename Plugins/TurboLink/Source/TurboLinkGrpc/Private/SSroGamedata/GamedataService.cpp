//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGamedata/GamedataService.h"
#include "SSroGamedata/GamedataClient.h"
#include "GamedataService_Private.h"
#include "GamedataMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UGameDataService::UGameDataService()
	: d(new UGameDataService::Private())
{
}

UGameDataService::~UGameDataService()
{
	delete d;
}

void UGameDataService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("GameDataService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to GameDataService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::gamedata::GameDataService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UGameDataService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UGameDataServiceClient* UGameDataService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UGameDataServiceClient>();
	return client;
}

void UGameDataService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}
