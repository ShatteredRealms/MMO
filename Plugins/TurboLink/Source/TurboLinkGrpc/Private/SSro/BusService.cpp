//Generated by TurboLink CodeGenerator, do not edit!
#include "SSro/BusService.h"
#include "SSro/BusClient.h"
#include "BusService_Private.h"
#include "BusMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UBusService::UBusService()
	: d(new UBusService::Private())
{
}

UBusService::~UBusService()
{
	delete d;
}

void UBusService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("BusService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to BusService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::BusService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UBusService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UBusServiceClient* UBusService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UBusServiceClient>();
	return client;
}

void UBusService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UBusService::CallResetReaderBus(const FGrpcSroBusTarget& Request, FResetReaderBusResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UBusServiceResetReaderBusLambdaWrapper* lambdaWrapper = NewObject<UBusServiceResetReaderBusLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitResetReaderBus();
	InnerClient->OnResetReaderBusResponse.AddUniqueDynamic(lambdaWrapper, &UBusServiceResetReaderBusLambdaWrapper::OnResponse);
	InnerClient->ResetReaderBus(lambdaWrapper->Handle, Request, MetaData);
}

void UBusService::CallResetWriterBus(const FGrpcSroBusTarget& Request, FResetWriterBusResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UBusServiceResetWriterBusLambdaWrapper* lambdaWrapper = NewObject<UBusServiceResetWriterBusLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitResetWriterBus();
	InnerClient->OnResetWriterBusResponse.AddUniqueDynamic(lambdaWrapper, &UBusServiceResetWriterBusLambdaWrapper::OnResponse);
	InnerClient->ResetWriterBus(lambdaWrapper->Handle, Request, MetaData);
}
