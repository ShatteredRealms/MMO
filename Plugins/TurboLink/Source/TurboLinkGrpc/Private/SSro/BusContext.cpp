//Generated by TurboLink CodeGenerator, do not edit!
#include "BusContext.h"
#include "SSro/BusClient.h"
#include "BusService_Private.h"
#include "BusMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_BusService_ResetReaderBus::GrpcContext_BusService_ResetReaderBus(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_BusService_ResetReaderBus::Call(const FGrpcSroBusTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::BusTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UBusService* service = (UBusService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncResetReaderBus(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_BusService_ResetReaderBus::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::ResetBusResponse* _RpcResponse) 
		{
			UBusServiceClient* client = (UBusServiceClient*)(this->Client);
			if (!(client->OnResetReaderBusResponse.IsBound())) return;

			FGrpcSroResetBusResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnResetReaderBusResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_BusService_ResetWriterBus::GrpcContext_BusService_ResetWriterBus(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_BusService_ResetWriterBus::Call(const FGrpcSroBusTarget& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::BusTarget rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UBusService* service = (UBusService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncResetWriterBus(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_BusService_ResetWriterBus::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::ResetBusResponse* _RpcResponse) 
		{
			UBusServiceClient* client = (UBusServiceClient*)(this->Client);
			if (!(client->OnResetWriterBusResponse.IsBound())) return;

			FGrpcSroResetBusResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnResetWriterBusResponse.Broadcast(Handle, _Result, response);
		}
	);
}
