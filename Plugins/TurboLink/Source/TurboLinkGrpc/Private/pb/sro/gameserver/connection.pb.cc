#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gameserver/connection.proto

#include "sro/gameserver/connection.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace gameserver {
template <typename>
PROTOBUF_CONSTEXPR ConnectGameServerResponse::ConnectGameServerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectGameServerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectGameServerResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectGameServerResponseDefaultTypeInternal() {}
  union {
    ConnectGameServerResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectGameServerResponseDefaultTypeInternal _ConnectGameServerResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VerifyConnectRequest::VerifyConnectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.server_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerifyConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerifyConnectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerifyConnectRequestDefaultTypeInternal() {}
  union {
    VerifyConnectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerifyConnectRequestDefaultTypeInternal _VerifyConnectRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConnectionStatus::ConnectionStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.online_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionStatusDefaultTypeInternal() {}
  union {
    ConnectionStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionStatusDefaultTypeInternal _ConnectionStatus_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransferPlayerRequest::TransferPlayerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.character_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/nullptr} {}
struct TransferPlayerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferPlayerRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferPlayerRequestDefaultTypeInternal() {}
  union {
    TransferPlayerRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferPlayerRequestDefaultTypeInternal _TransferPlayerRequest_default_instance_;
}  // namespace gameserver
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fgameserver_2fconnection_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fgameserver_2fconnection_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fgameserver_2fconnection_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fgameserver_2fconnection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::ConnectGameServerResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::ConnectGameServerResponse, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::ConnectGameServerResponse, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::ConnectGameServerResponse, _impl_.connection_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::VerifyConnectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::VerifyConnectRequest, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::VerifyConnectRequest, _impl_.server_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::ConnectionStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::ConnectionStatus, _impl_.online_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::TransferPlayerRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::TransferPlayerRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::TransferPlayerRequest, _impl_.character_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::TransferPlayerRequest, _impl_.location_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::sro::gameserver::ConnectGameServerResponse)},
        { 11, -1, -1, sizeof(::sro::gameserver::VerifyConnectRequest)},
        { 21, -1, -1, sizeof(::sro::gameserver::ConnectionStatus)},
        { 30, 40, -1, sizeof(::sro::gameserver::TransferPlayerRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::gameserver::_ConnectGameServerResponse_default_instance_._instance,
    &::sro::gameserver::_VerifyConnectRequest_default_instance_._instance,
    &::sro::gameserver::_ConnectionStatus_default_instance_._instance,
    &::sro::gameserver::_TransferPlayerRequest_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fgameserver_2fconnection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037sro/gameserver/connection.proto\022\016sro.g"
    "ameserver\032\034google/api/annotations.proto\032"
    "\021sro/globals.proto\"Q\n\031ConnectGameServerR"
    "esponse\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\025"
    "\n\rconnection_id\030\003 \001(\t\"B\n\024VerifyConnectRe"
    "quest\022\025\n\rconnection_id\030\001 \001(\t\022\023\n\013server_n"
    "ame\030\002 \001(\t\"\"\n\020ConnectionStatus\022\016\n\006online\030"
    "\001 \001(\010\"K\n\025TransferPlayerRequest\022\021\n\tcharac"
    "ter\030\001 \001(\t\022\037\n\010location\030\002 \001(\0132\r.sro.Locati"
    "on2\273\004\n\021ConnectionService\022t\n\021ConnectGameS"
    "erver\022\r.sro.TargetId\032).sro.gameserver.Co"
    "nnectGameServerResponse\"%\202\323\344\223\002\037\022\035/v1/con"
    "nect/character/id/{id}\022c\n\rVerifyConnect\022"
    "$.sro.gameserver.VerifyConnectRequest\032\r."
    "sro.TargetId\"\035\202\323\344\223\002\027\"\022/v1/connect/verify"
    ":\001*\022{\n\016TransferPlayer\022%.sro.gameserver.T"
    "ransferPlayerRequest\032).sro.gameserver.Co"
    "nnectGameServerResponse\"\027\202\323\344\223\002\021\"\014/v1/tra"
    "nsfer:\001*\022k\n\022IsCharacterPlaying\022\r.sro.Tar"
    "getId\032 .sro.gameserver.ConnectionStatus\""
    "$\202\323\344\223\002\036\022\034/v1/status/character/id/{id}\022a\n"
    "\rIsUserPlaying\022\r.sro.TargetId\032 .sro.game"
    "server.ConnectionStatus\"\037\202\323\344\223\002\031\022\027/v1/sta"
    "tus/user/id/{id}B9Z7github.com/Shattered"
    "Realms/gameserver-service/pkg/pb;pbb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fgameserver_2fconnection_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_sro_2fglobals_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fgameserver_2fconnection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fgameserver_2fconnection_2eproto = {
    false,
    false,
    1003,
    descriptor_table_protodef_sro_2fgameserver_2fconnection_2eproto,
    "sro/gameserver/connection.proto",
    &descriptor_table_sro_2fgameserver_2fconnection_2eproto_once,
    descriptor_table_sro_2fgameserver_2fconnection_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_sro_2fgameserver_2fconnection_2eproto::offsets,
    file_level_metadata_sro_2fgameserver_2fconnection_2eproto,
    file_level_enum_descriptors_sro_2fgameserver_2fconnection_2eproto,
    file_level_service_descriptors_sro_2fgameserver_2fconnection_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fgameserver_2fconnection_2eproto_getter() {
  return &descriptor_table_sro_2fgameserver_2fconnection_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fgameserver_2fconnection_2eproto(&descriptor_table_sro_2fgameserver_2fconnection_2eproto);
namespace sro {
namespace gameserver {
// ===================================================================

class ConnectGameServerResponse::_Internal {
 public:
};

ConnectGameServerResponse::ConnectGameServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.ConnectGameServerResponse)
}
ConnectGameServerResponse::ConnectGameServerResponse(const ConnectGameServerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectGameServerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.port_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.ConnectGameServerResponse)
}

inline void ConnectGameServerResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.address_) {}

    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.port_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectGameServerResponse::~ConnectGameServerResponse() {
  // @@protoc_insertion_point(destructor:sro.gameserver.ConnectGameServerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectGameServerResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  _impl_.connection_id_.Destroy();
}

void ConnectGameServerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectGameServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.ConnectGameServerResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  _impl_.connection_id_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectGameServerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.ConnectGameServerResponse.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string connection_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.ConnectGameServerResponse.connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConnectGameServerResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.ConnectGameServerResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.ConnectGameServerResponse.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_port(), target);
  }

  // string connection_id = 3;
  if (!this->_internal_connection_id().empty()) {
    const std::string& _s = this->_internal_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.ConnectGameServerResponse.connection_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.ConnectGameServerResponse)
  return target;
}

::size_t ConnectGameServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.ConnectGameServerResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string connection_id = 3;
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection_id());
  }

  // uint32 port = 2;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectGameServerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectGameServerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectGameServerResponse::GetClassData() const { return &_class_data_; }


void ConnectGameServerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectGameServerResponse*>(&to_msg);
  auto& from = static_cast<const ConnectGameServerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.ConnectGameServerResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectGameServerResponse::CopyFrom(const ConnectGameServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.ConnectGameServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectGameServerResponse::IsInitialized() const {
  return true;
}

void ConnectGameServerResponse::InternalSwap(ConnectGameServerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_id_, lhs_arena,
                                       &other->_impl_.connection_id_, rhs_arena);

  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectGameServerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fconnection_2eproto_getter, &descriptor_table_sro_2fgameserver_2fconnection_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fconnection_2eproto[0]);
}
// ===================================================================

class VerifyConnectRequest::_Internal {
 public:
};

VerifyConnectRequest::VerifyConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.VerifyConnectRequest)
}
VerifyConnectRequest::VerifyConnectRequest(const VerifyConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerifyConnectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_) {}

    , decltype(_impl_.server_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_name().empty()) {
    _this->_impl_.server_name_.Set(from._internal_server_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.VerifyConnectRequest)
}

inline void VerifyConnectRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_) {}

    , decltype(_impl_.server_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.server_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerifyConnectRequest::~VerifyConnectRequest() {
  // @@protoc_insertion_point(destructor:sro.gameserver.VerifyConnectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerifyConnectRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_id_.Destroy();
  _impl_.server_name_.Destroy();
}

void VerifyConnectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerifyConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.VerifyConnectRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_.ClearToEmpty();
  _impl_.server_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerifyConnectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.VerifyConnectRequest.connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string server_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.VerifyConnectRequest.server_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VerifyConnectRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.VerifyConnectRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1;
  if (!this->_internal_connection_id().empty()) {
    const std::string& _s = this->_internal_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.VerifyConnectRequest.connection_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string server_name = 2;
  if (!this->_internal_server_name().empty()) {
    const std::string& _s = this->_internal_server_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.VerifyConnectRequest.server_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.VerifyConnectRequest)
  return target;
}

::size_t VerifyConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.VerifyConnectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1;
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection_id());
  }

  // string server_name = 2;
  if (!this->_internal_server_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_server_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerifyConnectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerifyConnectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerifyConnectRequest::GetClassData() const { return &_class_data_; }


void VerifyConnectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerifyConnectRequest*>(&to_msg);
  auto& from = static_cast<const VerifyConnectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.VerifyConnectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (!from._internal_server_name().empty()) {
    _this->_internal_set_server_name(from._internal_server_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerifyConnectRequest::CopyFrom(const VerifyConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.VerifyConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyConnectRequest::IsInitialized() const {
  return true;
}

void VerifyConnectRequest::InternalSwap(VerifyConnectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_id_, lhs_arena,
                                       &other->_impl_.connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.server_name_, lhs_arena,
                                       &other->_impl_.server_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyConnectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fconnection_2eproto_getter, &descriptor_table_sro_2fgameserver_2fconnection_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fconnection_2eproto[1]);
}
// ===================================================================

class ConnectionStatus::_Internal {
 public:
};

ConnectionStatus::ConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.ConnectionStatus)
}
ConnectionStatus::ConnectionStatus(const ConnectionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.ConnectionStatus)
}

inline void ConnectionStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.online_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConnectionStatus::~ConnectionStatus() {
  // @@protoc_insertion_point(destructor:sro.gameserver.ConnectionStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.ConnectionStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.online_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool online = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConnectionStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.ConnectionStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool online = 1;
  if (this->_internal_online() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_online(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.ConnectionStatus)
  return target;
}

::size_t ConnectionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.ConnectionStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool online = 1;
  if (this->_internal_online() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionStatus::GetClassData() const { return &_class_data_; }


void ConnectionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionStatus*>(&to_msg);
  auto& from = static_cast<const ConnectionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.ConnectionStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_online() != 0) {
    _this->_internal_set_online(from._internal_online());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionStatus::CopyFrom(const ConnectionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.ConnectionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionStatus::IsInitialized() const {
  return true;
}

void ConnectionStatus::InternalSwap(ConnectionStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.online_, other->_impl_.online_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fconnection_2eproto_getter, &descriptor_table_sro_2fgameserver_2fconnection_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fconnection_2eproto[2]);
}
// ===================================================================

class TransferPlayerRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TransferPlayerRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TransferPlayerRequest, _impl_._has_bits_);
  static const ::sro::Location& location(const TransferPlayerRequest* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::Location&
TransferPlayerRequest::_Internal::location(const TransferPlayerRequest* msg) {
  return *msg->_impl_.location_;
}
void TransferPlayerRequest::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TransferPlayerRequest::TransferPlayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.TransferPlayerRequest)
}
TransferPlayerRequest::TransferPlayerRequest(const TransferPlayerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferPlayerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_) {}

    , decltype(_impl_.location_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character().empty()) {
    _this->_impl_.character_.Set(from._internal_character(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.location_ = new ::sro::Location(*from._impl_.location_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.TransferPlayerRequest)
}

inline void TransferPlayerRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_) {}

    , decltype(_impl_.location_){nullptr}
  };
  _impl_.character_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransferPlayerRequest::~TransferPlayerRequest() {
  // @@protoc_insertion_point(destructor:sro.gameserver.TransferPlayerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferPlayerRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.character_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void TransferPlayerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.TransferPlayerRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferPlayerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string character = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_character();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.TransferPlayerRequest.character"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransferPlayerRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.TransferPlayerRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string character = 1;
  if (!this->_internal_character().empty()) {
    const std::string& _s = this->_internal_character();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.TransferPlayerRequest.character");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.Location location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.TransferPlayerRequest)
  return target;
}

::size_t TransferPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.TransferPlayerRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string character = 1;
  if (!this->_internal_character().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character());
  }

  // .sro.Location location = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferPlayerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferPlayerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferPlayerRequest::GetClassData() const { return &_class_data_; }


void TransferPlayerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferPlayerRequest*>(&to_msg);
  auto& from = static_cast<const TransferPlayerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.TransferPlayerRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_character().empty()) {
    _this->_internal_set_character(from._internal_character());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_location()->::sro::Location::MergeFrom(
        from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferPlayerRequest::CopyFrom(const TransferPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.TransferPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferPlayerRequest::IsInitialized() const {
  return true;
}

void TransferPlayerRequest::InternalSwap(TransferPlayerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_, lhs_arena,
                                       &other->_impl_.character_, rhs_arena);
  swap(_impl_.location_, other->_impl_.location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferPlayerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fconnection_2eproto_getter, &descriptor_table_sro_2fgameserver_2fconnection_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fconnection_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace gameserver
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::gameserver::ConnectGameServerResponse*
Arena::CreateMaybeMessage< ::sro::gameserver::ConnectGameServerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::ConnectGameServerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::VerifyConnectRequest*
Arena::CreateMaybeMessage< ::sro::gameserver::VerifyConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::VerifyConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::ConnectionStatus*
Arena::CreateMaybeMessage< ::sro::gameserver::ConnectionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::ConnectionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::TransferPlayerRequest*
Arena::CreateMaybeMessage< ::sro::gameserver::TransferPlayerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::TransferPlayerRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
