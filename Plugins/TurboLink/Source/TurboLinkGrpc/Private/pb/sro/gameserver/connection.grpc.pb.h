// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/gameserver/connection.proto
#ifndef GRPC_sro_2fgameserver_2fconnection_2eproto__INCLUDED
#define GRPC_sro_2fgameserver_2fconnection_2eproto__INCLUDED

#include "sro/gameserver/connection.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sro {
namespace gameserver {

class ConnectionService final {
 public:
  static constexpr char const* service_full_name() {
    return "sro.gameserver.ConnectionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectGameServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>> AsyncConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>>(AsyncConnectGameServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>> PrepareAsyncConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>>(PrepareAsyncConnectGameServerRaw(context, request, cq));
    }
    // Called by the gameserver to verifying and incoming connection
    // request. Returns the character id if the connection was successful
    virtual ::grpc::Status VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::sro::TargetId* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::TargetId>> AsyncVerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::TargetId>>(AsyncVerifyConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::TargetId>> PrepareAsyncVerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::TargetId>>(PrepareAsyncVerifyConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::sro::gameserver::ConnectGameServerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>> AsyncTransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>>(AsyncTransferPlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>> PrepareAsyncTransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>>(PrepareAsyncTransferPlayerRaw(context, request, cq));
    }
    virtual ::grpc::Status IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectionStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>> AsyncIsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>>(AsyncIsCharacterPlayingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>> PrepareAsyncIsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>>(PrepareAsyncIsCharacterPlayingRaw(context, request, cq));
    }
    virtual ::grpc::Status IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectionStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>> AsyncIsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>>(AsyncIsUserPlayingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>> PrepareAsyncIsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>>(PrepareAsyncIsUserPlayingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Called by the gameserver to verifying and incoming connection
      // request. Returns the character id if the connection was successful
      virtual void VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>* AsyncConnectGameServerRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>* PrepareAsyncConnectGameServerRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::TargetId>* AsyncVerifyConnectRaw(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::TargetId>* PrepareAsyncVerifyConnectRaw(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>* AsyncTransferPlayerRaw(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectGameServerResponse>* PrepareAsyncTransferPlayerRaw(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>* AsyncIsCharacterPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>* PrepareAsyncIsCharacterPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>* AsyncIsUserPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::ConnectionStatus>* PrepareAsyncIsUserPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectGameServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>> AsyncConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>>(AsyncConnectGameServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>> PrepareAsyncConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>>(PrepareAsyncConnectGameServerRaw(context, request, cq));
    }
    ::grpc::Status VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::sro::TargetId* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::TargetId>> AsyncVerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::TargetId>>(AsyncVerifyConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::TargetId>> PrepareAsyncVerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::TargetId>>(PrepareAsyncVerifyConnectRaw(context, request, cq));
    }
    ::grpc::Status TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::sro::gameserver::ConnectGameServerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>> AsyncTransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>>(AsyncTransferPlayerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>> PrepareAsyncTransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>>(PrepareAsyncTransferPlayerRaw(context, request, cq));
    }
    ::grpc::Status IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectionStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>> AsyncIsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>>(AsyncIsCharacterPlayingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>> PrepareAsyncIsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>>(PrepareAsyncIsCharacterPlayingRaw(context, request, cq));
    }
    ::grpc::Status IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectionStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>> AsyncIsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>>(AsyncIsUserPlayingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>> PrepareAsyncIsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>>(PrepareAsyncIsUserPlayingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response, std::function<void(::grpc::Status)>) override;
      void ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response, std::function<void(::grpc::Status)>) override;
      void VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response, std::function<void(::grpc::Status)>) override;
      void TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, std::function<void(::grpc::Status)>) override;
      void IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, std::function<void(::grpc::Status)>) override;
      void IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* AsyncConnectGameServerRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* PrepareAsyncConnectGameServerRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::TargetId>* AsyncVerifyConnectRaw(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::TargetId>* PrepareAsyncVerifyConnectRaw(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* AsyncTransferPlayerRaw(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* PrepareAsyncTransferPlayerRaw(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* AsyncIsCharacterPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* PrepareAsyncIsCharacterPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* AsyncIsUserPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* PrepareAsyncIsUserPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectGameServer_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyConnect_;
    const ::grpc::internal::RpcMethod rpcmethod_TransferPlayer_;
    const ::grpc::internal::RpcMethod rpcmethod_IsCharacterPlaying_;
    const ::grpc::internal::RpcMethod rpcmethod_IsUserPlaying_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ConnectGameServer(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response);
    // Called by the gameserver to verifying and incoming connection
    // request. Returns the character id if the connection was successful
    virtual ::grpc::Status VerifyConnect(::grpc::ServerContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response);
    virtual ::grpc::Status TransferPlayer(::grpc::ServerContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response);
    virtual ::grpc::Status IsCharacterPlaying(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response);
    virtual ::grpc::Status IsUserPlaying(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectGameServer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ConnectGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectGameServer(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectGameServer(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::ConnectGameServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifyConnect() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VerifyConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConnect(::grpc::ServerContext* /*context*/, const ::sro::gameserver::VerifyConnectRequest* /*request*/, ::sro::TargetId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyConnect(::grpc::ServerContext* context, ::sro::gameserver::VerifyConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::TargetId>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TransferPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TransferPlayer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TransferPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPlayer(::grpc::ServerContext* /*context*/, const ::sro::gameserver::TransferPlayerRequest* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferPlayer(::grpc::ServerContext* context, ::sro::gameserver::TransferPlayerRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::ConnectGameServerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsCharacterPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsCharacterPlaying() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IsCharacterPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCharacterPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCharacterPlaying(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::ConnectionStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsUserPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsUserPlaying() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_IsUserPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsUserPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsUserPlaying(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::ConnectionStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ConnectGameServer<WithAsyncMethod_VerifyConnect<WithAsyncMethod_TransferPlayer<WithAsyncMethod_IsCharacterPlaying<WithAsyncMethod_IsUserPlaying<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ConnectGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConnectGameServer() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response) { return this->ConnectGameServer(context, request, response); }));}
    void SetMessageAllocatorFor_ConnectGameServer(
        ::grpc::MessageAllocator< ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConnectGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectGameServer(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConnectGameServer(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_VerifyConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_VerifyConnect() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response) { return this->VerifyConnect(context, request, response); }));}
    void SetMessageAllocatorFor_VerifyConnect(
        ::grpc::MessageAllocator< ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_VerifyConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConnect(::grpc::ServerContext* /*context*/, const ::sro::gameserver::VerifyConnectRequest* /*request*/, ::sro::TargetId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifyConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::gameserver::VerifyConnectRequest* /*request*/, ::sro::TargetId* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TransferPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TransferPlayer() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response) { return this->TransferPlayer(context, request, response); }));}
    void SetMessageAllocatorFor_TransferPlayer(
        ::grpc::MessageAllocator< ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TransferPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPlayer(::grpc::ServerContext* /*context*/, const ::sro::gameserver::TransferPlayerRequest* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferPlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::gameserver::TransferPlayerRequest* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsCharacterPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsCharacterPlaying() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::ConnectionStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response) { return this->IsCharacterPlaying(context, request, response); }));}
    void SetMessageAllocatorFor_IsCharacterPlaying(
        ::grpc::MessageAllocator< ::sro::TargetId, ::sro::gameserver::ConnectionStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::ConnectionStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsCharacterPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCharacterPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCharacterPlaying(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsUserPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsUserPlaying() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::ConnectionStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response) { return this->IsUserPlaying(context, request, response); }));}
    void SetMessageAllocatorFor_IsUserPlaying(
        ::grpc::MessageAllocator< ::sro::TargetId, ::sro::gameserver::ConnectionStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::ConnectionStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsUserPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsUserPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsUserPlaying(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ConnectGameServer<WithCallbackMethod_VerifyConnect<WithCallbackMethod_TransferPlayer<WithCallbackMethod_IsCharacterPlaying<WithCallbackMethod_IsUserPlaying<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ConnectGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectGameServer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ConnectGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectGameServer(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifyConnect() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VerifyConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConnect(::grpc::ServerContext* /*context*/, const ::sro::gameserver::VerifyConnectRequest* /*request*/, ::sro::TargetId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TransferPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TransferPlayer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TransferPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPlayer(::grpc::ServerContext* /*context*/, const ::sro::gameserver::TransferPlayerRequest* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsCharacterPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsCharacterPlaying() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IsCharacterPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCharacterPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsUserPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsUserPlaying() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_IsUserPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsUserPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectGameServer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ConnectGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectGameServer(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectGameServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifyConnect() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_VerifyConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConnect(::grpc::ServerContext* /*context*/, const ::sro::gameserver::VerifyConnectRequest* /*request*/, ::sro::TargetId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TransferPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TransferPlayer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TransferPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPlayer(::grpc::ServerContext* /*context*/, const ::sro::gameserver::TransferPlayerRequest* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransferPlayer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsCharacterPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsCharacterPlaying() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IsCharacterPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCharacterPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsCharacterPlaying(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsUserPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsUserPlaying() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_IsUserPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsUserPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsUserPlaying(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConnectGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConnectGameServer() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConnectGameServer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConnectGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectGameServer(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConnectGameServer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_VerifyConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_VerifyConnect() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifyConnect(context, request, response); }));
    }
    ~WithRawCallbackMethod_VerifyConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyConnect(::grpc::ServerContext* /*context*/, const ::sro::gameserver::VerifyConnectRequest* /*request*/, ::sro::TargetId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* VerifyConnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TransferPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TransferPlayer() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TransferPlayer(context, request, response); }));
    }
    ~WithRawCallbackMethod_TransferPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TransferPlayer(::grpc::ServerContext* /*context*/, const ::sro::gameserver::TransferPlayerRequest* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TransferPlayer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsCharacterPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsCharacterPlaying() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsCharacterPlaying(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsCharacterPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsCharacterPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsCharacterPlaying(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsUserPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsUserPlaying() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsUserPlaying(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsUserPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsUserPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsUserPlaying(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConnectGameServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConnectGameServer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse>* streamer) {
                       return this->StreamedConnectGameServer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConnectGameServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectGameServer(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnectGameServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::sro::gameserver::ConnectGameServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyConnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifyConnect() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId>* streamer) {
                       return this->StreamedVerifyConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifyConnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyConnect(::grpc::ServerContext* /*context*/, const ::sro::gameserver::VerifyConnectRequest* /*request*/, ::sro::TargetId* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::gameserver::VerifyConnectRequest,::sro::TargetId>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TransferPlayer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TransferPlayer() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse>* streamer) {
                       return this->StreamedTransferPlayer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TransferPlayer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TransferPlayer(::grpc::ServerContext* /*context*/, const ::sro::gameserver::TransferPlayerRequest* /*request*/, ::sro::gameserver::ConnectGameServerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransferPlayer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::gameserver::TransferPlayerRequest,::sro::gameserver::ConnectGameServerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsCharacterPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsCharacterPlaying() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::sro::gameserver::ConnectionStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::sro::gameserver::ConnectionStatus>* streamer) {
                       return this->StreamedIsCharacterPlaying(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsCharacterPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsCharacterPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsCharacterPlaying(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::sro::gameserver::ConnectionStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsUserPlaying : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsUserPlaying() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::sro::gameserver::ConnectionStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::sro::gameserver::ConnectionStatus>* streamer) {
                       return this->StreamedIsUserPlaying(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsUserPlaying() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsUserPlaying(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::ConnectionStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsUserPlaying(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::sro::gameserver::ConnectionStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ConnectGameServer<WithStreamedUnaryMethod_VerifyConnect<WithStreamedUnaryMethod_TransferPlayer<WithStreamedUnaryMethod_IsCharacterPlaying<WithStreamedUnaryMethod_IsUserPlaying<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ConnectGameServer<WithStreamedUnaryMethod_VerifyConnect<WithStreamedUnaryMethod_TransferPlayer<WithStreamedUnaryMethod_IsCharacterPlaying<WithStreamedUnaryMethod_IsUserPlaying<Service > > > > > StreamedService;
};

}  // namespace gameserver
}  // namespace sro


#endif  // GRPC_sro_2fgameserver_2fconnection_2eproto__INCLUDED
