// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/gameserver/connection.proto

#include "sro/gameserver/connection.pb.h"
#include "sro/gameserver/connection.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sro {
namespace gameserver {

static const char* ConnectionService_method_names[] = {
  "/sro.gameserver.ConnectionService/ConnectGameServer",
  "/sro.gameserver.ConnectionService/VerifyConnect",
  "/sro.gameserver.ConnectionService/TransferPlayer",
  "/sro.gameserver.ConnectionService/IsCharacterPlaying",
  "/sro.gameserver.ConnectionService/IsUserPlaying",
};

std::unique_ptr< ConnectionService::Stub> ConnectionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConnectionService::Stub> stub(new ConnectionService::Stub(channel, options));
  return stub;
}

ConnectionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ConnectGameServer_(ConnectionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyConnect_(ConnectionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransferPlayer_(ConnectionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsCharacterPlaying_(ConnectionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsUserPlaying_(ConnectionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ConnectionService::Stub::ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectGameServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectGameServer_, context, request, response);
}

void ConnectionService::Stub::async::ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectGameServer_, context, request, response, std::move(f));
}

void ConnectionService::Stub::async::ConnectGameServer(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectGameServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* ConnectionService::Stub::PrepareAsyncConnectGameServerRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::ConnectGameServerResponse, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectGameServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* ConnectionService::Stub::AsyncConnectGameServerRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectGameServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConnectionService::Stub::VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::sro::TargetId* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VerifyConnect_, context, request, response);
}

void ConnectionService::Stub::async::VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyConnect_, context, request, response, std::move(f));
}

void ConnectionService::Stub::async::VerifyConnect(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyConnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::TargetId>* ConnectionService::Stub::PrepareAsyncVerifyConnectRaw(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::TargetId, ::sro::gameserver::VerifyConnectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VerifyConnect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::TargetId>* ConnectionService::Stub::AsyncVerifyConnectRaw(::grpc::ClientContext* context, const ::sro::gameserver::VerifyConnectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyConnectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConnectionService::Stub::TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::sro::gameserver::ConnectGameServerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransferPlayer_, context, request, response);
}

void ConnectionService::Stub::async::TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferPlayer_, context, request, response, std::move(f));
}

void ConnectionService::Stub::async::TransferPlayer(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransferPlayer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* ConnectionService::Stub::PrepareAsyncTransferPlayerRaw(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::ConnectGameServerResponse, ::sro::gameserver::TransferPlayerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransferPlayer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectGameServerResponse>* ConnectionService::Stub::AsyncTransferPlayerRaw(::grpc::ClientContext* context, const ::sro::gameserver::TransferPlayerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransferPlayerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConnectionService::Stub::IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectionStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::gameserver::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsCharacterPlaying_, context, request, response);
}

void ConnectionService::Stub::async::IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::gameserver::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCharacterPlaying_, context, request, response, std::move(f));
}

void ConnectionService::Stub::async::IsCharacterPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsCharacterPlaying_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* ConnectionService::Stub::PrepareAsyncIsCharacterPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::ConnectionStatus, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsCharacterPlaying_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* ConnectionService::Stub::AsyncIsCharacterPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsCharacterPlayingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ConnectionService::Stub::IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::ConnectionStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::gameserver::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsUserPlaying_, context, request, response);
}

void ConnectionService::Stub::async::IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::gameserver::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsUserPlaying_, context, request, response, std::move(f));
}

void ConnectionService::Stub::async::IsUserPlaying(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsUserPlaying_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* ConnectionService::Stub::PrepareAsyncIsUserPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::ConnectionStatus, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsUserPlaying_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::ConnectionStatus>* ConnectionService::Stub::AsyncIsUserPlayingRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsUserPlayingRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConnectionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConnectionService::Service, ::sro::TargetId, ::sro::gameserver::ConnectGameServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConnectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::gameserver::ConnectGameServerResponse* resp) {
               return service->ConnectGameServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConnectionService::Service, ::sro::gameserver::VerifyConnectRequest, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConnectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gameserver::VerifyConnectRequest* req,
             ::sro::TargetId* resp) {
               return service->VerifyConnect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConnectionService::Service, ::sro::gameserver::TransferPlayerRequest, ::sro::gameserver::ConnectGameServerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConnectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gameserver::TransferPlayerRequest* req,
             ::sro::gameserver::ConnectGameServerResponse* resp) {
               return service->TransferPlayer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConnectionService::Service, ::sro::TargetId, ::sro::gameserver::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConnectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::gameserver::ConnectionStatus* resp) {
               return service->IsCharacterPlaying(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConnectionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConnectionService::Service, ::sro::TargetId, ::sro::gameserver::ConnectionStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConnectionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::gameserver::ConnectionStatus* resp) {
               return service->IsUserPlaying(ctx, req, resp);
             }, this)));
}

ConnectionService::Service::~Service() {
}

::grpc::Status ConnectionService::Service::ConnectGameServer(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectGameServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConnectionService::Service::VerifyConnect(::grpc::ServerContext* context, const ::sro::gameserver::VerifyConnectRequest* request, ::sro::TargetId* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConnectionService::Service::TransferPlayer(::grpc::ServerContext* context, const ::sro::gameserver::TransferPlayerRequest* request, ::sro::gameserver::ConnectGameServerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConnectionService::Service::IsCharacterPlaying(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConnectionService::Service::IsUserPlaying(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::ConnectionStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace gameserver

