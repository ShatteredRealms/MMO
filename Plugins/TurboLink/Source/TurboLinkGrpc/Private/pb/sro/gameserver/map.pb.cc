#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gameserver/map.proto

#include "sro/gameserver/map.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace gameserver {
template <typename>
PROTOBUF_CONSTEXPR CreateMapRequest::CreateMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.map_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateMapRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateMapRequestDefaultTypeInternal() {}
  union {
    CreateMapRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateMapRequestDefaultTypeInternal _CreateMapRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EditMapRequest::EditMapRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.optional_name_)*/{}
  , /*decltype(_impl_.optional_map_path_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EditMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditMapRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditMapRequestDefaultTypeInternal() {}
  union {
    EditMapRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditMapRequestDefaultTypeInternal _EditMapRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Map::Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.map_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Maps::Maps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maps_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MapsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapsDefaultTypeInternal() {}
  union {
    Maps _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapsDefaultTypeInternal _Maps_default_instance_;
}  // namespace gameserver
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fgameserver_2fmap_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fgameserver_2fmap_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fgameserver_2fmap_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fgameserver_2fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateMapRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateMapRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateMapRequest, _impl_.map_path_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditMapRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditMapRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditMapRequest, _impl_.target_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditMapRequest, _impl_.optional_name_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditMapRequest, _impl_.optional_map_path_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Map, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Map, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Map, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Map, _impl_.map_path_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Maps, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Maps, _impl_.maps_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::sro::gameserver::CreateMapRequest)},
        { 10, -1, -1, sizeof(::sro::gameserver::EditMapRequest)},
        { 23, -1, -1, sizeof(::sro::gameserver::Map)},
        { 34, -1, -1, sizeof(::sro::gameserver::Maps)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::gameserver::_CreateMapRequest_default_instance_._instance,
    &::sro::gameserver::_EditMapRequest_default_instance_._instance,
    &::sro::gameserver::_Map_default_instance_._instance,
    &::sro::gameserver::_Maps_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fgameserver_2fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030sro/gameserver/map.proto\022\016sro.gameserv"
    "er\032\034google/api/annotations.proto\032\033google"
    "/protobuf/empty.proto\032\021sro/globals.proto"
    "\"2\n\020CreateMapRequest\022\014\n\004name\030\001 \001(\t\022\020\n\010ma"
    "p_path\030\002 \001(\t\"m\n\016EditMapRequest\022\021\n\ttarget"
    "_id\030\001 \001(\t\022\016\n\004name\030\002 \001(\tH\000\022\022\n\010map_path\030\003 "
    "\001(\tH\001B\017\n\roptional_nameB\023\n\021optional_map_p"
    "ath\"1\n\003Map\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\020\n\010"
    "map_path\030\003 \001(\t\")\n\004Maps\022!\n\004maps\030\001 \003(\0132\023.s"
    "ro.gameserver.Map2\252\003\n\nMapService\022F\n\006GetM"
    "ap\022\r.sro.TargetId\032\023.sro.gameserver.Map\"\030"
    "\202\323\344\223\002\022\022\020/v1/maps/id/{id}\022I\n\007GetMaps\022\026.go"
    "ogle.protobuf.Empty\032\024.sro.gameserver.Map"
    "s\"\020\202\323\344\223\002\n\022\010/v1/maps\022W\n\tCreateMap\022 .sro.g"
    "ameserver.CreateMapRequest\032\023.sro.gameser"
    "ver.Map\"\023\202\323\344\223\002\r\"\010/v1/maps:\001*\022b\n\007EditMap\022"
    "\036.sro.gameserver.EditMapRequest\032\023.sro.ga"
    "meserver.Map\"\"\202\323\344\223\002\034\032\027/v1/maps/id/{targe"
    "t_id}:\001*\022L\n\tDeleteMap\022\r.sro.TargetId\032\026.g"
    "oogle.protobuf.Empty\"\030\202\323\344\223\002\022*\020/v1/maps/i"
    "d/{id}B9Z7github.com/ShatteredRealms/gam"
    "eserver-service/pkg/pb;pbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fgameserver_2fmap_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_sro_2fglobals_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fgameserver_2fmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fgameserver_2fmap_2eproto = {
    false,
    false,
    873,
    descriptor_table_protodef_sro_2fgameserver_2fmap_2eproto,
    "sro/gameserver/map.proto",
    &descriptor_table_sro_2fgameserver_2fmap_2eproto_once,
    descriptor_table_sro_2fgameserver_2fmap_2eproto_deps,
    3,
    4,
    schemas,
    file_default_instances,
    TableStruct_sro_2fgameserver_2fmap_2eproto::offsets,
    file_level_metadata_sro_2fgameserver_2fmap_2eproto,
    file_level_enum_descriptors_sro_2fgameserver_2fmap_2eproto,
    file_level_service_descriptors_sro_2fgameserver_2fmap_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fgameserver_2fmap_2eproto_getter() {
  return &descriptor_table_sro_2fgameserver_2fmap_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fgameserver_2fmap_2eproto(&descriptor_table_sro_2fgameserver_2fmap_2eproto);
namespace sro {
namespace gameserver {
// ===================================================================

class CreateMapRequest::_Internal {
 public:
};

CreateMapRequest::CreateMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.CreateMapRequest)
}
CreateMapRequest::CreateMapRequest(const CreateMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.map_path_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_path().empty()) {
    _this->_impl_.map_path_.Set(from._internal_map_path(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.CreateMapRequest)
}

inline void CreateMapRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.map_path_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateMapRequest::~CreateMapRequest() {
  // @@protoc_insertion_point(destructor:sro.gameserver.CreateMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateMapRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.map_path_.Destroy();
}

void CreateMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.CreateMapRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.map_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.CreateMapRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string map_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.CreateMapRequest.map_path"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateMapRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.CreateMapRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.CreateMapRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string map_path = 2;
  if (!this->_internal_map_path().empty()) {
    const std::string& _s = this->_internal_map_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.CreateMapRequest.map_path");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.CreateMapRequest)
  return target;
}

::size_t CreateMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.CreateMapRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string map_path = 2;
  if (!this->_internal_map_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_map_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateMapRequest::GetClassData() const { return &_class_data_; }


void CreateMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateMapRequest*>(&to_msg);
  auto& from = static_cast<const CreateMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.CreateMapRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_map_path().empty()) {
    _this->_internal_set_map_path(from._internal_map_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateMapRequest::CopyFrom(const CreateMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.CreateMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMapRequest::IsInitialized() const {
  return true;
}

void CreateMapRequest::InternalSwap(CreateMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.map_path_, lhs_arena,
                                       &other->_impl_.map_path_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fmap_2eproto_getter, &descriptor_table_sro_2fgameserver_2fmap_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fmap_2eproto[0]);
}
// ===================================================================

class EditMapRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditMapRequest, _impl_._oneof_case_);
};

EditMapRequest::EditMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.EditMapRequest)
}
EditMapRequest::EditMapRequest(const EditMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditMapRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_) {}

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_map_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_id().empty()) {
    _this->_impl_.target_id_.Set(from._internal_target_id(), _this->GetArenaForAllocation());
  }
  clear_has_optional_name();
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  clear_has_optional_map_path();
  switch (from.optional_map_path_case()) {
    case kMapPath: {
      _this->_internal_set_map_path(from._internal_map_path());
      break;
    }
    case OPTIONAL_MAP_PATH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.EditMapRequest)
}

inline void EditMapRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_) {}

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_map_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_optional_name();
  clear_has_optional_map_path();
}

EditMapRequest::~EditMapRequest() {
  // @@protoc_insertion_point(destructor:sro.gameserver.EditMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditMapRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_id_.Destroy();
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (has_optional_map_path()) {
    clear_optional_map_path();
  }
}

void EditMapRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditMapRequest::clear_optional_name() {
// @@protoc_insertion_point(one_of_clear_start:sro.gameserver.EditMapRequest)
  switch (optional_name_case()) {
    case kName: {
      _impl_.optional_name_.name_.Destroy();
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}

void EditMapRequest::clear_optional_map_path() {
// @@protoc_insertion_point(one_of_clear_start:sro.gameserver.EditMapRequest)
  switch (optional_map_path_case()) {
    case kMapPath: {
      _impl_.optional_map_path_.map_path_.Destroy();
      break;
    }
    case OPTIONAL_MAP_PATH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_MAP_PATH_NOT_SET;
}


void EditMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.EditMapRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_id_.ClearToEmpty();
  clear_optional_name();
  clear_optional_map_path();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditMapRequest.target_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditMapRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string map_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditMapRequest.map_path"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EditMapRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.EditMapRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_id = 1;
  if (!this->_internal_target_id().empty()) {
    const std::string& _s = this->_internal_target_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditMapRequest.target_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (optional_name_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditMapRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string map_path = 3;
  if (optional_map_path_case() == kMapPath) {
    const std::string& _s = this->_internal_map_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditMapRequest.map_path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.EditMapRequest)
  return target;
}

::size_t EditMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.EditMapRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_id = 1;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_target_id());
  }

  switch (optional_name_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (optional_map_path_case()) {
    // string map_path = 3;
    case kMapPath: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_map_path());
      break;
    }
    case OPTIONAL_MAP_PATH_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditMapRequest::GetClassData() const { return &_class_data_; }


void EditMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditMapRequest*>(&to_msg);
  auto& from = static_cast<const EditMapRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.EditMapRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.optional_map_path_case()) {
    case kMapPath: {
      _this->_internal_set_map_path(from._internal_map_path());
      break;
    }
    case OPTIONAL_MAP_PATH_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditMapRequest::CopyFrom(const EditMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.EditMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditMapRequest::IsInitialized() const {
  return true;
}

void EditMapRequest::InternalSwap(EditMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, lhs_arena,
                                       &other->_impl_.target_id_, rhs_arena);
  swap(_impl_.optional_name_, other->_impl_.optional_name_);
  swap(_impl_.optional_map_path_, other->_impl_.optional_map_path_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fmap_2eproto_getter, &descriptor_table_sro_2fgameserver_2fmap_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fmap_2eproto[1]);
}
// ===================================================================

class Map::_Internal {
 public:
};

Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Map* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.map_path_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_path().empty()) {
    _this->_impl_.map_path_.Set(from._internal_map_path(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.Map)
}

inline void Map::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.map_path_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.map_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.map_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:sro.gameserver.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Map::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.map_path_.Destroy();
}

void Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.Map)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.map_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Map.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Map.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string map_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Map.map_path"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Map::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.Map)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Map.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Map.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string map_path = 3;
  if (!this->_internal_map_path().empty()) {
    const std::string& _s = this->_internal_map_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Map.map_path");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.Map)
  return target;
}

::size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.Map)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string map_path = 3;
  if (!this->_internal_map_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_map_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Map::GetClassData() const { return &_class_data_; }


void Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Map*>(&to_msg);
  auto& from = static_cast<const Map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.Map)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_map_path().empty()) {
    _this->_internal_set_map_path(from._internal_map_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.map_path_, lhs_arena,
                                       &other->_impl_.map_path_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fmap_2eproto_getter, &descriptor_table_sro_2fgameserver_2fmap_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fmap_2eproto[2]);
}
// ===================================================================

class Maps::_Internal {
 public:
};

Maps::Maps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.Maps)
}
Maps::Maps(const Maps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Maps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){from._impl_.maps_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.Maps)
}

inline void Maps::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.maps_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Maps::~Maps() {
  // @@protoc_insertion_point(destructor:sro.gameserver.Maps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Maps::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_maps()->~RepeatedPtrField();
}

void Maps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Maps::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.Maps)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_maps()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Maps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.gameserver.Map maps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Maps::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.Maps)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.gameserver.Map maps = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maps_size()); i < n; i++) {
    const auto& repfield = this->_internal_maps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.Maps)
  return target;
}

::size_t Maps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.Maps)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.gameserver.Map maps = 1;
  total_size += 1UL * this->_internal_maps_size();
  for (const auto& msg : this->_internal_maps()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Maps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Maps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Maps::GetClassData() const { return &_class_data_; }


void Maps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Maps*>(&to_msg);
  auto& from = static_cast<const Maps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.Maps)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_maps()->MergeFrom(from._internal_maps());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Maps::CopyFrom(const Maps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.Maps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Maps::IsInitialized() const {
  return true;
}

void Maps::InternalSwap(Maps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_maps()->InternalSwap(other->_internal_mutable_maps());
}

::PROTOBUF_NAMESPACE_ID::Metadata Maps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fmap_2eproto_getter, &descriptor_table_sro_2fgameserver_2fmap_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fmap_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace gameserver
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::gameserver::CreateMapRequest*
Arena::CreateMaybeMessage< ::sro::gameserver::CreateMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::CreateMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::EditMapRequest*
Arena::CreateMaybeMessage< ::sro::gameserver::EditMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::EditMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::Map*
Arena::CreateMaybeMessage< ::sro::gameserver::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::Maps*
Arena::CreateMaybeMessage< ::sro::gameserver::Maps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::Maps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
