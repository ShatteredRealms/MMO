#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gameserver/dimension.proto

#include "sro/gameserver/dimension.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace gameserver {
template <typename>
PROTOBUF_CONSTEXPR CreateDimensionRequest::CreateDimensionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_ids_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateDimensionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateDimensionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateDimensionRequestDefaultTypeInternal() {}
  union {
    CreateDimensionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateDimensionRequestDefaultTypeInternal _CreateDimensionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DuplicateDimensionRequest::DuplicateDimensionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DuplicateDimensionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DuplicateDimensionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DuplicateDimensionRequestDefaultTypeInternal() {}
  union {
    DuplicateDimensionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DuplicateDimensionRequestDefaultTypeInternal _DuplicateDimensionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EditDimensionRequest::EditDimensionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_ids_)*/{}
  , /*decltype(_impl_.target_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.edit_maps_)*/ false

  , /*decltype(_impl_.optional_name_)*/{}
  , /*decltype(_impl_.optional_version_)*/{}
  , /*decltype(_impl_.optional_location_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EditDimensionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditDimensionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditDimensionRequestDefaultTypeInternal() {}
  union {
    EditDimensionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditDimensionRequestDefaultTypeInternal _EditDimensionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Dimension::Dimension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_ids_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionDefaultTypeInternal() {}
  union {
    Dimension _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionDefaultTypeInternal _Dimension_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Dimensions::Dimensions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DimensionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DimensionsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DimensionsDefaultTypeInternal() {}
  union {
    Dimensions _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DimensionsDefaultTypeInternal _Dimensions_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GameServerUpdateResponse::GameServerUpdateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_ids_created_)*/{}
  , /*decltype(_impl_.map_ids_deleted_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameServerUpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameServerUpdateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameServerUpdateResponseDefaultTypeInternal() {}
  union {
    GameServerUpdateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameServerUpdateResponseDefaultTypeInternal _GameServerUpdateResponse_default_instance_;
}  // namespace gameserver
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fgameserver_2fdimension_2eproto[6];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fgameserver_2fdimension_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fgameserver_2fdimension_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fgameserver_2fdimension_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateDimensionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateDimensionRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateDimensionRequest, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateDimensionRequest, _impl_.map_ids_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::CreateDimensionRequest, _impl_.location_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::DuplicateDimensionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::DuplicateDimensionRequest, _impl_.target_id_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::DuplicateDimensionRequest, _impl_.name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_.target_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_.edit_maps_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_.map_ids_),
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_.optional_name_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_.optional_version_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_.optional_location_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimension, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimension, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimension, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimension, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimension, _impl_.map_ids_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimension, _impl_.location_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimensions, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::Dimensions, _impl_.dimensions_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::GameServerUpdateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::GameServerUpdateResponse, _impl_.map_ids_created_),
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::GameServerUpdateResponse, _impl_.map_ids_deleted_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::sro::gameserver::CreateDimensionRequest)},
        { 12, -1, -1, sizeof(::sro::gameserver::DuplicateDimensionRequest)},
        { 22, -1, -1, sizeof(::sro::gameserver::EditDimensionRequest)},
        { 39, -1, -1, sizeof(::sro::gameserver::Dimension)},
        { 52, -1, -1, sizeof(::sro::gameserver::Dimensions)},
        { 61, -1, -1, sizeof(::sro::gameserver::GameServerUpdateResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::gameserver::_CreateDimensionRequest_default_instance_._instance,
    &::sro::gameserver::_DuplicateDimensionRequest_default_instance_._instance,
    &::sro::gameserver::_EditDimensionRequest_default_instance_._instance,
    &::sro::gameserver::_Dimension_default_instance_._instance,
    &::sro::gameserver::_Dimensions_default_instance_._instance,
    &::sro::gameserver::_GameServerUpdateResponse_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fgameserver_2fdimension_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036sro/gameserver/dimension.proto\022\016sro.ga"
    "meserver\032\034google/api/annotations.proto\032\033"
    "google/protobuf/empty.proto\032\021sro/globals"
    ".proto\"Z\n\026CreateDimensionRequest\022\014\n\004name"
    "\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\022\017\n\007map_ids\030\003 \003(\t"
    "\022\020\n\010location\030\004 \001(\t\"<\n\031DuplicateDimension"
    "Request\022\021\n\ttarget_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t"
    "\"\276\001\n\024EditDimensionRequest\022\021\n\ttarget_id\030\001"
    " \001(\t\022\016\n\004name\030\002 \001(\tH\000\022\021\n\007version\030\003 \001(\tH\001\022"
    "\021\n\tedit_maps\030\004 \001(\010\022\017\n\007map_ids\030\005 \003(\t\022\022\n\010l"
    "ocation\030\010 \001(\tH\002B\017\n\roptional_nameB\022\n\020opti"
    "onal_versionB\023\n\021optional_location\"Y\n\tDim"
    "ension\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007vers"
    "ion\030\003 \001(\t\022\017\n\007map_ids\030\004 \003(\t\022\020\n\010location\030\006"
    " \001(\t\";\n\nDimensions\022-\n\ndimensions\030\001 \003(\0132\031"
    ".sro.gameserver.Dimension\"L\n\030GameServerU"
    "pdateResponse\022\027\n\017map_ids_created\030\001 \003(\t\022\027"
    "\n\017map_ids_deleted\030\002 \003(\t2\225\006\n\020DimensionSer"
    "vice\022X\n\014GetDimension\022\r.sro.TargetId\032\031.sr"
    "o.gameserver.Dimension\"\036\202\323\344\223\002\030\022\026/v1/dime"
    "nsions/id/{id}\022[\n\rGetDimensions\022\026.google"
    ".protobuf.Empty\032\032.sro.gameserver.Dimensi"
    "ons\"\026\202\323\344\223\002\020\022\016/v1/dimensions\022o\n\017CreateDim"
    "ension\022&.sro.gameserver.CreateDimensionR"
    "equest\032\031.sro.gameserver.Dimension\"\031\202\323\344\223\002"
    "\023\"\016/v1/dimensions:\001*\022\216\001\n\022DuplicateDimens"
    "ion\022).sro.gameserver.DuplicateDimensionR"
    "equest\032\031.sro.gameserver.Dimension\"2\202\323\344\223\002"
    ",\"\'/v1/dimensions/id/{target_id}/duplica"
    "te:\001*\022z\n\rEditDimension\022$.sro.gameserver."
    "EditDimensionRequest\032\031.sro.gameserver.Di"
    "mension\"(\202\323\344\223\002\"\032\035/v1/dimensions/id/{targ"
    "et_id}:\001*\022X\n\017DeleteDimension\022\r.sro.Targe"
    "tId\032\026.google.protobuf.Empty\"\036\202\323\344\223\002\030*\026/v1"
    "/dimensions/id/{id}\022r\n\020GameServerUpdate\022"
    "\r.sro.TargetId\032(.sro.gameserver.GameServ"
    "erUpdateResponse\"%\202\323\344\223\002\037\"\035/v1/dimensions"
    "/id/{id}/updateB9Z7github.com/ShatteredR"
    "ealms/gameserver-service/pkg/pb;pbb\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fgameserver_2fdimension_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_sro_2fglobals_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fgameserver_2fdimension_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fgameserver_2fdimension_2eproto = {
    false,
    false,
    1562,
    descriptor_table_protodef_sro_2fgameserver_2fdimension_2eproto,
    "sro/gameserver/dimension.proto",
    &descriptor_table_sro_2fgameserver_2fdimension_2eproto_once,
    descriptor_table_sro_2fgameserver_2fdimension_2eproto_deps,
    3,
    6,
    schemas,
    file_default_instances,
    TableStruct_sro_2fgameserver_2fdimension_2eproto::offsets,
    file_level_metadata_sro_2fgameserver_2fdimension_2eproto,
    file_level_enum_descriptors_sro_2fgameserver_2fdimension_2eproto,
    file_level_service_descriptors_sro_2fgameserver_2fdimension_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fgameserver_2fdimension_2eproto_getter() {
  return &descriptor_table_sro_2fgameserver_2fdimension_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fgameserver_2fdimension_2eproto(&descriptor_table_sro_2fgameserver_2fdimension_2eproto);
namespace sro {
namespace gameserver {
// ===================================================================

class CreateDimensionRequest::_Internal {
 public:
};

CreateDimensionRequest::CreateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.CreateDimensionRequest)
}
CreateDimensionRequest::CreateDimensionRequest(const CreateDimensionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateDimensionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){from._impl_.map_ids_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.CreateDimensionRequest)
}

inline void CreateDimensionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateDimensionRequest::~CreateDimensionRequest() {
  // @@protoc_insertion_point(destructor:sro.gameserver.CreateDimensionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateDimensionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_map_ids()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.location_.Destroy();
}

void CreateDimensionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateDimensionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.CreateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_map_ids()->Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDimensionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.CreateDimensionRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.CreateDimensionRequest.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string map_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.CreateDimensionRequest.map_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.CreateDimensionRequest.location"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateDimensionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.CreateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.CreateDimensionRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.CreateDimensionRequest.version");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string map_ids = 3;
  for (int i = 0, n = this->_internal_map_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_map_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.CreateDimensionRequest.map_ids");
    target = stream->WriteString(3, s, target);
  }

  // string location = 4;
  if (!this->_internal_location().empty()) {
    const std::string& _s = this->_internal_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.CreateDimensionRequest.location");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.CreateDimensionRequest)
  return target;
}

::size_t CreateDimensionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.CreateDimensionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string map_ids = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_map_ids().size());
  for (int i = 0, n = _internal_map_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_map_ids().Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string location = 4;
  if (!this->_internal_location().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDimensionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateDimensionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDimensionRequest::GetClassData() const { return &_class_data_; }


void CreateDimensionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateDimensionRequest*>(&to_msg);
  auto& from = static_cast<const CreateDimensionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.CreateDimensionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map_ids()->MergeFrom(from._internal_map_ids());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDimensionRequest::CopyFrom(const CreateDimensionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.CreateDimensionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDimensionRequest::IsInitialized() const {
  return true;
}

void CreateDimensionRequest::InternalSwap(CreateDimensionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_map_ids()->InternalSwap(
      other->_internal_mutable_map_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
                                       &other->_impl_.location_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDimensionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fdimension_2eproto_getter, &descriptor_table_sro_2fgameserver_2fdimension_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fdimension_2eproto[0]);
}
// ===================================================================

class DuplicateDimensionRequest::_Internal {
 public:
};

DuplicateDimensionRequest::DuplicateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.DuplicateDimensionRequest)
}
DuplicateDimensionRequest::DuplicateDimensionRequest(const DuplicateDimensionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DuplicateDimensionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_) {}

    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_id().empty()) {
    _this->_impl_.target_id_.Set(from._internal_target_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.DuplicateDimensionRequest)
}

inline void DuplicateDimensionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_) {}

    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DuplicateDimensionRequest::~DuplicateDimensionRequest() {
  // @@protoc_insertion_point(destructor:sro.gameserver.DuplicateDimensionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DuplicateDimensionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_id_.Destroy();
  _impl_.name_.Destroy();
}

void DuplicateDimensionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DuplicateDimensionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.DuplicateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DuplicateDimensionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.DuplicateDimensionRequest.target_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.DuplicateDimensionRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DuplicateDimensionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.DuplicateDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_id = 1;
  if (!this->_internal_target_id().empty()) {
    const std::string& _s = this->_internal_target_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.DuplicateDimensionRequest.target_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.DuplicateDimensionRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.DuplicateDimensionRequest)
  return target;
}

::size_t DuplicateDimensionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.DuplicateDimensionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target_id = 1;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_target_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DuplicateDimensionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DuplicateDimensionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DuplicateDimensionRequest::GetClassData() const { return &_class_data_; }


void DuplicateDimensionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DuplicateDimensionRequest*>(&to_msg);
  auto& from = static_cast<const DuplicateDimensionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.DuplicateDimensionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DuplicateDimensionRequest::CopyFrom(const DuplicateDimensionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.DuplicateDimensionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateDimensionRequest::IsInitialized() const {
  return true;
}

void DuplicateDimensionRequest::InternalSwap(DuplicateDimensionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, lhs_arena,
                                       &other->_impl_.target_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DuplicateDimensionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fdimension_2eproto_getter, &descriptor_table_sro_2fgameserver_2fdimension_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fdimension_2eproto[1]);
}
// ===================================================================

class EditDimensionRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::gameserver::EditDimensionRequest, _impl_._oneof_case_);
};

EditDimensionRequest::EditDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.EditDimensionRequest)
}
EditDimensionRequest::EditDimensionRequest(const EditDimensionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditDimensionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){from._impl_.map_ids_}
    , decltype(_impl_.target_id_) {}

    , decltype(_impl_.edit_maps_) {}

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_version_){}
    , decltype(_impl_.optional_location_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_id().empty()) {
    _this->_impl_.target_id_.Set(from._internal_target_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.edit_maps_ = from._impl_.edit_maps_;
  clear_has_optional_name();
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  clear_has_optional_version();
  switch (from.optional_version_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_location();
  switch (from.optional_location_case()) {
    case kLocation: {
      _this->_internal_set_location(from._internal_location());
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.EditDimensionRequest)
}

inline void EditDimensionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){arena}
    , decltype(_impl_.target_id_) {}

    , decltype(_impl_.edit_maps_) { false }

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_version_){}
    , decltype(_impl_.optional_location_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.target_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.target_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_optional_name();
  clear_has_optional_version();
  clear_has_optional_location();
}

EditDimensionRequest::~EditDimensionRequest() {
  // @@protoc_insertion_point(destructor:sro.gameserver.EditDimensionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditDimensionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_map_ids()->~RepeatedPtrField();
  _impl_.target_id_.Destroy();
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (has_optional_version()) {
    clear_optional_version();
  }
  if (has_optional_location()) {
    clear_optional_location();
  }
}

void EditDimensionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditDimensionRequest::clear_optional_name() {
// @@protoc_insertion_point(one_of_clear_start:sro.gameserver.EditDimensionRequest)
  switch (optional_name_case()) {
    case kName: {
      _impl_.optional_name_.name_.Destroy();
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}

void EditDimensionRequest::clear_optional_version() {
// @@protoc_insertion_point(one_of_clear_start:sro.gameserver.EditDimensionRequest)
  switch (optional_version_case()) {
    case kVersion: {
      _impl_.optional_version_.version_.Destroy();
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_VERSION_NOT_SET;
}

void EditDimensionRequest::clear_optional_location() {
// @@protoc_insertion_point(one_of_clear_start:sro.gameserver.EditDimensionRequest)
  switch (optional_location_case()) {
    case kLocation: {
      _impl_.optional_location_.location_.Destroy();
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_LOCATION_NOT_SET;
}


void EditDimensionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.EditDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_map_ids()->Clear();
  _impl_.target_id_.ClearToEmpty();
  _impl_.edit_maps_ = false;
  clear_optional_name();
  clear_optional_version();
  clear_optional_location();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditDimensionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditDimensionRequest.target_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditDimensionRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditDimensionRequest.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool edit_maps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.edit_maps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string map_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditDimensionRequest.map_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.EditDimensionRequest.location"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EditDimensionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.EditDimensionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target_id = 1;
  if (!this->_internal_target_id().empty()) {
    const std::string& _s = this->_internal_target_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditDimensionRequest.target_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (optional_name_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditDimensionRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string version = 3;
  if (optional_version_case() == kVersion) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditDimensionRequest.version");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool edit_maps = 4;
  if (this->_internal_edit_maps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_edit_maps(), target);
  }

  // repeated string map_ids = 5;
  for (int i = 0, n = this->_internal_map_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_map_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditDimensionRequest.map_ids");
    target = stream->WriteString(5, s, target);
  }

  // string location = 8;
  if (optional_location_case() == kLocation) {
    const std::string& _s = this->_internal_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.EditDimensionRequest.location");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.EditDimensionRequest)
  return target;
}

::size_t EditDimensionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.EditDimensionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string map_ids = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_map_ids().size());
  for (int i = 0, n = _internal_map_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_map_ids().Get(i));
  }

  // string target_id = 1;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_target_id());
  }

  // bool edit_maps = 4;
  if (this->_internal_edit_maps() != 0) {
    total_size += 2;
  }

  switch (optional_name_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (optional_version_case()) {
    // string version = 3;
    case kVersion: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_version());
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  switch (optional_location_case()) {
    // string location = 8;
    case kLocation: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_location());
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditDimensionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditDimensionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditDimensionRequest::GetClassData() const { return &_class_data_; }


void EditDimensionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditDimensionRequest*>(&to_msg);
  auto& from = static_cast<const EditDimensionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.EditDimensionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map_ids()->MergeFrom(from._internal_map_ids());
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_edit_maps() != 0) {
    _this->_internal_set_edit_maps(from._internal_edit_maps());
  }
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.optional_version_case()) {
    case kVersion: {
      _this->_internal_set_version(from._internal_version());
      break;
    }
    case OPTIONAL_VERSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_location_case()) {
    case kLocation: {
      _this->_internal_set_location(from._internal_location());
      break;
    }
    case OPTIONAL_LOCATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditDimensionRequest::CopyFrom(const EditDimensionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.EditDimensionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditDimensionRequest::IsInitialized() const {
  return true;
}

void EditDimensionRequest::InternalSwap(EditDimensionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_map_ids()->InternalSwap(
      other->_internal_mutable_map_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, lhs_arena,
                                       &other->_impl_.target_id_, rhs_arena);

  swap(_impl_.edit_maps_, other->_impl_.edit_maps_);
  swap(_impl_.optional_name_, other->_impl_.optional_name_);
  swap(_impl_.optional_version_, other->_impl_.optional_version_);
  swap(_impl_.optional_location_, other->_impl_.optional_location_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditDimensionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fdimension_2eproto_getter, &descriptor_table_sro_2fgameserver_2fdimension_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fdimension_2eproto[2]);
}
// ===================================================================

class Dimension::_Internal {
 public:
};

Dimension::Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.Dimension)
}
Dimension::Dimension(const Dimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dimension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){from._impl_.map_ids_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.Dimension)
}

inline void Dimension::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.location_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Dimension::~Dimension() {
  // @@protoc_insertion_point(destructor:sro.gameserver.Dimension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dimension::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_map_ids()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.version_.Destroy();
  _impl_.location_.Destroy();
}

void Dimension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.Dimension)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_map_ids()->Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dimension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Dimension.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Dimension.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Dimension.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string map_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Dimension.map_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.Dimension.location"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dimension::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.Dimension)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Dimension.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Dimension.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Dimension.version");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated string map_ids = 4;
  for (int i = 0, n = this->_internal_map_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_map_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Dimension.map_ids");
    target = stream->WriteString(4, s, target);
  }

  // string location = 6;
  if (!this->_internal_location().empty()) {
    const std::string& _s = this->_internal_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.Dimension.location");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.Dimension)
  return target;
}

::size_t Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.Dimension)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string map_ids = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_map_ids().size());
  for (int i = 0, n = _internal_map_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_map_ids().Get(i));
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string location = 6;
  if (!this->_internal_location().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_location());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dimension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dimension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dimension::GetClassData() const { return &_class_data_; }


void Dimension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dimension*>(&to_msg);
  auto& from = static_cast<const Dimension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.Dimension)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map_ids()->MergeFrom(from._internal_map_ids());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dimension::CopyFrom(const Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimension::IsInitialized() const {
  return true;
}

void Dimension::InternalSwap(Dimension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_map_ids()->InternalSwap(
      other->_internal_mutable_map_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
                                       &other->_impl_.location_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fdimension_2eproto_getter, &descriptor_table_sro_2fgameserver_2fdimension_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fdimension_2eproto[3]);
}
// ===================================================================

class Dimensions::_Internal {
 public:
};

Dimensions::Dimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.Dimensions)
}
Dimensions::Dimensions(const Dimensions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dimensions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.Dimensions)
}

inline void Dimensions::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Dimensions::~Dimensions() {
  // @@protoc_insertion_point(destructor:sro.gameserver.Dimensions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dimensions::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_dimensions()->~RepeatedPtrField();
}

void Dimensions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dimensions::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.Dimensions)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_dimensions()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dimensions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.gameserver.Dimension dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Dimensions::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.Dimensions)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.gameserver.Dimension dimensions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dimensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_dimensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.Dimensions)
  return target;
}

::size_t Dimensions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.Dimensions)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.gameserver.Dimension dimensions = 1;
  total_size += 1UL * this->_internal_dimensions_size();
  for (const auto& msg : this->_internal_dimensions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dimensions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dimensions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dimensions::GetClassData() const { return &_class_data_; }


void Dimensions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dimensions*>(&to_msg);
  auto& from = static_cast<const Dimensions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.Dimensions)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dimensions()->MergeFrom(from._internal_dimensions());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dimensions::CopyFrom(const Dimensions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.Dimensions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dimensions::IsInitialized() const {
  return true;
}

void Dimensions::InternalSwap(Dimensions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_dimensions()->InternalSwap(other->_internal_mutable_dimensions());
}

::PROTOBUF_NAMESPACE_ID::Metadata Dimensions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fdimension_2eproto_getter, &descriptor_table_sro_2fgameserver_2fdimension_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fdimension_2eproto[4]);
}
// ===================================================================

class GameServerUpdateResponse::_Internal {
 public:
};

GameServerUpdateResponse::GameServerUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.gameserver.GameServerUpdateResponse)
}
GameServerUpdateResponse::GameServerUpdateResponse(const GameServerUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameServerUpdateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_created_){from._impl_.map_ids_created_}
    , decltype(_impl_.map_ids_deleted_){from._impl_.map_ids_deleted_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.gameserver.GameServerUpdateResponse)
}

inline void GameServerUpdateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.map_ids_created_){arena}
    , decltype(_impl_.map_ids_deleted_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameServerUpdateResponse::~GameServerUpdateResponse() {
  // @@protoc_insertion_point(destructor:sro.gameserver.GameServerUpdateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameServerUpdateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_map_ids_created()->~RepeatedPtrField();
  _internal_mutable_map_ids_deleted()->~RepeatedPtrField();
}

void GameServerUpdateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameServerUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.gameserver.GameServerUpdateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_map_ids_created()->Clear();
  _internal_mutable_map_ids_deleted()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerUpdateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string map_ids_created = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map_ids_created();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.GameServerUpdateResponse.map_ids_created"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string map_ids_deleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_map_ids_deleted();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.gameserver.GameServerUpdateResponse.map_ids_deleted"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GameServerUpdateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.gameserver.GameServerUpdateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string map_ids_created = 1;
  for (int i = 0, n = this->_internal_map_ids_created_size(); i < n; ++i) {
    const auto& s = this->_internal_map_ids_created(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.GameServerUpdateResponse.map_ids_created");
    target = stream->WriteString(1, s, target);
  }

  // repeated string map_ids_deleted = 2;
  for (int i = 0, n = this->_internal_map_ids_deleted_size(); i < n; ++i) {
    const auto& s = this->_internal_map_ids_deleted(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.gameserver.GameServerUpdateResponse.map_ids_deleted");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.gameserver.GameServerUpdateResponse)
  return target;
}

::size_t GameServerUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.gameserver.GameServerUpdateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string map_ids_created = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_map_ids_created().size());
  for (int i = 0, n = _internal_map_ids_created().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_map_ids_created().Get(i));
  }

  // repeated string map_ids_deleted = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_map_ids_deleted().size());
  for (int i = 0, n = _internal_map_ids_deleted().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_map_ids_deleted().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameServerUpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameServerUpdateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameServerUpdateResponse::GetClassData() const { return &_class_data_; }


void GameServerUpdateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameServerUpdateResponse*>(&to_msg);
  auto& from = static_cast<const GameServerUpdateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.gameserver.GameServerUpdateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_map_ids_created()->MergeFrom(from._internal_map_ids_created());
  _this->_internal_mutable_map_ids_deleted()->MergeFrom(from._internal_map_ids_deleted());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameServerUpdateResponse::CopyFrom(const GameServerUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.gameserver.GameServerUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerUpdateResponse::IsInitialized() const {
  return true;
}

void GameServerUpdateResponse::InternalSwap(GameServerUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_map_ids_created()->InternalSwap(
      other->_internal_mutable_map_ids_created());
  _internal_mutable_map_ids_deleted()->InternalSwap(
      other->_internal_mutable_map_ids_deleted());
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerUpdateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fgameserver_2fdimension_2eproto_getter, &descriptor_table_sro_2fgameserver_2fdimension_2eproto_once,
      file_level_metadata_sro_2fgameserver_2fdimension_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace gameserver
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::gameserver::CreateDimensionRequest*
Arena::CreateMaybeMessage< ::sro::gameserver::CreateDimensionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::CreateDimensionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::DuplicateDimensionRequest*
Arena::CreateMaybeMessage< ::sro::gameserver::DuplicateDimensionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::DuplicateDimensionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::EditDimensionRequest*
Arena::CreateMaybeMessage< ::sro::gameserver::EditDimensionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::EditDimensionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::Dimension*
Arena::CreateMaybeMessage< ::sro::gameserver::Dimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::Dimension >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::Dimensions*
Arena::CreateMaybeMessage< ::sro::gameserver::Dimensions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::Dimensions >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::gameserver::GameServerUpdateResponse*
Arena::CreateMaybeMessage< ::sro::gameserver::GameServerUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::gameserver::GameServerUpdateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
