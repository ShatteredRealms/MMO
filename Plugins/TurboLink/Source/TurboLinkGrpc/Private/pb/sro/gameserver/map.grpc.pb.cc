// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/gameserver/map.proto

#include "sro/gameserver/map.pb.h"
#include "sro/gameserver/map.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sro {
namespace gameserver {

static const char* MapService_method_names[] = {
  "/sro.gameserver.MapService/GetMap",
  "/sro.gameserver.MapService/GetMaps",
  "/sro.gameserver.MapService/CreateMap",
  "/sro.gameserver.MapService/EditMap",
  "/sro.gameserver.MapService/DeleteMap",
};

std::unique_ptr< MapService::Stub> MapService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MapService::Stub> stub(new MapService::Stub(channel, options));
  return stub;
}

MapService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetMap_(MapService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMaps_(MapService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateMap_(MapService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditMap_(MapService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMap_(MapService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MapService::Stub::GetMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::Map* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMap_, context, request, response);
}

void MapService::Stub::async::GetMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void MapService::Stub::async::GetMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* MapService::Stub::PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Map, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* MapService::Stub::AsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapService::Stub::GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::gameserver::Maps* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::gameserver::Maps, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMaps_, context, request, response);
}

void MapService::Stub::async::GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::gameserver::Maps, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMaps_, context, request, response, std::move(f));
}

void MapService::Stub::async::GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMaps_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>* MapService::Stub::PrepareAsyncGetMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Maps, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMaps_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>* MapService::Stub::AsyncGetMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMapsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapService::Stub::CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::sro::gameserver::Map* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateMap_, context, request, response);
}

void MapService::Stub::async::CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMap_, context, request, response, std::move(f));
}

void MapService::Stub::async::CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* MapService::Stub::PrepareAsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Map, ::sro::gameserver::CreateMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* MapService::Stub::AsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapService::Stub::EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::sro::gameserver::Map* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditMap_, context, request, response);
}

void MapService::Stub::async::EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditMap_, context, request, response, std::move(f));
}

void MapService::Stub::async::EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* MapService::Stub::PrepareAsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Map, ::sro::gameserver::EditMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* MapService::Stub::AsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MapService::Stub::DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteMap_, context, request, response);
}

void MapService::Stub::async::DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMap_, context, request, response, std::move(f));
}

void MapService::Stub::async::DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MapService::Stub::PrepareAsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* MapService::Stub::AsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

MapService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapService::Service, ::sro::TargetId, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::gameserver::Map* resp) {
               return service->GetMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapService::Service, ::google::protobuf::Empty, ::sro::gameserver::Maps, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::gameserver::Maps* resp) {
               return service->GetMaps(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapService::Service, ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gameserver::CreateMapRequest* req,
             ::sro::gameserver::Map* resp) {
               return service->CreateMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapService::Service, ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gameserver::EditMapRequest* req,
             ::sro::gameserver::Map* resp) {
               return service->EditMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MapService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MapService::Service, ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MapService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteMap(ctx, req, resp);
             }, this)));
}

MapService::Service::~Service() {
}

::grpc::Status MapService::Service::GetMap(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapService::Service::GetMaps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapService::Service::CreateMap(::grpc::ServerContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapService::Service::EditMap(::grpc::ServerContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MapService::Service::DeleteMap(::grpc::ServerContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace gameserver

