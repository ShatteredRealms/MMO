#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gameserver/dimension.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fdimension_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fdimension_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/empty.pb.h"
#include "sro/globals.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sro_2fgameserver_2fdimension_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sro_2fgameserver_2fdimension_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sro_2fgameserver_2fdimension_2eproto;
namespace sro {
namespace gameserver {
class CreateDimensionRequest;
struct CreateDimensionRequestDefaultTypeInternal;
extern CreateDimensionRequestDefaultTypeInternal _CreateDimensionRequest_default_instance_;
class Dimension;
struct DimensionDefaultTypeInternal;
extern DimensionDefaultTypeInternal _Dimension_default_instance_;
class Dimensions;
struct DimensionsDefaultTypeInternal;
extern DimensionsDefaultTypeInternal _Dimensions_default_instance_;
class DuplicateDimensionRequest;
struct DuplicateDimensionRequestDefaultTypeInternal;
extern DuplicateDimensionRequestDefaultTypeInternal _DuplicateDimensionRequest_default_instance_;
class EditDimensionRequest;
struct EditDimensionRequestDefaultTypeInternal;
extern EditDimensionRequestDefaultTypeInternal _EditDimensionRequest_default_instance_;
class GameServerUpdateResponse;
struct GameServerUpdateResponseDefaultTypeInternal;
extern GameServerUpdateResponseDefaultTypeInternal _GameServerUpdateResponse_default_instance_;
}  // namespace gameserver
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template <>
::sro::gameserver::CreateDimensionRequest* Arena::CreateMaybeMessage<::sro::gameserver::CreateDimensionRequest>(Arena*);
template <>
::sro::gameserver::Dimension* Arena::CreateMaybeMessage<::sro::gameserver::Dimension>(Arena*);
template <>
::sro::gameserver::Dimensions* Arena::CreateMaybeMessage<::sro::gameserver::Dimensions>(Arena*);
template <>
::sro::gameserver::DuplicateDimensionRequest* Arena::CreateMaybeMessage<::sro::gameserver::DuplicateDimensionRequest>(Arena*);
template <>
::sro::gameserver::EditDimensionRequest* Arena::CreateMaybeMessage<::sro::gameserver::EditDimensionRequest>(Arena*);
template <>
::sro::gameserver::GameServerUpdateResponse* Arena::CreateMaybeMessage<::sro::gameserver::GameServerUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sro {
namespace gameserver {

// ===================================================================


// -------------------------------------------------------------------

class CreateDimensionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.CreateDimensionRequest) */ {
 public:
  inline CreateDimensionRequest() : CreateDimensionRequest(nullptr) {}
  ~CreateDimensionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateDimensionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDimensionRequest(const CreateDimensionRequest& from);
  CreateDimensionRequest(CreateDimensionRequest&& from) noexcept
    : CreateDimensionRequest() {
    *this = ::std::move(from);
  }

  inline CreateDimensionRequest& operator=(const CreateDimensionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDimensionRequest& operator=(CreateDimensionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDimensionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDimensionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDimensionRequest*>(
               &_CreateDimensionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateDimensionRequest& a, CreateDimensionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDimensionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDimensionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDimensionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDimensionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDimensionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDimensionRequest& from) {
    CreateDimensionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDimensionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.CreateDimensionRequest";
  }
  protected:
  explicit CreateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdsFieldNumber = 3,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kLocationFieldNumber = 4,
  };
  // repeated string map_ids = 3;
  int map_ids_size() const;
  private:
  int _internal_map_ids_size() const;

  public:
  void clear_map_ids() ;
  const std::string& map_ids(int index) const;
  std::string* mutable_map_ids(int index);
  void set_map_ids(int index, const std::string& value);
  void set_map_ids(int index, std::string&& value);
  void set_map_ids(int index, const char* value);
  void set_map_ids(int index, const char* value, std::size_t size);
  void set_map_ids(int index, absl::string_view value);
  std::string* add_map_ids();
  void add_map_ids(const std::string& value);
  void add_map_ids(std::string&& value);
  void add_map_ids(const char* value);
  void add_map_ids(const char* value, std::size_t size);
  void add_map_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_ids();

  private:
  const std::string& _internal_map_ids(int index) const;
  std::string* _internal_add_map_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_map_ids();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 2;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string location = 4;
  void clear_location() ;
  const std::string& location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* ptr);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.CreateDimensionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fdimension_2eproto;
};// -------------------------------------------------------------------

class DuplicateDimensionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.DuplicateDimensionRequest) */ {
 public:
  inline DuplicateDimensionRequest() : DuplicateDimensionRequest(nullptr) {}
  ~DuplicateDimensionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DuplicateDimensionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DuplicateDimensionRequest(const DuplicateDimensionRequest& from);
  DuplicateDimensionRequest(DuplicateDimensionRequest&& from) noexcept
    : DuplicateDimensionRequest() {
    *this = ::std::move(from);
  }

  inline DuplicateDimensionRequest& operator=(const DuplicateDimensionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DuplicateDimensionRequest& operator=(DuplicateDimensionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DuplicateDimensionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DuplicateDimensionRequest* internal_default_instance() {
    return reinterpret_cast<const DuplicateDimensionRequest*>(
               &_DuplicateDimensionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DuplicateDimensionRequest& a, DuplicateDimensionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DuplicateDimensionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DuplicateDimensionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DuplicateDimensionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DuplicateDimensionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DuplicateDimensionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DuplicateDimensionRequest& from) {
    DuplicateDimensionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DuplicateDimensionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.DuplicateDimensionRequest";
  }
  protected:
  explicit DuplicateDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string target_id = 1;
  void clear_target_id() ;
  const std::string& target_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* ptr);

  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(
      const std::string& value);
  std::string* _internal_mutable_target_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.DuplicateDimensionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fdimension_2eproto;
};// -------------------------------------------------------------------

class EditDimensionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.EditDimensionRequest) */ {
 public:
  inline EditDimensionRequest() : EditDimensionRequest(nullptr) {}
  ~EditDimensionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditDimensionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditDimensionRequest(const EditDimensionRequest& from);
  EditDimensionRequest(EditDimensionRequest&& from) noexcept
    : EditDimensionRequest() {
    *this = ::std::move(from);
  }

  inline EditDimensionRequest& operator=(const EditDimensionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditDimensionRequest& operator=(EditDimensionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditDimensionRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalNameCase {
    kName = 2,
    OPTIONAL_NAME_NOT_SET = 0,
  };

  enum OptionalVersionCase {
    kVersion = 3,
    OPTIONAL_VERSION_NOT_SET = 0,
  };

  enum OptionalLocationCase {
    kLocation = 8,
    OPTIONAL_LOCATION_NOT_SET = 0,
  };

  static inline const EditDimensionRequest* internal_default_instance() {
    return reinterpret_cast<const EditDimensionRequest*>(
               &_EditDimensionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EditDimensionRequest& a, EditDimensionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditDimensionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditDimensionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditDimensionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditDimensionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditDimensionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditDimensionRequest& from) {
    EditDimensionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditDimensionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.EditDimensionRequest";
  }
  protected:
  explicit EditDimensionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdsFieldNumber = 5,
    kTargetIdFieldNumber = 1,
    kEditMapsFieldNumber = 4,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kLocationFieldNumber = 8,
  };
  // repeated string map_ids = 5;
  int map_ids_size() const;
  private:
  int _internal_map_ids_size() const;

  public:
  void clear_map_ids() ;
  const std::string& map_ids(int index) const;
  std::string* mutable_map_ids(int index);
  void set_map_ids(int index, const std::string& value);
  void set_map_ids(int index, std::string&& value);
  void set_map_ids(int index, const char* value);
  void set_map_ids(int index, const char* value, std::size_t size);
  void set_map_ids(int index, absl::string_view value);
  std::string* add_map_ids();
  void add_map_ids(const std::string& value);
  void add_map_ids(std::string&& value);
  void add_map_ids(const char* value);
  void add_map_ids(const char* value, std::size_t size);
  void add_map_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_ids();

  private:
  const std::string& _internal_map_ids(int index) const;
  std::string* _internal_add_map_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_map_ids();

  public:
  // string target_id = 1;
  void clear_target_id() ;
  const std::string& target_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* ptr);

  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(
      const std::string& value);
  std::string* _internal_mutable_target_id();

  public:
  // bool edit_maps = 4;
  void clear_edit_maps() ;
  bool edit_maps() const;
  void set_edit_maps(bool value);

  private:
  bool _internal_edit_maps() const;
  void _internal_set_edit_maps(bool value);

  public:
  // string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 3;
  bool has_version() const;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string location = 8;
  bool has_location() const;
  void clear_location() ;
  const std::string& location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* ptr);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  void clear_optional_name();
  OptionalNameCase optional_name_case() const;
  void clear_optional_version();
  OptionalVersionCase optional_version_case() const;
  void clear_optional_location();
  OptionalLocationCase optional_location_case() const;
  // @@protoc_insertion_point(class_scope:sro.gameserver.EditDimensionRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_version();
  void set_has_location();

  inline bool has_optional_name() const;
  inline void clear_has_optional_name();

  inline bool has_optional_version() const;
  inline void clear_has_optional_version();

  inline bool has_optional_location() const;
  inline void clear_has_optional_location();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
    bool edit_maps_;
    union OptionalNameUnion {
      constexpr OptionalNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } optional_name_;
    union OptionalVersionUnion {
      constexpr OptionalVersionUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    } optional_version_;
    union OptionalLocationUnion {
      constexpr OptionalLocationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    } optional_location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[3];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fdimension_2eproto;
};// -------------------------------------------------------------------

class Dimension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.Dimension) */ {
 public:
  inline Dimension() : Dimension(nullptr) {}
  ~Dimension() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Dimension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimension(const Dimension& from);
  Dimension(Dimension&& from) noexcept
    : Dimension() {
    *this = ::std::move(from);
  }

  inline Dimension& operator=(const Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension& operator=(Dimension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dimension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimension* internal_default_instance() {
    return reinterpret_cast<const Dimension*>(
               &_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Dimension& a, Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dimension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dimension& from) {
    Dimension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.Dimension";
  }
  protected:
  explicit Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdsFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kLocationFieldNumber = 6,
  };
  // repeated string map_ids = 4;
  int map_ids_size() const;
  private:
  int _internal_map_ids_size() const;

  public:
  void clear_map_ids() ;
  const std::string& map_ids(int index) const;
  std::string* mutable_map_ids(int index);
  void set_map_ids(int index, const std::string& value);
  void set_map_ids(int index, std::string&& value);
  void set_map_ids(int index, const char* value);
  void set_map_ids(int index, const char* value, std::size_t size);
  void set_map_ids(int index, absl::string_view value);
  std::string* add_map_ids();
  void add_map_ids(const std::string& value);
  void add_map_ids(std::string&& value);
  void add_map_ids(const char* value);
  void add_map_ids(const char* value, std::size_t size);
  void add_map_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_ids();

  private:
  const std::string& _internal_map_ids(int index) const;
  std::string* _internal_add_map_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_map_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_map_ids();

  public:
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 3;
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // string location = 6;
  void clear_location() ;
  const std::string& location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* ptr);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.Dimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fdimension_2eproto;
};// -------------------------------------------------------------------

class Dimensions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.Dimensions) */ {
 public:
  inline Dimensions() : Dimensions(nullptr) {}
  ~Dimensions() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Dimensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimensions(const Dimensions& from);
  Dimensions(Dimensions&& from) noexcept
    : Dimensions() {
    *this = ::std::move(from);
  }

  inline Dimensions& operator=(const Dimensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimensions& operator=(Dimensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dimensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimensions* internal_default_instance() {
    return reinterpret_cast<const Dimensions*>(
               &_Dimensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Dimensions& a, Dimensions& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimensions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dimensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dimensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dimensions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dimensions& from) {
    Dimensions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimensions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.Dimensions";
  }
  protected:
  explicit Dimensions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionsFieldNumber = 1,
  };
  // repeated .sro.gameserver.Dimension dimensions = 1;
  int dimensions_size() const;
  private:
  int _internal_dimensions_size() const;

  public:
  void clear_dimensions() ;
  ::sro::gameserver::Dimension* mutable_dimensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Dimension >*
      mutable_dimensions();
  private:
  const ::sro::gameserver::Dimension& _internal_dimensions(int index) const;
  ::sro::gameserver::Dimension* _internal_add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Dimension>& _internal_dimensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Dimension>* _internal_mutable_dimensions();
  public:
  const ::sro::gameserver::Dimension& dimensions(int index) const;
  ::sro::gameserver::Dimension* add_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Dimension >&
      dimensions() const;
  // @@protoc_insertion_point(class_scope:sro.gameserver.Dimensions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Dimension > dimensions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fdimension_2eproto;
};// -------------------------------------------------------------------

class GameServerUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.GameServerUpdateResponse) */ {
 public:
  inline GameServerUpdateResponse() : GameServerUpdateResponse(nullptr) {}
  ~GameServerUpdateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GameServerUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerUpdateResponse(const GameServerUpdateResponse& from);
  GameServerUpdateResponse(GameServerUpdateResponse&& from) noexcept
    : GameServerUpdateResponse() {
    *this = ::std::move(from);
  }

  inline GameServerUpdateResponse& operator=(const GameServerUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerUpdateResponse& operator=(GameServerUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const GameServerUpdateResponse*>(
               &_GameServerUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameServerUpdateResponse& a, GameServerUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerUpdateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameServerUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameServerUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameServerUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameServerUpdateResponse& from) {
    GameServerUpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.GameServerUpdateResponse";
  }
  protected:
  explicit GameServerUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapIdsCreatedFieldNumber = 1,
    kMapIdsDeletedFieldNumber = 2,
  };
  // repeated string map_ids_created = 1;
  int map_ids_created_size() const;
  private:
  int _internal_map_ids_created_size() const;

  public:
  void clear_map_ids_created() ;
  const std::string& map_ids_created(int index) const;
  std::string* mutable_map_ids_created(int index);
  void set_map_ids_created(int index, const std::string& value);
  void set_map_ids_created(int index, std::string&& value);
  void set_map_ids_created(int index, const char* value);
  void set_map_ids_created(int index, const char* value, std::size_t size);
  void set_map_ids_created(int index, absl::string_view value);
  std::string* add_map_ids_created();
  void add_map_ids_created(const std::string& value);
  void add_map_ids_created(std::string&& value);
  void add_map_ids_created(const char* value);
  void add_map_ids_created(const char* value, std::size_t size);
  void add_map_ids_created(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_ids_created() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_ids_created();

  private:
  const std::string& _internal_map_ids_created(int index) const;
  std::string* _internal_add_map_ids_created();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_map_ids_created() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_map_ids_created();

  public:
  // repeated string map_ids_deleted = 2;
  int map_ids_deleted_size() const;
  private:
  int _internal_map_ids_deleted_size() const;

  public:
  void clear_map_ids_deleted() ;
  const std::string& map_ids_deleted(int index) const;
  std::string* mutable_map_ids_deleted(int index);
  void set_map_ids_deleted(int index, const std::string& value);
  void set_map_ids_deleted(int index, std::string&& value);
  void set_map_ids_deleted(int index, const char* value);
  void set_map_ids_deleted(int index, const char* value, std::size_t size);
  void set_map_ids_deleted(int index, absl::string_view value);
  std::string* add_map_ids_deleted();
  void add_map_ids_deleted(const std::string& value);
  void add_map_ids_deleted(std::string&& value);
  void add_map_ids_deleted(const char* value);
  void add_map_ids_deleted(const char* value, std::size_t size);
  void add_map_ids_deleted(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& map_ids_deleted() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_map_ids_deleted();

  private:
  const std::string& _internal_map_ids_deleted(int index) const;
  std::string* _internal_add_map_ids_deleted();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_map_ids_deleted() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_map_ids_deleted();

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.GameServerUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_ids_created_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> map_ids_deleted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fdimension_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateDimensionRequest

// string name = 1;
inline void CreateDimensionRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateDimensionRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.CreateDimensionRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDimensionRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.CreateDimensionRequest.name)
}
inline std::string* CreateDimensionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.CreateDimensionRequest.name)
  return _s;
}
inline const std::string& CreateDimensionRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateDimensionRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.CreateDimensionRequest.name)
  return _impl_.name_.Release();
}
inline void CreateDimensionRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.CreateDimensionRequest.name)
}

// string version = 2;
inline void CreateDimensionRequest::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& CreateDimensionRequest::version() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.CreateDimensionRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDimensionRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.CreateDimensionRequest.version)
}
inline std::string* CreateDimensionRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.CreateDimensionRequest.version)
  return _s;
}
inline const std::string& CreateDimensionRequest::_internal_version() const {
  return _impl_.version_.Get();
}
inline void CreateDimensionRequest::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::release_version() {
  // @@protoc_insertion_point(field_release:sro.gameserver.CreateDimensionRequest.version)
  return _impl_.version_.Release();
}
inline void CreateDimensionRequest::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.CreateDimensionRequest.version)
}

// repeated string map_ids = 3;
inline int CreateDimensionRequest::_internal_map_ids_size() const {
  return _impl_.map_ids_.size();
}
inline int CreateDimensionRequest::map_ids_size() const {
  return _internal_map_ids_size();
}
inline void CreateDimensionRequest::clear_map_ids() {
  _internal_mutable_map_ids()->Clear();
}
inline std::string* CreateDimensionRequest::add_map_ids() {
  std::string* _s = _internal_add_map_ids();
  // @@protoc_insertion_point(field_add_mutable:sro.gameserver.CreateDimensionRequest.map_ids)
  return _s;
}
inline const std::string& CreateDimensionRequest::map_ids(int index) const {
  // @@protoc_insertion_point(field_get:sro.gameserver.CreateDimensionRequest.map_ids)
  return _internal_map_ids(index);
}
inline std::string* CreateDimensionRequest::mutable_map_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gameserver.CreateDimensionRequest.map_ids)
  return _internal_mutable_map_ids()->Mutable(index);
}
inline void CreateDimensionRequest::set_map_ids(int index, const std::string& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, std::string&& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_map_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::set_map_ids(int index, absl::string_view value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(const std::string& value) {
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(std::string&& value) {
  _internal_mutable_map_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(const char* value, std::size_t size) {
  _internal_mutable_map_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline void CreateDimensionRequest::add_map_ids(absl::string_view value) {
  _internal_mutable_map_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sro.gameserver.CreateDimensionRequest.map_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDimensionRequest::map_ids() const {
  // @@protoc_insertion_point(field_list:sro.gameserver.CreateDimensionRequest.map_ids)
  return _internal_map_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* CreateDimensionRequest::mutable_map_ids() {
  // @@protoc_insertion_point(field_mutable_list:sro.gameserver.CreateDimensionRequest.map_ids)
  return _internal_mutable_map_ids();
}
inline const std::string& CreateDimensionRequest::_internal_map_ids(int index) const {
  return _internal_map_ids().Get(index);
}
inline std::string* CreateDimensionRequest::_internal_add_map_ids() {
  return _internal_mutable_map_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateDimensionRequest::_internal_map_ids() const {
  return _impl_.map_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateDimensionRequest::_internal_mutable_map_ids() {
  return &_impl_.map_ids_;
}

// string location = 4;
inline void CreateDimensionRequest::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& CreateDimensionRequest::location() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.CreateDimensionRequest.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateDimensionRequest::set_location(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.CreateDimensionRequest.location)
}
inline std::string* CreateDimensionRequest::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.CreateDimensionRequest.location)
  return _s;
}
inline const std::string& CreateDimensionRequest::_internal_location() const {
  return _impl_.location_.Get();
}
inline void CreateDimensionRequest::_internal_set_location(const std::string& value) {
  ;


  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::_internal_mutable_location() {
  ;
  return _impl_.location_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateDimensionRequest::release_location() {
  // @@protoc_insertion_point(field_release:sro.gameserver.CreateDimensionRequest.location)
  return _impl_.location_.Release();
}
inline void CreateDimensionRequest::set_allocated_location(std::string* value) {
  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.CreateDimensionRequest.location)
}

// -------------------------------------------------------------------

// DuplicateDimensionRequest

// string target_id = 1;
inline void DuplicateDimensionRequest::clear_target_id() {
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& DuplicateDimensionRequest::target_id() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.DuplicateDimensionRequest.target_id)
  return _internal_target_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DuplicateDimensionRequest::set_target_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.target_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.DuplicateDimensionRequest.target_id)
}
inline std::string* DuplicateDimensionRequest::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.DuplicateDimensionRequest.target_id)
  return _s;
}
inline const std::string& DuplicateDimensionRequest::_internal_target_id() const {
  return _impl_.target_id_.Get();
}
inline void DuplicateDimensionRequest::_internal_set_target_id(const std::string& value) {
  ;


  _impl_.target_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DuplicateDimensionRequest::_internal_mutable_target_id() {
  ;
  return _impl_.target_id_.Mutable( GetArenaForAllocation());
}
inline std::string* DuplicateDimensionRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:sro.gameserver.DuplicateDimensionRequest.target_id)
  return _impl_.target_id_.Release();
}
inline void DuplicateDimensionRequest::set_allocated_target_id(std::string* value) {
  _impl_.target_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_id_.IsDefault()) {
          _impl_.target_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.DuplicateDimensionRequest.target_id)
}

// string name = 2;
inline void DuplicateDimensionRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DuplicateDimensionRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.DuplicateDimensionRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DuplicateDimensionRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.DuplicateDimensionRequest.name)
}
inline std::string* DuplicateDimensionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.DuplicateDimensionRequest.name)
  return _s;
}
inline const std::string& DuplicateDimensionRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DuplicateDimensionRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DuplicateDimensionRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* DuplicateDimensionRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.DuplicateDimensionRequest.name)
  return _impl_.name_.Release();
}
inline void DuplicateDimensionRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.DuplicateDimensionRequest.name)
}

// -------------------------------------------------------------------

// EditDimensionRequest

// string target_id = 1;
inline void EditDimensionRequest::clear_target_id() {
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& EditDimensionRequest::target_id() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditDimensionRequest.target_id)
  return _internal_target_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditDimensionRequest::set_target_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.target_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.EditDimensionRequest.target_id)
}
inline std::string* EditDimensionRequest::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditDimensionRequest.target_id)
  return _s;
}
inline const std::string& EditDimensionRequest::_internal_target_id() const {
  return _impl_.target_id_.Get();
}
inline void EditDimensionRequest::_internal_set_target_id(const std::string& value) {
  ;


  _impl_.target_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::_internal_mutable_target_id() {
  ;
  return _impl_.target_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:sro.gameserver.EditDimensionRequest.target_id)
  return _impl_.target_id_.Release();
}
inline void EditDimensionRequest::set_allocated_target_id(std::string* value) {
  _impl_.target_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_id_.IsDefault()) {
          _impl_.target_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.EditDimensionRequest.target_id)
}

// string name = 2;
inline bool EditDimensionRequest::has_name() const {
  return optional_name_case() == kName;
}
inline void EditDimensionRequest::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void EditDimensionRequest::clear_name() {
  if (optional_name_case() == kName) {
    _impl_.optional_name_.name_.Destroy();
    clear_has_optional_name();
  }
}
inline const std::string& EditDimensionRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditDimensionRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditDimensionRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  _impl_.optional_name_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.EditDimensionRequest.name)
}
inline std::string* EditDimensionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditDimensionRequest.name)
  return _s;
}
inline const std::string& EditDimensionRequest::_internal_name() const {
  if (optional_name_case() != kName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_name_.name_.Get();
}
inline void EditDimensionRequest::_internal_set_name(const std::string& value) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }


  _impl_.optional_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::_internal_mutable_name() {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  return _impl_.optional_name_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.EditDimensionRequest.name)
  if (optional_name_case() != kName) {
    return nullptr;
  }
  clear_has_optional_name();
  return _impl_.optional_name_.name_.Release();
}
inline void EditDimensionRequest::set_allocated_name(std::string* value) {
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.optional_name_.name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.EditDimensionRequest.name)
}

// string version = 3;
inline bool EditDimensionRequest::has_version() const {
  return optional_version_case() == kVersion;
}
inline void EditDimensionRequest::set_has_version() {
  _impl_._oneof_case_[1] = kVersion;
}
inline void EditDimensionRequest::clear_version() {
  if (optional_version_case() == kVersion) {
    _impl_.optional_version_.version_.Destroy();
    clear_has_optional_version();
  }
}
inline const std::string& EditDimensionRequest::version() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditDimensionRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditDimensionRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  if (optional_version_case() != kVersion) {
    clear_optional_version();

    set_has_version();
    _impl_.optional_version_.version_.InitDefault();
  }
  _impl_.optional_version_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.EditDimensionRequest.version)
}
inline std::string* EditDimensionRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditDimensionRequest.version)
  return _s;
}
inline const std::string& EditDimensionRequest::_internal_version() const {
  if (optional_version_case() != kVersion) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_version_.version_.Get();
}
inline void EditDimensionRequest::_internal_set_version(const std::string& value) {
  if (optional_version_case() != kVersion) {
    clear_optional_version();

    set_has_version();
    _impl_.optional_version_.version_.InitDefault();
  }


  _impl_.optional_version_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::_internal_mutable_version() {
  if (optional_version_case() != kVersion) {
    clear_optional_version();

    set_has_version();
    _impl_.optional_version_.version_.InitDefault();
  }
  return _impl_.optional_version_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::release_version() {
  // @@protoc_insertion_point(field_release:sro.gameserver.EditDimensionRequest.version)
  if (optional_version_case() != kVersion) {
    return nullptr;
  }
  clear_has_optional_version();
  return _impl_.optional_version_.version_.Release();
}
inline void EditDimensionRequest::set_allocated_version(std::string* value) {
  if (has_optional_version()) {
    clear_optional_version();
  }
  if (value != nullptr) {
    set_has_version();
    _impl_.optional_version_.version_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.EditDimensionRequest.version)
}

// bool edit_maps = 4;
inline void EditDimensionRequest::clear_edit_maps() {
  _impl_.edit_maps_ = false;
}
inline bool EditDimensionRequest::edit_maps() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditDimensionRequest.edit_maps)
  return _internal_edit_maps();
}
inline void EditDimensionRequest::set_edit_maps(bool value) {
  _internal_set_edit_maps(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.EditDimensionRequest.edit_maps)
}
inline bool EditDimensionRequest::_internal_edit_maps() const {
  return _impl_.edit_maps_;
}
inline void EditDimensionRequest::_internal_set_edit_maps(bool value) {
  ;
  _impl_.edit_maps_ = value;
}

// repeated string map_ids = 5;
inline int EditDimensionRequest::_internal_map_ids_size() const {
  return _impl_.map_ids_.size();
}
inline int EditDimensionRequest::map_ids_size() const {
  return _internal_map_ids_size();
}
inline void EditDimensionRequest::clear_map_ids() {
  _internal_mutable_map_ids()->Clear();
}
inline std::string* EditDimensionRequest::add_map_ids() {
  std::string* _s = _internal_add_map_ids();
  // @@protoc_insertion_point(field_add_mutable:sro.gameserver.EditDimensionRequest.map_ids)
  return _s;
}
inline const std::string& EditDimensionRequest::map_ids(int index) const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditDimensionRequest.map_ids)
  return _internal_map_ids(index);
}
inline std::string* EditDimensionRequest::mutable_map_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditDimensionRequest.map_ids)
  return _internal_mutable_map_ids()->Mutable(index);
}
inline void EditDimensionRequest::set_map_ids(int index, const std::string& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, std::string&& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_map_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::set_map_ids(int index, absl::string_view value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(const std::string& value) {
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(std::string&& value) {
  _internal_mutable_map_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(const char* value, std::size_t size) {
  _internal_mutable_map_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sro.gameserver.EditDimensionRequest.map_ids)
}
inline void EditDimensionRequest::add_map_ids(absl::string_view value) {
  _internal_mutable_map_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sro.gameserver.EditDimensionRequest.map_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EditDimensionRequest::map_ids() const {
  // @@protoc_insertion_point(field_list:sro.gameserver.EditDimensionRequest.map_ids)
  return _internal_map_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* EditDimensionRequest::mutable_map_ids() {
  // @@protoc_insertion_point(field_mutable_list:sro.gameserver.EditDimensionRequest.map_ids)
  return _internal_mutable_map_ids();
}
inline const std::string& EditDimensionRequest::_internal_map_ids(int index) const {
  return _internal_map_ids().Get(index);
}
inline std::string* EditDimensionRequest::_internal_add_map_ids() {
  return _internal_mutable_map_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EditDimensionRequest::_internal_map_ids() const {
  return _impl_.map_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EditDimensionRequest::_internal_mutable_map_ids() {
  return &_impl_.map_ids_;
}

// string location = 8;
inline bool EditDimensionRequest::has_location() const {
  return optional_location_case() == kLocation;
}
inline void EditDimensionRequest::set_has_location() {
  _impl_._oneof_case_[2] = kLocation;
}
inline void EditDimensionRequest::clear_location() {
  if (optional_location_case() == kLocation) {
    _impl_.optional_location_.location_.Destroy();
    clear_has_optional_location();
  }
}
inline const std::string& EditDimensionRequest::location() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditDimensionRequest.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditDimensionRequest::set_location(Arg_&& arg,
                                                     Args_... args) {
  if (optional_location_case() != kLocation) {
    clear_optional_location();

    set_has_location();
    _impl_.optional_location_.location_.InitDefault();
  }
  _impl_.optional_location_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.EditDimensionRequest.location)
}
inline std::string* EditDimensionRequest::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditDimensionRequest.location)
  return _s;
}
inline const std::string& EditDimensionRequest::_internal_location() const {
  if (optional_location_case() != kLocation) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_location_.location_.Get();
}
inline void EditDimensionRequest::_internal_set_location(const std::string& value) {
  if (optional_location_case() != kLocation) {
    clear_optional_location();

    set_has_location();
    _impl_.optional_location_.location_.InitDefault();
  }


  _impl_.optional_location_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::_internal_mutable_location() {
  if (optional_location_case() != kLocation) {
    clear_optional_location();

    set_has_location();
    _impl_.optional_location_.location_.InitDefault();
  }
  return _impl_.optional_location_.location_.Mutable( GetArenaForAllocation());
}
inline std::string* EditDimensionRequest::release_location() {
  // @@protoc_insertion_point(field_release:sro.gameserver.EditDimensionRequest.location)
  if (optional_location_case() != kLocation) {
    return nullptr;
  }
  clear_has_optional_location();
  return _impl_.optional_location_.location_.Release();
}
inline void EditDimensionRequest::set_allocated_location(std::string* value) {
  if (has_optional_location()) {
    clear_optional_location();
  }
  if (value != nullptr) {
    set_has_location();
    _impl_.optional_location_.location_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.EditDimensionRequest.location)
}

inline bool EditDimensionRequest::has_optional_name() const {
  return optional_name_case() != OPTIONAL_NAME_NOT_SET;
}
inline void EditDimensionRequest::clear_has_optional_name() {
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}
inline bool EditDimensionRequest::has_optional_version() const {
  return optional_version_case() != OPTIONAL_VERSION_NOT_SET;
}
inline void EditDimensionRequest::clear_has_optional_version() {
  _impl_._oneof_case_[1] = OPTIONAL_VERSION_NOT_SET;
}
inline bool EditDimensionRequest::has_optional_location() const {
  return optional_location_case() != OPTIONAL_LOCATION_NOT_SET;
}
inline void EditDimensionRequest::clear_has_optional_location() {
  _impl_._oneof_case_[2] = OPTIONAL_LOCATION_NOT_SET;
}
inline EditDimensionRequest::OptionalNameCase EditDimensionRequest::optional_name_case() const {
  return EditDimensionRequest::OptionalNameCase(_impl_._oneof_case_[0]);
}
inline EditDimensionRequest::OptionalVersionCase EditDimensionRequest::optional_version_case() const {
  return EditDimensionRequest::OptionalVersionCase(_impl_._oneof_case_[1]);
}
inline EditDimensionRequest::OptionalLocationCase EditDimensionRequest::optional_location_case() const {
  return EditDimensionRequest::OptionalLocationCase(_impl_._oneof_case_[2]);
}
// -------------------------------------------------------------------

// Dimension

// string id = 1;
inline void Dimension::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Dimension::id() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Dimension.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.Dimension.id)
}
inline std::string* Dimension::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Dimension.id)
  return _s;
}
inline const std::string& Dimension::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Dimension::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_id() {
  // @@protoc_insertion_point(field_release:sro.gameserver.Dimension.id)
  return _impl_.id_.Release();
}
inline void Dimension::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.Dimension.id)
}

// string name = 2;
inline void Dimension::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Dimension::name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Dimension.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.Dimension.name)
}
inline std::string* Dimension::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Dimension.name)
  return _s;
}
inline const std::string& Dimension::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Dimension::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.Dimension.name)
  return _impl_.name_.Release();
}
inline void Dimension::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.Dimension.name)
}

// string version = 3;
inline void Dimension::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& Dimension::version() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Dimension.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.Dimension.version)
}
inline std::string* Dimension::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Dimension.version)
  return _s;
}
inline const std::string& Dimension::_internal_version() const {
  return _impl_.version_.Get();
}
inline void Dimension::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_version() {
  // @@protoc_insertion_point(field_release:sro.gameserver.Dimension.version)
  return _impl_.version_.Release();
}
inline void Dimension::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.Dimension.version)
}

// repeated string map_ids = 4;
inline int Dimension::_internal_map_ids_size() const {
  return _impl_.map_ids_.size();
}
inline int Dimension::map_ids_size() const {
  return _internal_map_ids_size();
}
inline void Dimension::clear_map_ids() {
  _internal_mutable_map_ids()->Clear();
}
inline std::string* Dimension::add_map_ids() {
  std::string* _s = _internal_add_map_ids();
  // @@protoc_insertion_point(field_add_mutable:sro.gameserver.Dimension.map_ids)
  return _s;
}
inline const std::string& Dimension::map_ids(int index) const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Dimension.map_ids)
  return _internal_map_ids(index);
}
inline std::string* Dimension::mutable_map_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Dimension.map_ids)
  return _internal_mutable_map_ids()->Mutable(index);
}
inline void Dimension::set_map_ids(int index, const std::string& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::set_map_ids(int index, std::string&& value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::set_map_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::set_map_ids(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_map_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::set_map_ids(int index, absl::string_view value) {
  _internal_mutable_map_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::add_map_ids(const std::string& value) {
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::add_map_ids(std::string&& value) {
  _internal_mutable_map_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::add_map_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::add_map_ids(const char* value, std::size_t size) {
  _internal_mutable_map_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sro.gameserver.Dimension.map_ids)
}
inline void Dimension::add_map_ids(absl::string_view value) {
  _internal_mutable_map_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sro.gameserver.Dimension.map_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Dimension::map_ids() const {
  // @@protoc_insertion_point(field_list:sro.gameserver.Dimension.map_ids)
  return _internal_map_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Dimension::mutable_map_ids() {
  // @@protoc_insertion_point(field_mutable_list:sro.gameserver.Dimension.map_ids)
  return _internal_mutable_map_ids();
}
inline const std::string& Dimension::_internal_map_ids(int index) const {
  return _internal_map_ids().Get(index);
}
inline std::string* Dimension::_internal_add_map_ids() {
  return _internal_mutable_map_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Dimension::_internal_map_ids() const {
  return _impl_.map_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Dimension::_internal_mutable_map_ids() {
  return &_impl_.map_ids_;
}

// string location = 6;
inline void Dimension::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& Dimension::location() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Dimension.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Dimension::set_location(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.Dimension.location)
}
inline std::string* Dimension::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Dimension.location)
  return _s;
}
inline const std::string& Dimension::_internal_location() const {
  return _impl_.location_.Get();
}
inline void Dimension::_internal_set_location(const std::string& value) {
  ;


  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* Dimension::_internal_mutable_location() {
  ;
  return _impl_.location_.Mutable( GetArenaForAllocation());
}
inline std::string* Dimension::release_location() {
  // @@protoc_insertion_point(field_release:sro.gameserver.Dimension.location)
  return _impl_.location_.Release();
}
inline void Dimension::set_allocated_location(std::string* value) {
  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.Dimension.location)
}

// -------------------------------------------------------------------

// Dimensions

// repeated .sro.gameserver.Dimension dimensions = 1;
inline int Dimensions::_internal_dimensions_size() const {
  return _impl_.dimensions_.size();
}
inline int Dimensions::dimensions_size() const {
  return _internal_dimensions_size();
}
inline void Dimensions::clear_dimensions() {
  _internal_mutable_dimensions()->Clear();
}
inline ::sro::gameserver::Dimension* Dimensions::mutable_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Dimensions.dimensions)
  return _internal_mutable_dimensions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Dimension >*
Dimensions::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:sro.gameserver.Dimensions.dimensions)
  return _internal_mutable_dimensions();
}
inline const ::sro::gameserver::Dimension& Dimensions::_internal_dimensions(int index) const {
  return _internal_dimensions().Get(index);
}
inline const ::sro::gameserver::Dimension& Dimensions::dimensions(int index) const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Dimensions.dimensions)
  return _internal_dimensions(index);
}
inline ::sro::gameserver::Dimension* Dimensions::_internal_add_dimensions() {
  return _internal_mutable_dimensions()->Add();
}
inline ::sro::gameserver::Dimension* Dimensions::add_dimensions() {
  ::sro::gameserver::Dimension* _add = _internal_add_dimensions();
  // @@protoc_insertion_point(field_add:sro.gameserver.Dimensions.dimensions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Dimension >&
Dimensions::dimensions() const {
  // @@protoc_insertion_point(field_list:sro.gameserver.Dimensions.dimensions)
  return _internal_dimensions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Dimension>&
Dimensions::_internal_dimensions() const {
  return _impl_.dimensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Dimension>*
Dimensions::_internal_mutable_dimensions() {
  return &_impl_.dimensions_;
}

// -------------------------------------------------------------------

// GameServerUpdateResponse

// repeated string map_ids_created = 1;
inline int GameServerUpdateResponse::_internal_map_ids_created_size() const {
  return _impl_.map_ids_created_.size();
}
inline int GameServerUpdateResponse::map_ids_created_size() const {
  return _internal_map_ids_created_size();
}
inline void GameServerUpdateResponse::clear_map_ids_created() {
  _internal_mutable_map_ids_created()->Clear();
}
inline std::string* GameServerUpdateResponse::add_map_ids_created() {
  std::string* _s = _internal_add_map_ids_created();
  // @@protoc_insertion_point(field_add_mutable:sro.gameserver.GameServerUpdateResponse.map_ids_created)
  return _s;
}
inline const std::string& GameServerUpdateResponse::map_ids_created(int index) const {
  // @@protoc_insertion_point(field_get:sro.gameserver.GameServerUpdateResponse.map_ids_created)
  return _internal_map_ids_created(index);
}
inline std::string* GameServerUpdateResponse::mutable_map_ids_created(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gameserver.GameServerUpdateResponse.map_ids_created)
  return _internal_mutable_map_ids_created()->Mutable(index);
}
inline void GameServerUpdateResponse::set_map_ids_created(int index, const std::string& value) {
  _internal_mutable_map_ids_created()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::set_map_ids_created(int index, std::string&& value) {
  _internal_mutable_map_ids_created()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::set_map_ids_created(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids_created()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::set_map_ids_created(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_map_ids_created()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::set_map_ids_created(int index, absl::string_view value) {
  _internal_mutable_map_ids_created()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::add_map_ids_created(const std::string& value) {
  _internal_mutable_map_ids_created()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::add_map_ids_created(std::string&& value) {
  _internal_mutable_map_ids_created()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::add_map_ids_created(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids_created()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::add_map_ids_created(const char* value, std::size_t size) {
  _internal_mutable_map_ids_created()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline void GameServerUpdateResponse::add_map_ids_created(absl::string_view value) {
  _internal_mutable_map_ids_created()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sro.gameserver.GameServerUpdateResponse.map_ids_created)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameServerUpdateResponse::map_ids_created() const {
  // @@protoc_insertion_point(field_list:sro.gameserver.GameServerUpdateResponse.map_ids_created)
  return _internal_map_ids_created();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GameServerUpdateResponse::mutable_map_ids_created() {
  // @@protoc_insertion_point(field_mutable_list:sro.gameserver.GameServerUpdateResponse.map_ids_created)
  return _internal_mutable_map_ids_created();
}
inline const std::string& GameServerUpdateResponse::_internal_map_ids_created(int index) const {
  return _internal_map_ids_created().Get(index);
}
inline std::string* GameServerUpdateResponse::_internal_add_map_ids_created() {
  return _internal_mutable_map_ids_created()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameServerUpdateResponse::_internal_map_ids_created() const {
  return _impl_.map_ids_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GameServerUpdateResponse::_internal_mutable_map_ids_created() {
  return &_impl_.map_ids_created_;
}

// repeated string map_ids_deleted = 2;
inline int GameServerUpdateResponse::_internal_map_ids_deleted_size() const {
  return _impl_.map_ids_deleted_.size();
}
inline int GameServerUpdateResponse::map_ids_deleted_size() const {
  return _internal_map_ids_deleted_size();
}
inline void GameServerUpdateResponse::clear_map_ids_deleted() {
  _internal_mutable_map_ids_deleted()->Clear();
}
inline std::string* GameServerUpdateResponse::add_map_ids_deleted() {
  std::string* _s = _internal_add_map_ids_deleted();
  // @@protoc_insertion_point(field_add_mutable:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
  return _s;
}
inline const std::string& GameServerUpdateResponse::map_ids_deleted(int index) const {
  // @@protoc_insertion_point(field_get:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
  return _internal_map_ids_deleted(index);
}
inline std::string* GameServerUpdateResponse::mutable_map_ids_deleted(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
  return _internal_mutable_map_ids_deleted()->Mutable(index);
}
inline void GameServerUpdateResponse::set_map_ids_deleted(int index, const std::string& value) {
  _internal_mutable_map_ids_deleted()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::set_map_ids_deleted(int index, std::string&& value) {
  _internal_mutable_map_ids_deleted()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::set_map_ids_deleted(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids_deleted()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::set_map_ids_deleted(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_map_ids_deleted()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::set_map_ids_deleted(int index, absl::string_view value) {
  _internal_mutable_map_ids_deleted()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::add_map_ids_deleted(const std::string& value) {
  _internal_mutable_map_ids_deleted()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::add_map_ids_deleted(std::string&& value) {
  _internal_mutable_map_ids_deleted()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::add_map_ids_deleted(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_map_ids_deleted()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::add_map_ids_deleted(const char* value, std::size_t size) {
  _internal_mutable_map_ids_deleted()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline void GameServerUpdateResponse::add_map_ids_deleted(absl::string_view value) {
  _internal_mutable_map_ids_deleted()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameServerUpdateResponse::map_ids_deleted() const {
  // @@protoc_insertion_point(field_list:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
  return _internal_map_ids_deleted();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* GameServerUpdateResponse::mutable_map_ids_deleted() {
  // @@protoc_insertion_point(field_mutable_list:sro.gameserver.GameServerUpdateResponse.map_ids_deleted)
  return _internal_mutable_map_ids_deleted();
}
inline const std::string& GameServerUpdateResponse::_internal_map_ids_deleted(int index) const {
  return _internal_map_ids_deleted().Get(index);
}
inline std::string* GameServerUpdateResponse::_internal_add_map_ids_deleted() {
  return _internal_mutable_map_ids_deleted()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GameServerUpdateResponse::_internal_map_ids_deleted() const {
  return _impl_.map_ids_deleted_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GameServerUpdateResponse::_internal_mutable_map_ids_deleted() {
  return &_impl_.map_ids_deleted_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gameserver
}  // namespace sro


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fdimension_2eproto_2epb_2eh
