#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gameserver/connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fconnection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fconnection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "sro/globals.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sro_2fgameserver_2fconnection_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sro_2fgameserver_2fconnection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sro_2fgameserver_2fconnection_2eproto;
namespace sro {
namespace gameserver {
class ConnectGameServerResponse;
struct ConnectGameServerResponseDefaultTypeInternal;
extern ConnectGameServerResponseDefaultTypeInternal _ConnectGameServerResponse_default_instance_;
class ConnectionStatus;
struct ConnectionStatusDefaultTypeInternal;
extern ConnectionStatusDefaultTypeInternal _ConnectionStatus_default_instance_;
class TransferPlayerRequest;
struct TransferPlayerRequestDefaultTypeInternal;
extern TransferPlayerRequestDefaultTypeInternal _TransferPlayerRequest_default_instance_;
class VerifyConnectRequest;
struct VerifyConnectRequestDefaultTypeInternal;
extern VerifyConnectRequestDefaultTypeInternal _VerifyConnectRequest_default_instance_;
}  // namespace gameserver
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template <>
::sro::gameserver::ConnectGameServerResponse* Arena::CreateMaybeMessage<::sro::gameserver::ConnectGameServerResponse>(Arena*);
template <>
::sro::gameserver::ConnectionStatus* Arena::CreateMaybeMessage<::sro::gameserver::ConnectionStatus>(Arena*);
template <>
::sro::gameserver::TransferPlayerRequest* Arena::CreateMaybeMessage<::sro::gameserver::TransferPlayerRequest>(Arena*);
template <>
::sro::gameserver::VerifyConnectRequest* Arena::CreateMaybeMessage<::sro::gameserver::VerifyConnectRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sro {
namespace gameserver {

// ===================================================================


// -------------------------------------------------------------------

class ConnectGameServerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.ConnectGameServerResponse) */ {
 public:
  inline ConnectGameServerResponse() : ConnectGameServerResponse(nullptr) {}
  ~ConnectGameServerResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectGameServerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectGameServerResponse(const ConnectGameServerResponse& from);
  ConnectGameServerResponse(ConnectGameServerResponse&& from) noexcept
    : ConnectGameServerResponse() {
    *this = ::std::move(from);
  }

  inline ConnectGameServerResponse& operator=(const ConnectGameServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectGameServerResponse& operator=(ConnectGameServerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectGameServerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectGameServerResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectGameServerResponse*>(
               &_ConnectGameServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectGameServerResponse& a, ConnectGameServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectGameServerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectGameServerResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectGameServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectGameServerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectGameServerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectGameServerResponse& from) {
    ConnectGameServerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectGameServerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.ConnectGameServerResponse";
  }
  protected:
  explicit ConnectGameServerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kConnectionIdFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // string connection_id = 3;
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // uint32 port = 2;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.ConnectGameServerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fconnection_2eproto;
};// -------------------------------------------------------------------

class VerifyConnectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.VerifyConnectRequest) */ {
 public:
  inline VerifyConnectRequest() : VerifyConnectRequest(nullptr) {}
  ~VerifyConnectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VerifyConnectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyConnectRequest(const VerifyConnectRequest& from);
  VerifyConnectRequest(VerifyConnectRequest&& from) noexcept
    : VerifyConnectRequest() {
    *this = ::std::move(from);
  }

  inline VerifyConnectRequest& operator=(const VerifyConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyConnectRequest& operator=(VerifyConnectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyConnectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyConnectRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyConnectRequest*>(
               &_VerifyConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VerifyConnectRequest& a, VerifyConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyConnectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyConnectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyConnectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyConnectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerifyConnectRequest& from) {
    VerifyConnectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyConnectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.VerifyConnectRequest";
  }
  protected:
  explicit VerifyConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kServerNameFieldNumber = 2,
  };
  // string connection_id = 1;
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // string server_name = 2;
  void clear_server_name() ;
  const std::string& server_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_server_name(Arg_&& arg, Args_... args);
  std::string* mutable_server_name();
  PROTOBUF_NODISCARD std::string* release_server_name();
  void set_allocated_server_name(std::string* ptr);

  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(
      const std::string& value);
  std::string* _internal_mutable_server_name();

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.VerifyConnectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fconnection_2eproto;
};// -------------------------------------------------------------------

class ConnectionStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.ConnectionStatus) */ {
 public:
  inline ConnectionStatus() : ConnectionStatus(nullptr) {}
  ~ConnectionStatus() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectionStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionStatus(const ConnectionStatus& from);
  ConnectionStatus(ConnectionStatus&& from) noexcept
    : ConnectionStatus() {
    *this = ::std::move(from);
  }

  inline ConnectionStatus& operator=(const ConnectionStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionStatus& operator=(ConnectionStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionStatus* internal_default_instance() {
    return reinterpret_cast<const ConnectionStatus*>(
               &_ConnectionStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectionStatus& a, ConnectionStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionStatus& from) {
    ConnectionStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.ConnectionStatus";
  }
  protected:
  explicit ConnectionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnlineFieldNumber = 1,
  };
  // bool online = 1;
  void clear_online() ;
  bool online() const;
  void set_online(bool value);

  private:
  bool _internal_online() const;
  void _internal_set_online(bool value);

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.ConnectionStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool online_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fconnection_2eproto;
};// -------------------------------------------------------------------

class TransferPlayerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.TransferPlayerRequest) */ {
 public:
  inline TransferPlayerRequest() : TransferPlayerRequest(nullptr) {}
  ~TransferPlayerRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransferPlayerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferPlayerRequest(const TransferPlayerRequest& from);
  TransferPlayerRequest(TransferPlayerRequest&& from) noexcept
    : TransferPlayerRequest() {
    *this = ::std::move(from);
  }

  inline TransferPlayerRequest& operator=(const TransferPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferPlayerRequest& operator=(TransferPlayerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferPlayerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const TransferPlayerRequest*>(
               &_TransferPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransferPlayerRequest& a, TransferPlayerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferPlayerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferPlayerRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferPlayerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferPlayerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferPlayerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferPlayerRequest& from) {
    TransferPlayerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferPlayerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.TransferPlayerRequest";
  }
  protected:
  explicit TransferPlayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // string character = 1;
  void clear_character() ;
  const std::string& character() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character(Arg_&& arg, Args_... args);
  std::string* mutable_character();
  PROTOBUF_NODISCARD std::string* release_character();
  void set_allocated_character(std::string* ptr);

  private:
  const std::string& _internal_character() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character(
      const std::string& value);
  std::string* _internal_mutable_character();

  public:
  // .sro.Location location = 2;
  bool has_location() const;
  void clear_location() ;
  const ::sro::Location& location() const;
  PROTOBUF_NODISCARD ::sro::Location* release_location();
  ::sro::Location* mutable_location();
  void set_allocated_location(::sro::Location* location);
  private:
  const ::sro::Location& _internal_location() const;
  ::sro::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::sro::Location* location);
  ::sro::Location* unsafe_arena_release_location();
  // @@protoc_insertion_point(class_scope:sro.gameserver.TransferPlayerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_;
    ::sro::Location* location_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fconnection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConnectGameServerResponse

// string address = 1;
inline void ConnectGameServerResponse::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ConnectGameServerResponse::address() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.ConnectGameServerResponse.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectGameServerResponse::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.ConnectGameServerResponse.address)
}
inline std::string* ConnectGameServerResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.ConnectGameServerResponse.address)
  return _s;
}
inline const std::string& ConnectGameServerResponse::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ConnectGameServerResponse::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectGameServerResponse::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* ConnectGameServerResponse::release_address() {
  // @@protoc_insertion_point(field_release:sro.gameserver.ConnectGameServerResponse.address)
  return _impl_.address_.Release();
}
inline void ConnectGameServerResponse::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.ConnectGameServerResponse.address)
}

// uint32 port = 2;
inline void ConnectGameServerResponse::clear_port() {
  _impl_.port_ = 0u;
}
inline ::uint32_t ConnectGameServerResponse::port() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.ConnectGameServerResponse.port)
  return _internal_port();
}
inline void ConnectGameServerResponse::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.ConnectGameServerResponse.port)
}
inline ::uint32_t ConnectGameServerResponse::_internal_port() const {
  return _impl_.port_;
}
inline void ConnectGameServerResponse::_internal_set_port(::uint32_t value) {
  ;
  _impl_.port_ = value;
}

// string connection_id = 3;
inline void ConnectGameServerResponse::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& ConnectGameServerResponse::connection_id() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.ConnectGameServerResponse.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectGameServerResponse::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.ConnectGameServerResponse.connection_id)
}
inline std::string* ConnectGameServerResponse::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.ConnectGameServerResponse.connection_id)
  return _s;
}
inline const std::string& ConnectGameServerResponse::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void ConnectGameServerResponse::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectGameServerResponse::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ConnectGameServerResponse::release_connection_id() {
  // @@protoc_insertion_point(field_release:sro.gameserver.ConnectGameServerResponse.connection_id)
  return _impl_.connection_id_.Release();
}
inline void ConnectGameServerResponse::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.ConnectGameServerResponse.connection_id)
}

// -------------------------------------------------------------------

// VerifyConnectRequest

// string connection_id = 1;
inline void VerifyConnectRequest::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& VerifyConnectRequest::connection_id() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.VerifyConnectRequest.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyConnectRequest::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.VerifyConnectRequest.connection_id)
}
inline std::string* VerifyConnectRequest::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.VerifyConnectRequest.connection_id)
  return _s;
}
inline const std::string& VerifyConnectRequest::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void VerifyConnectRequest::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyConnectRequest::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* VerifyConnectRequest::release_connection_id() {
  // @@protoc_insertion_point(field_release:sro.gameserver.VerifyConnectRequest.connection_id)
  return _impl_.connection_id_.Release();
}
inline void VerifyConnectRequest::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.VerifyConnectRequest.connection_id)
}

// string server_name = 2;
inline void VerifyConnectRequest::clear_server_name() {
  _impl_.server_name_.ClearToEmpty();
}
inline const std::string& VerifyConnectRequest::server_name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.VerifyConnectRequest.server_name)
  return _internal_server_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VerifyConnectRequest::set_server_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.server_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.VerifyConnectRequest.server_name)
}
inline std::string* VerifyConnectRequest::mutable_server_name() {
  std::string* _s = _internal_mutable_server_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.VerifyConnectRequest.server_name)
  return _s;
}
inline const std::string& VerifyConnectRequest::_internal_server_name() const {
  return _impl_.server_name_.Get();
}
inline void VerifyConnectRequest::_internal_set_server_name(const std::string& value) {
  ;


  _impl_.server_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyConnectRequest::_internal_mutable_server_name() {
  ;
  return _impl_.server_name_.Mutable( GetArenaForAllocation());
}
inline std::string* VerifyConnectRequest::release_server_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.VerifyConnectRequest.server_name)
  return _impl_.server_name_.Release();
}
inline void VerifyConnectRequest::set_allocated_server_name(std::string* value) {
  _impl_.server_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.server_name_.IsDefault()) {
          _impl_.server_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.VerifyConnectRequest.server_name)
}

// -------------------------------------------------------------------

// ConnectionStatus

// bool online = 1;
inline void ConnectionStatus::clear_online() {
  _impl_.online_ = false;
}
inline bool ConnectionStatus::online() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.ConnectionStatus.online)
  return _internal_online();
}
inline void ConnectionStatus::set_online(bool value) {
  _internal_set_online(value);
  // @@protoc_insertion_point(field_set:sro.gameserver.ConnectionStatus.online)
}
inline bool ConnectionStatus::_internal_online() const {
  return _impl_.online_;
}
inline void ConnectionStatus::_internal_set_online(bool value) {
  ;
  _impl_.online_ = value;
}

// -------------------------------------------------------------------

// TransferPlayerRequest

// string character = 1;
inline void TransferPlayerRequest::clear_character() {
  _impl_.character_.ClearToEmpty();
}
inline const std::string& TransferPlayerRequest::character() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.TransferPlayerRequest.character)
  return _internal_character();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TransferPlayerRequest::set_character(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.character_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.TransferPlayerRequest.character)
}
inline std::string* TransferPlayerRequest::mutable_character() {
  std::string* _s = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.TransferPlayerRequest.character)
  return _s;
}
inline const std::string& TransferPlayerRequest::_internal_character() const {
  return _impl_.character_.Get();
}
inline void TransferPlayerRequest::_internal_set_character(const std::string& value) {
  ;


  _impl_.character_.Set(value, GetArenaForAllocation());
}
inline std::string* TransferPlayerRequest::_internal_mutable_character() {
  ;
  return _impl_.character_.Mutable( GetArenaForAllocation());
}
inline std::string* TransferPlayerRequest::release_character() {
  // @@protoc_insertion_point(field_release:sro.gameserver.TransferPlayerRequest.character)
  return _impl_.character_.Release();
}
inline void TransferPlayerRequest::set_allocated_character(std::string* value) {
  _impl_.character_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_.IsDefault()) {
          _impl_.character_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.TransferPlayerRequest.character)
}

// .sro.Location location = 2;
inline bool TransferPlayerRequest::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::sro::Location& TransferPlayerRequest::_internal_location() const {
  const ::sro::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::Location&>(
      ::sro::_Location_default_instance_);
}
inline const ::sro::Location& TransferPlayerRequest::location() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.TransferPlayerRequest.location)
  return _internal_location();
}
inline void TransferPlayerRequest::unsafe_arena_set_allocated_location(
    ::sro::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.gameserver.TransferPlayerRequest.location)
}
inline ::sro::Location* TransferPlayerRequest::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::Location* TransferPlayerRequest::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:sro.gameserver.TransferPlayerRequest.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::sro::Location* TransferPlayerRequest::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::Location>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::sro::Location* TransferPlayerRequest::mutable_location() {
  ::sro::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.TransferPlayerRequest.location)
  return _msg;
}
inline void TransferPlayerRequest::set_allocated_location(::sro::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.TransferPlayerRequest.location)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gameserver
}  // namespace sro


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fconnection_2eproto_2epb_2eh
