// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/gameserver/map.proto
#ifndef GRPC_sro_2fgameserver_2fmap_2eproto__INCLUDED
#define GRPC_sro_2fgameserver_2fmap_2eproto__INCLUDED

#include "sro/gameserver/map.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sro {
namespace gameserver {

class MapService final {
 public:
  static constexpr char const* service_full_name() {
    return "sro.gameserver.MapService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::Map* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>> AsyncGetMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::gameserver::Maps* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Maps>> AsyncGetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Maps>>(AsyncGetMapsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Maps>> PrepareAsyncGetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Maps>>(PrepareAsyncGetMapsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::sro::gameserver::Map* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>> AsyncCreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>>(AsyncCreateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>> PrepareAsyncCreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>>(PrepareAsyncCreateMapRaw(context, request, cq));
    }
    virtual ::grpc::Status EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::sro::gameserver::Map* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>> AsyncEditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>>(AsyncEditMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>> PrepareAsyncEditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>>(PrepareAsyncEditMapRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteMapRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Maps>* AsyncGetMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Maps>* PrepareAsyncGetMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>* AsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>* PrepareAsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>* AsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::gameserver::Map>* PrepareAsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::Map* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>> AsyncGetMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    ::grpc::Status GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::gameserver::Maps* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>> AsyncGetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>>(AsyncGetMapsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>> PrepareAsyncGetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>>(PrepareAsyncGetMapsRaw(context, request, cq));
    }
    ::grpc::Status CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::sro::gameserver::Map* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>> AsyncCreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>>(AsyncCreateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>> PrepareAsyncCreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>>(PrepareAsyncCreateMapRaw(context, request, cq));
    }
    ::grpc::Status EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::sro::gameserver::Map* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>> AsyncEditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>>(AsyncEditMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>> PrepareAsyncEditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>>(PrepareAsyncEditMapRaw(context, request, cq));
    }
    ::grpc::Status DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteMap(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteMapRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)>) override;
      void GetMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response, std::function<void(::grpc::Status)>) override;
      void GetMaps(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)>) override;
      void CreateMap(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response, std::function<void(::grpc::Status)>) override;
      void EditMap(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteMap(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>* AsyncGetMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Maps>* PrepareAsyncGetMapsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* AsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* PrepareAsyncCreateMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* AsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::gameserver::Map>* PrepareAsyncEditMapRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteMapRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMap_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMaps_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMap_;
    const ::grpc::internal::RpcMethod rpcmethod_EditMap_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteMap_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetMap(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response);
    virtual ::grpc::Status GetMaps(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response);
    virtual ::grpc::Status CreateMap(::grpc::ServerContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response);
    virtual ::grpc::Status EditMap(::grpc::ServerContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response);
    virtual ::grpc::Status DeleteMap(::grpc::ServerContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMap() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::Map>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMaps() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaps(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::gameserver::Maps* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaps(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::Maps>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateMap() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::CreateMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMap(::grpc::ServerContext* context, ::sro::gameserver::CreateMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::Map>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditMap() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EditMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::EditMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditMap(::grpc::ServerContext* context, ::sro::gameserver::EditMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::gameserver::Map>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteMap() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMap(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMap<WithAsyncMethod_GetMaps<WithAsyncMethod_CreateMap<WithAsyncMethod_EditMap<WithAsyncMethod_DeleteMap<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::Map>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::Map* response) { return this->GetMap(context, request, response); }));}
    void SetMessageAllocatorFor_GetMap(
        ::grpc::MessageAllocator< ::sro::TargetId, ::sro::gameserver::Map>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::gameserver::Map>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::Map* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMaps() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::gameserver::Maps>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Maps* response) { return this->GetMaps(context, request, response); }));}
    void SetMessageAllocatorFor_GetMaps(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::sro::gameserver::Maps>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::gameserver::Maps>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaps(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::gameserver::Maps* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMaps(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::gameserver::Maps* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateMap() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::gameserver::CreateMapRequest* request, ::sro::gameserver::Map* response) { return this->CreateMap(context, request, response); }));}
    void SetMessageAllocatorFor_CreateMap(
        ::grpc::MessageAllocator< ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::CreateMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMap(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::gameserver::CreateMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditMap() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::gameserver::EditMapRequest* request, ::sro::gameserver::Map* response) { return this->EditMap(context, request, response); }));}
    void SetMessageAllocatorFor_EditMap(
        ::grpc::MessageAllocator< ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::EditMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditMap(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::gameserver::EditMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteMap() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response) { return this->DeleteMap(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteMap(
        ::grpc::MessageAllocator< ::sro::TargetId, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMap(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetMap<WithCallbackMethod_GetMaps<WithCallbackMethod_CreateMap<WithCallbackMethod_EditMap<WithCallbackMethod_DeleteMap<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMap() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMaps() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaps(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::gameserver::Maps* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateMap() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::CreateMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditMap() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EditMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::EditMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteMap() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMap() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMaps() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaps(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::gameserver::Maps* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMaps(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateMap() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::CreateMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditMap() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EditMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::EditMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteMap() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMaps() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMaps(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMaps(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::gameserver::Maps* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMaps(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateMap() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::CreateMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditMap() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::EditMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteMap() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMap() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::sro::gameserver::Map>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::sro::gameserver::Map>* streamer) {
                       return this->StreamedGetMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::sro::gameserver::Map>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMaps : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMaps() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::sro::gameserver::Maps>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::sro::gameserver::Maps>* streamer) {
                       return this->StreamedGetMaps(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMaps() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMaps(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::gameserver::Maps* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMaps(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::sro::gameserver::Maps>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateMap() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::gameserver::CreateMapRequest, ::sro::gameserver::Map>* streamer) {
                       return this->StreamedCreateMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::CreateMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::gameserver::CreateMapRequest,::sro::gameserver::Map>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditMap() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::gameserver::EditMapRequest, ::sro::gameserver::Map>* streamer) {
                       return this->StreamedEditMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditMap(::grpc::ServerContext* /*context*/, const ::sro::gameserver::EditMapRequest* /*request*/, ::sro::gameserver::Map* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::gameserver::EditMapRequest,::sro::gameserver::Map>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteMap() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteMap(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMap<WithStreamedUnaryMethod_GetMaps<WithStreamedUnaryMethod_CreateMap<WithStreamedUnaryMethod_EditMap<WithStreamedUnaryMethod_DeleteMap<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMap<WithStreamedUnaryMethod_GetMaps<WithStreamedUnaryMethod_CreateMap<WithStreamedUnaryMethod_EditMap<WithStreamedUnaryMethod_DeleteMap<Service > > > > > StreamedService;
};

}  // namespace gameserver
}  // namespace sro


#endif  // GRPC_sro_2fgameserver_2fmap_2eproto__INCLUDED
