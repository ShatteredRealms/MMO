// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/gameserver/dimension.proto

#include "sro/gameserver/dimension.pb.h"
#include "sro/gameserver/dimension.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sro {
namespace gameserver {

static const char* DimensionService_method_names[] = {
  "/sro.gameserver.DimensionService/GetDimension",
  "/sro.gameserver.DimensionService/GetDimensions",
  "/sro.gameserver.DimensionService/CreateDimension",
  "/sro.gameserver.DimensionService/DuplicateDimension",
  "/sro.gameserver.DimensionService/EditDimension",
  "/sro.gameserver.DimensionService/DeleteDimension",
  "/sro.gameserver.DimensionService/GameServerUpdate",
};

std::unique_ptr< DimensionService::Stub> DimensionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DimensionService::Stub> stub(new DimensionService::Stub(channel, options));
  return stub;
}

DimensionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDimension_(DimensionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDimensions_(DimensionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDimension_(DimensionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DuplicateDimension_(DimensionService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditDimension_(DimensionService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteDimension_(DimensionService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GameServerUpdate_(DimensionService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DimensionService::Stub::GetDimension(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDimension_, context, request, response);
}

void DimensionService::Stub::async::GetDimension(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDimension_, context, request, response, std::move(f));
}

void DimensionService::Stub::async::GetDimension(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::PrepareAsyncGetDimensionRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Dimension, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::AsyncGetDimensionRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DimensionService::Stub::GetDimensions(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::gameserver::Dimensions* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::gameserver::Dimensions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDimensions_, context, request, response);
}

void DimensionService::Stub::async::GetDimensions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Dimensions* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::gameserver::Dimensions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDimensions_, context, request, response, std::move(f));
}

void DimensionService::Stub::async::GetDimensions(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Dimensions* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDimensions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimensions>* DimensionService::Stub::PrepareAsyncGetDimensionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Dimensions, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDimensions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimensions>* DimensionService::Stub::AsyncGetDimensionsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDimensionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DimensionService::Stub::CreateDimension(::grpc::ClientContext* context, const ::sro::gameserver::CreateDimensionRequest& request, ::sro::gameserver::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gameserver::CreateDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateDimension_, context, request, response);
}

void DimensionService::Stub::async::CreateDimension(::grpc::ClientContext* context, const ::sro::gameserver::CreateDimensionRequest* request, ::sro::gameserver::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gameserver::CreateDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDimension_, context, request, response, std::move(f));
}

void DimensionService::Stub::async::CreateDimension(::grpc::ClientContext* context, const ::sro::gameserver::CreateDimensionRequest* request, ::sro::gameserver::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::PrepareAsyncCreateDimensionRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Dimension, ::sro::gameserver::CreateDimensionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::AsyncCreateDimensionRaw(::grpc::ClientContext* context, const ::sro::gameserver::CreateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DimensionService::Stub::DuplicateDimension(::grpc::ClientContext* context, const ::sro::gameserver::DuplicateDimensionRequest& request, ::sro::gameserver::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gameserver::DuplicateDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DuplicateDimension_, context, request, response);
}

void DimensionService::Stub::async::DuplicateDimension(::grpc::ClientContext* context, const ::sro::gameserver::DuplicateDimensionRequest* request, ::sro::gameserver::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gameserver::DuplicateDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DuplicateDimension_, context, request, response, std::move(f));
}

void DimensionService::Stub::async::DuplicateDimension(::grpc::ClientContext* context, const ::sro::gameserver::DuplicateDimensionRequest* request, ::sro::gameserver::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DuplicateDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::PrepareAsyncDuplicateDimensionRaw(::grpc::ClientContext* context, const ::sro::gameserver::DuplicateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Dimension, ::sro::gameserver::DuplicateDimensionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DuplicateDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::AsyncDuplicateDimensionRaw(::grpc::ClientContext* context, const ::sro::gameserver::DuplicateDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDuplicateDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DimensionService::Stub::EditDimension(::grpc::ClientContext* context, const ::sro::gameserver::EditDimensionRequest& request, ::sro::gameserver::Dimension* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::gameserver::EditDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditDimension_, context, request, response);
}

void DimensionService::Stub::async::EditDimension(::grpc::ClientContext* context, const ::sro::gameserver::EditDimensionRequest* request, ::sro::gameserver::Dimension* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::gameserver::EditDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditDimension_, context, request, response, std::move(f));
}

void DimensionService::Stub::async::EditDimension(::grpc::ClientContext* context, const ::sro::gameserver::EditDimensionRequest* request, ::sro::gameserver::Dimension* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::PrepareAsyncEditDimensionRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::Dimension, ::sro::gameserver::EditDimensionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::Dimension>* DimensionService::Stub::AsyncEditDimensionRaw(::grpc::ClientContext* context, const ::sro::gameserver::EditDimensionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DimensionService::Stub::DeleteDimension(::grpc::ClientContext* context, const ::sro::TargetId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteDimension_, context, request, response);
}

void DimensionService::Stub::async::DeleteDimension(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDimension_, context, request, response, std::move(f));
}

void DimensionService::Stub::async::DeleteDimension(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteDimension_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DimensionService::Stub::PrepareAsyncDeleteDimensionRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteDimension_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DimensionService::Stub::AsyncDeleteDimensionRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteDimensionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DimensionService::Stub::GameServerUpdate(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::gameserver::GameServerUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::gameserver::GameServerUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GameServerUpdate_, context, request, response);
}

void DimensionService::Stub::async::GameServerUpdate(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::GameServerUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::gameserver::GameServerUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GameServerUpdate_, context, request, response, std::move(f));
}

void DimensionService::Stub::async::GameServerUpdate(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::gameserver::GameServerUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GameServerUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::GameServerUpdateResponse>* DimensionService::Stub::PrepareAsyncGameServerUpdateRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::gameserver::GameServerUpdateResponse, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GameServerUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::gameserver::GameServerUpdateResponse>* DimensionService::Stub::AsyncGameServerUpdateRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGameServerUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

DimensionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DimensionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DimensionService::Service, ::sro::TargetId, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DimensionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::gameserver::Dimension* resp) {
               return service->GetDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DimensionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DimensionService::Service, ::google::protobuf::Empty, ::sro::gameserver::Dimensions, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DimensionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::gameserver::Dimensions* resp) {
               return service->GetDimensions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DimensionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DimensionService::Service, ::sro::gameserver::CreateDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DimensionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gameserver::CreateDimensionRequest* req,
             ::sro::gameserver::Dimension* resp) {
               return service->CreateDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DimensionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DimensionService::Service, ::sro::gameserver::DuplicateDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DimensionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gameserver::DuplicateDimensionRequest* req,
             ::sro::gameserver::Dimension* resp) {
               return service->DuplicateDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DimensionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DimensionService::Service, ::sro::gameserver::EditDimensionRequest, ::sro::gameserver::Dimension, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DimensionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::gameserver::EditDimensionRequest* req,
             ::sro::gameserver::Dimension* resp) {
               return service->EditDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DimensionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DimensionService::Service, ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DimensionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteDimension(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DimensionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DimensionService::Service, ::sro::TargetId, ::sro::gameserver::GameServerUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DimensionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::gameserver::GameServerUpdateResponse* resp) {
               return service->GameServerUpdate(ctx, req, resp);
             }, this)));
}

DimensionService::Service::~Service() {
}

::grpc::Status DimensionService::Service::GetDimension(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DimensionService::Service::GetDimensions(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::gameserver::Dimensions* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DimensionService::Service::CreateDimension(::grpc::ServerContext* context, const ::sro::gameserver::CreateDimensionRequest* request, ::sro::gameserver::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DimensionService::Service::DuplicateDimension(::grpc::ServerContext* context, const ::sro::gameserver::DuplicateDimensionRequest* request, ::sro::gameserver::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DimensionService::Service::EditDimension(::grpc::ServerContext* context, const ::sro::gameserver::EditDimensionRequest* request, ::sro::gameserver::Dimension* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DimensionService::Service::DeleteDimension(::grpc::ServerContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DimensionService::Service::GameServerUpdate(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::gameserver::GameServerUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace gameserver

