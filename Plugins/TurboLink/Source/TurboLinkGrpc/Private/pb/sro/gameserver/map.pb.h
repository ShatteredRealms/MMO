#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/gameserver/map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fmap_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fmap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/empty.pb.h"
#include "sro/globals.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sro_2fgameserver_2fmap_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sro_2fgameserver_2fmap_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sro_2fgameserver_2fmap_2eproto;
namespace sro {
namespace gameserver {
class CreateMapRequest;
struct CreateMapRequestDefaultTypeInternal;
extern CreateMapRequestDefaultTypeInternal _CreateMapRequest_default_instance_;
class EditMapRequest;
struct EditMapRequestDefaultTypeInternal;
extern EditMapRequestDefaultTypeInternal _EditMapRequest_default_instance_;
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Maps;
struct MapsDefaultTypeInternal;
extern MapsDefaultTypeInternal _Maps_default_instance_;
}  // namespace gameserver
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template <>
::sro::gameserver::CreateMapRequest* Arena::CreateMaybeMessage<::sro::gameserver::CreateMapRequest>(Arena*);
template <>
::sro::gameserver::EditMapRequest* Arena::CreateMaybeMessage<::sro::gameserver::EditMapRequest>(Arena*);
template <>
::sro::gameserver::Map* Arena::CreateMaybeMessage<::sro::gameserver::Map>(Arena*);
template <>
::sro::gameserver::Maps* Arena::CreateMaybeMessage<::sro::gameserver::Maps>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sro {
namespace gameserver {

// ===================================================================


// -------------------------------------------------------------------

class CreateMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.CreateMapRequest) */ {
 public:
  inline CreateMapRequest() : CreateMapRequest(nullptr) {}
  ~CreateMapRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateMapRequest(const CreateMapRequest& from);
  CreateMapRequest(CreateMapRequest&& from) noexcept
    : CreateMapRequest() {
    *this = ::std::move(from);
  }

  inline CreateMapRequest& operator=(const CreateMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMapRequest& operator=(CreateMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateMapRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMapRequest*>(
               &_CreateMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateMapRequest& a, CreateMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMapRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateMapRequest& from) {
    CreateMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.CreateMapRequest";
  }
  protected:
  explicit CreateMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMapPathFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string map_path = 2;
  void clear_map_path() ;
  const std::string& map_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_map_path(Arg_&& arg, Args_... args);
  std::string* mutable_map_path();
  PROTOBUF_NODISCARD std::string* release_map_path();
  void set_allocated_map_path(std::string* ptr);

  private:
  const std::string& _internal_map_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_path(
      const std::string& value);
  std::string* _internal_mutable_map_path();

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.CreateMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fmap_2eproto;
};// -------------------------------------------------------------------

class EditMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.EditMapRequest) */ {
 public:
  inline EditMapRequest() : EditMapRequest(nullptr) {}
  ~EditMapRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditMapRequest(const EditMapRequest& from);
  EditMapRequest(EditMapRequest&& from) noexcept
    : EditMapRequest() {
    *this = ::std::move(from);
  }

  inline EditMapRequest& operator=(const EditMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditMapRequest& operator=(EditMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditMapRequest& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalNameCase {
    kName = 2,
    OPTIONAL_NAME_NOT_SET = 0,
  };

  enum OptionalMapPathCase {
    kMapPath = 3,
    OPTIONAL_MAP_PATH_NOT_SET = 0,
  };

  static inline const EditMapRequest* internal_default_instance() {
    return reinterpret_cast<const EditMapRequest*>(
               &_EditMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EditMapRequest& a, EditMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditMapRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditMapRequest& from) {
    EditMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.EditMapRequest";
  }
  protected:
  explicit EditMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kMapPathFieldNumber = 3,
  };
  // string target_id = 1;
  void clear_target_id() ;
  const std::string& target_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* ptr);

  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(
      const std::string& value);
  std::string* _internal_mutable_target_id();

  public:
  // string name = 2;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string map_path = 3;
  bool has_map_path() const;
  void clear_map_path() ;
  const std::string& map_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_map_path(Arg_&& arg, Args_... args);
  std::string* mutable_map_path();
  PROTOBUF_NODISCARD std::string* release_map_path();
  void set_allocated_map_path(std::string* ptr);

  private:
  const std::string& _internal_map_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_path(
      const std::string& value);
  std::string* _internal_mutable_map_path();

  public:
  void clear_optional_name();
  OptionalNameCase optional_name_case() const;
  void clear_optional_map_path();
  OptionalMapPathCase optional_map_path_case() const;
  // @@protoc_insertion_point(class_scope:sro.gameserver.EditMapRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_map_path();

  inline bool has_optional_name() const;
  inline void clear_has_optional_name();

  inline bool has_optional_map_path() const;
  inline void clear_has_optional_map_path();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
    union OptionalNameUnion {
      constexpr OptionalNameUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    } optional_name_;
    union OptionalMapPathUnion {
      constexpr OptionalMapPathUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_path_;
    } optional_map_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fmap_2eproto;
};// -------------------------------------------------------------------

class Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  ~Map() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Map& from) {
    Map::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kMapPathFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string map_path = 3;
  void clear_map_path() ;
  const std::string& map_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_map_path(Arg_&& arg, Args_... args);
  std::string* mutable_map_path();
  PROTOBUF_NODISCARD std::string* release_map_path();
  void set_allocated_map_path(std::string* ptr);

  private:
  const std::string& _internal_map_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_path(
      const std::string& value);
  std::string* _internal_mutable_map_path();

  public:
  // @@protoc_insertion_point(class_scope:sro.gameserver.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fmap_2eproto;
};// -------------------------------------------------------------------

class Maps final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.gameserver.Maps) */ {
 public:
  inline Maps() : Maps(nullptr) {}
  ~Maps() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Maps(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Maps(const Maps& from);
  Maps(Maps&& from) noexcept
    : Maps() {
    *this = ::std::move(from);
  }

  inline Maps& operator=(const Maps& from) {
    CopyFrom(from);
    return *this;
  }
  inline Maps& operator=(Maps&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Maps& default_instance() {
    return *internal_default_instance();
  }
  static inline const Maps* internal_default_instance() {
    return reinterpret_cast<const Maps*>(
               &_Maps_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Maps& a, Maps& b) {
    a.Swap(&b);
  }
  inline void Swap(Maps* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Maps* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Maps* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Maps>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Maps& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Maps& from) {
    Maps::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Maps* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.gameserver.Maps";
  }
  protected:
  explicit Maps(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapsFieldNumber = 1,
  };
  // repeated .sro.gameserver.Map maps = 1;
  int maps_size() const;
  private:
  int _internal_maps_size() const;

  public:
  void clear_maps() ;
  ::sro::gameserver::Map* mutable_maps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Map >*
      mutable_maps();
  private:
  const ::sro::gameserver::Map& _internal_maps(int index) const;
  ::sro::gameserver::Map* _internal_add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Map>& _internal_maps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Map>* _internal_mutable_maps();
  public:
  const ::sro::gameserver::Map& maps(int index) const;
  ::sro::gameserver::Map* add_maps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Map >&
      maps() const;
  // @@protoc_insertion_point(class_scope:sro.gameserver.Maps)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Map > maps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fgameserver_2fmap_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateMapRequest

// string name = 1;
inline void CreateMapRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateMapRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.CreateMapRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateMapRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.CreateMapRequest.name)
}
inline std::string* CreateMapRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.CreateMapRequest.name)
  return _s;
}
inline const std::string& CreateMapRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateMapRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMapRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateMapRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.CreateMapRequest.name)
  return _impl_.name_.Release();
}
inline void CreateMapRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.CreateMapRequest.name)
}

// string map_path = 2;
inline void CreateMapRequest::clear_map_path() {
  _impl_.map_path_.ClearToEmpty();
}
inline const std::string& CreateMapRequest::map_path() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.CreateMapRequest.map_path)
  return _internal_map_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateMapRequest::set_map_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.map_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.CreateMapRequest.map_path)
}
inline std::string* CreateMapRequest::mutable_map_path() {
  std::string* _s = _internal_mutable_map_path();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.CreateMapRequest.map_path)
  return _s;
}
inline const std::string& CreateMapRequest::_internal_map_path() const {
  return _impl_.map_path_.Get();
}
inline void CreateMapRequest::_internal_set_map_path(const std::string& value) {
  ;


  _impl_.map_path_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateMapRequest::_internal_mutable_map_path() {
  ;
  return _impl_.map_path_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateMapRequest::release_map_path() {
  // @@protoc_insertion_point(field_release:sro.gameserver.CreateMapRequest.map_path)
  return _impl_.map_path_.Release();
}
inline void CreateMapRequest::set_allocated_map_path(std::string* value) {
  _impl_.map_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.map_path_.IsDefault()) {
          _impl_.map_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.CreateMapRequest.map_path)
}

// -------------------------------------------------------------------

// EditMapRequest

// string target_id = 1;
inline void EditMapRequest::clear_target_id() {
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& EditMapRequest::target_id() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditMapRequest.target_id)
  return _internal_target_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMapRequest::set_target_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.target_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.EditMapRequest.target_id)
}
inline std::string* EditMapRequest::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditMapRequest.target_id)
  return _s;
}
inline const std::string& EditMapRequest::_internal_target_id() const {
  return _impl_.target_id_.Get();
}
inline void EditMapRequest::_internal_set_target_id(const std::string& value) {
  ;


  _impl_.target_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMapRequest::_internal_mutable_target_id() {
  ;
  return _impl_.target_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMapRequest::release_target_id() {
  // @@protoc_insertion_point(field_release:sro.gameserver.EditMapRequest.target_id)
  return _impl_.target_id_.Release();
}
inline void EditMapRequest::set_allocated_target_id(std::string* value) {
  _impl_.target_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.target_id_.IsDefault()) {
          _impl_.target_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.EditMapRequest.target_id)
}

// string name = 2;
inline bool EditMapRequest::has_name() const {
  return optional_name_case() == kName;
}
inline void EditMapRequest::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void EditMapRequest::clear_name() {
  if (optional_name_case() == kName) {
    _impl_.optional_name_.name_.Destroy();
    clear_has_optional_name();
  }
}
inline const std::string& EditMapRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditMapRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMapRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  _impl_.optional_name_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.EditMapRequest.name)
}
inline std::string* EditMapRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditMapRequest.name)
  return _s;
}
inline const std::string& EditMapRequest::_internal_name() const {
  if (optional_name_case() != kName) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_name_.name_.Get();
}
inline void EditMapRequest::_internal_set_name(const std::string& value) {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }


  _impl_.optional_name_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMapRequest::_internal_mutable_name() {
  if (optional_name_case() != kName) {
    clear_optional_name();

    set_has_name();
    _impl_.optional_name_.name_.InitDefault();
  }
  return _impl_.optional_name_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMapRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.EditMapRequest.name)
  if (optional_name_case() != kName) {
    return nullptr;
  }
  clear_has_optional_name();
  return _impl_.optional_name_.name_.Release();
}
inline void EditMapRequest::set_allocated_name(std::string* value) {
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.optional_name_.name_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.EditMapRequest.name)
}

// string map_path = 3;
inline bool EditMapRequest::has_map_path() const {
  return optional_map_path_case() == kMapPath;
}
inline void EditMapRequest::set_has_map_path() {
  _impl_._oneof_case_[1] = kMapPath;
}
inline void EditMapRequest::clear_map_path() {
  if (optional_map_path_case() == kMapPath) {
    _impl_.optional_map_path_.map_path_.Destroy();
    clear_has_optional_map_path();
  }
}
inline const std::string& EditMapRequest::map_path() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.EditMapRequest.map_path)
  return _internal_map_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EditMapRequest::set_map_path(Arg_&& arg,
                                                     Args_... args) {
  if (optional_map_path_case() != kMapPath) {
    clear_optional_map_path();

    set_has_map_path();
    _impl_.optional_map_path_.map_path_.InitDefault();
  }
  _impl_.optional_map_path_.map_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.EditMapRequest.map_path)
}
inline std::string* EditMapRequest::mutable_map_path() {
  std::string* _s = _internal_mutable_map_path();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.EditMapRequest.map_path)
  return _s;
}
inline const std::string& EditMapRequest::_internal_map_path() const {
  if (optional_map_path_case() != kMapPath) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.optional_map_path_.map_path_.Get();
}
inline void EditMapRequest::_internal_set_map_path(const std::string& value) {
  if (optional_map_path_case() != kMapPath) {
    clear_optional_map_path();

    set_has_map_path();
    _impl_.optional_map_path_.map_path_.InitDefault();
  }


  _impl_.optional_map_path_.map_path_.Set(value, GetArenaForAllocation());
}
inline std::string* EditMapRequest::_internal_mutable_map_path() {
  if (optional_map_path_case() != kMapPath) {
    clear_optional_map_path();

    set_has_map_path();
    _impl_.optional_map_path_.map_path_.InitDefault();
  }
  return _impl_.optional_map_path_.map_path_.Mutable( GetArenaForAllocation());
}
inline std::string* EditMapRequest::release_map_path() {
  // @@protoc_insertion_point(field_release:sro.gameserver.EditMapRequest.map_path)
  if (optional_map_path_case() != kMapPath) {
    return nullptr;
  }
  clear_has_optional_map_path();
  return _impl_.optional_map_path_.map_path_.Release();
}
inline void EditMapRequest::set_allocated_map_path(std::string* value) {
  if (has_optional_map_path()) {
    clear_optional_map_path();
  }
  if (value != nullptr) {
    set_has_map_path();
    _impl_.optional_map_path_.map_path_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.EditMapRequest.map_path)
}

inline bool EditMapRequest::has_optional_name() const {
  return optional_name_case() != OPTIONAL_NAME_NOT_SET;
}
inline void EditMapRequest::clear_has_optional_name() {
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}
inline bool EditMapRequest::has_optional_map_path() const {
  return optional_map_path_case() != OPTIONAL_MAP_PATH_NOT_SET;
}
inline void EditMapRequest::clear_has_optional_map_path() {
  _impl_._oneof_case_[1] = OPTIONAL_MAP_PATH_NOT_SET;
}
inline EditMapRequest::OptionalNameCase EditMapRequest::optional_name_case() const {
  return EditMapRequest::OptionalNameCase(_impl_._oneof_case_[0]);
}
inline EditMapRequest::OptionalMapPathCase EditMapRequest::optional_map_path_case() const {
  return EditMapRequest::OptionalMapPathCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// Map

// string id = 1;
inline void Map::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Map::id() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Map.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Map::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.Map.id)
}
inline std::string* Map::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Map.id)
  return _s;
}
inline const std::string& Map::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Map::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Map::release_id() {
  // @@protoc_insertion_point(field_release:sro.gameserver.Map.id)
  return _impl_.id_.Release();
}
inline void Map::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.Map.id)
}

// string name = 2;
inline void Map::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Map::name() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Map.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Map::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.Map.name)
}
inline std::string* Map::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Map.name)
  return _s;
}
inline const std::string& Map::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Map::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Map::release_name() {
  // @@protoc_insertion_point(field_release:sro.gameserver.Map.name)
  return _impl_.name_.Release();
}
inline void Map::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.Map.name)
}

// string map_path = 3;
inline void Map::clear_map_path() {
  _impl_.map_path_.ClearToEmpty();
}
inline const std::string& Map::map_path() const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Map.map_path)
  return _internal_map_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Map::set_map_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.map_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.gameserver.Map.map_path)
}
inline std::string* Map::mutable_map_path() {
  std::string* _s = _internal_mutable_map_path();
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Map.map_path)
  return _s;
}
inline const std::string& Map::_internal_map_path() const {
  return _impl_.map_path_.Get();
}
inline void Map::_internal_set_map_path(const std::string& value) {
  ;


  _impl_.map_path_.Set(value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_map_path() {
  ;
  return _impl_.map_path_.Mutable( GetArenaForAllocation());
}
inline std::string* Map::release_map_path() {
  // @@protoc_insertion_point(field_release:sro.gameserver.Map.map_path)
  return _impl_.map_path_.Release();
}
inline void Map::set_allocated_map_path(std::string* value) {
  _impl_.map_path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.map_path_.IsDefault()) {
          _impl_.map_path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.gameserver.Map.map_path)
}

// -------------------------------------------------------------------

// Maps

// repeated .sro.gameserver.Map maps = 1;
inline int Maps::_internal_maps_size() const {
  return _impl_.maps_.size();
}
inline int Maps::maps_size() const {
  return _internal_maps_size();
}
inline void Maps::clear_maps() {
  _internal_mutable_maps()->Clear();
}
inline ::sro::gameserver::Map* Maps::mutable_maps(int index) {
  // @@protoc_insertion_point(field_mutable:sro.gameserver.Maps.maps)
  return _internal_mutable_maps()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Map >*
Maps::mutable_maps() {
  // @@protoc_insertion_point(field_mutable_list:sro.gameserver.Maps.maps)
  return _internal_mutable_maps();
}
inline const ::sro::gameserver::Map& Maps::_internal_maps(int index) const {
  return _internal_maps().Get(index);
}
inline const ::sro::gameserver::Map& Maps::maps(int index) const {
  // @@protoc_insertion_point(field_get:sro.gameserver.Maps.maps)
  return _internal_maps(index);
}
inline ::sro::gameserver::Map* Maps::_internal_add_maps() {
  return _internal_mutable_maps()->Add();
}
inline ::sro::gameserver::Map* Maps::add_maps() {
  ::sro::gameserver::Map* _add = _internal_add_maps();
  // @@protoc_insertion_point(field_add:sro.gameserver.Maps.maps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::gameserver::Map >&
Maps::maps() const {
  // @@protoc_insertion_point(field_list:sro.gameserver.Maps.maps)
  return _internal_maps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Map>&
Maps::_internal_maps() const {
  return _impl_.maps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::gameserver::Map>*
Maps::_internal_mutable_maps() {
  return &_impl_.maps_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace gameserver
}  // namespace sro


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sro_2fgameserver_2fmap_2eproto_2epb_2eh
