// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/chat/chat.proto
#ifndef GRPC_sro_2fchat_2fchat_2eproto__INCLUDED
#define GRPC_sro_2fchat_2fchat_2eproto__INCLUDED

#include "sro/chat/chat.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sro {
namespace chat {

class ChatService final {
 public:
  static constexpr char const* service_full_name() {
    return "sro.chat.ChatService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>> ConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>>(ConnectChatChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> AsyncConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(AsyncConnectChatChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> PrepareAsyncConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(PrepareAsyncConnectChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>> ConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>>(ConnectDirectMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> AsyncConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(AsyncConnectDirectMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>> PrepareAsyncConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>>(PrepareAsyncConnectDirectMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSendChatChannelMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSendChatChannelMessageRaw(context, request, cq));
    }
    virtual ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    // TODO: Have request allow for filtering
    virtual ::grpc::Status GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::chat::ChatChannels* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> AsyncGetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(AsyncGetChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> PrepareAsyncGetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(PrepareAsyncGetChatChannelsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> AsyncGetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(AsyncGetChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> PrepareAsyncGetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(PrepareAsyncGetChatChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::sro::chat::ChatChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> AsyncCreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(AsyncCreateChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> PrepareAsyncCreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(PrepareAsyncCreateChatChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> AsyncDeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(AsyncDeleteChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> PrepareAsyncDeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(PrepareAsyncDeleteChatChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::sro::chat::ChatChannel* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> AsyncEditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(AsyncEditChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>> PrepareAsyncEditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>>(PrepareAsyncEditChatChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannels* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> AsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(AsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>> PrepareAsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>>(PrepareAsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    // Sets the character chat channels to the given list of channels
    virtual ::grpc::Status SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSetCharacterChatChannelAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSetCharacterChatChannelAuthRaw(context, request, cq));
    }
    // If add is true, adds the given channels to the character's chat channels,
    // otherwise removes them
    virtual ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncUpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncUpdateCharacterChatChannelAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncUpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncUpdateCharacterChatChannelAuthRaw(context, request, cq));
    }
    virtual ::grpc::Status BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncBanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncBanCharacterFromChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncBanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncBanCharacterFromChatChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::sro::chat::ChatLogs* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatLogs>> AsyncGetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatLogs>>(AsyncGetChatLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatLogs>> PrepareAsyncGetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatLogs>>(PrepareAsyncGetChatLogsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) = 0;
      virtual void ConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) = 0;
      virtual void SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TODO: Have request allow for filtering
      virtual void GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the character chat channels to the given list of channels
      virtual void SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // If add is true, adds the given channels to the character's chat channels,
      // otherwise removes them
      virtual void UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>* ConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* AsyncConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* PrepareAsyncConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::sro::chat::ChatMessage>* ConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* AsyncConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::sro::chat::ChatMessage>* PrepareAsyncConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSendChatChannelMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSendChatChannelMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* AsyncGetChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* PrepareAsyncGetChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* AsyncGetChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* PrepareAsyncGetChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* AsyncCreateChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* PrepareAsyncCreateChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* AsyncDeleteChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* PrepareAsyncDeleteChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* AsyncEditChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannel>* PrepareAsyncEditChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* AsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatChannels>* PrepareAsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSetCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSetCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncUpdateCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncUpdateCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncBanCharacterFromChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncBanCharacterFromChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatLogs>* AsyncGetChatLogsRaw(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::chat::ChatLogs>* PrepareAsyncGetChatLogsRaw(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>> ConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>>(ConnectChatChannelRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> AsyncConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(AsyncConnectChatChannelRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> PrepareAsyncConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(PrepareAsyncConnectChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>> ConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::sro::chat::ChatMessage>>(ConnectDirectMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> AsyncConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(AsyncConnectDirectMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>> PrepareAsyncConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>>(PrepareAsyncConnectDirectMessagesRaw(context, request, cq));
    }
    ::grpc::Status SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSendChatChannelMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSendChatChannelMessageRaw(context, request, cq));
    }
    ::grpc::Status SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSendDirectMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSendDirectMessageRaw(context, request, cq));
    }
    ::grpc::Status GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::chat::ChatChannels* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> AsyncGetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(AsyncGetChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> PrepareAsyncGetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(PrepareAsyncGetChatChannelsRaw(context, request, cq));
    }
    ::grpc::Status GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> AsyncGetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(AsyncGetChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> PrepareAsyncGetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(PrepareAsyncGetChatChannelRaw(context, request, cq));
    }
    ::grpc::Status CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::sro::chat::ChatChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> AsyncCreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(AsyncCreateChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> PrepareAsyncCreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(PrepareAsyncCreateChatChannelRaw(context, request, cq));
    }
    ::grpc::Status DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> AsyncDeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(AsyncDeleteChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> PrepareAsyncDeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(PrepareAsyncDeleteChatChannelRaw(context, request, cq));
    }
    ::grpc::Status EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::sro::chat::ChatChannel* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> AsyncEditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(AsyncEditChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>> PrepareAsyncEditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>>(PrepareAsyncEditChatChannelRaw(context, request, cq));
    }
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannels* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> AsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(AsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>> PrepareAsyncGetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>>(PrepareAsyncGetAuthorizedChatChannelsRaw(context, request, cq));
    }
    ::grpc::Status SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSetCharacterChatChannelAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSetCharacterChatChannelAuthRaw(context, request, cq));
    }
    ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncUpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncUpdateCharacterChatChannelAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncUpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncUpdateCharacterChatChannelAuthRaw(context, request, cq));
    }
    ::grpc::Status BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncBanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncBanCharacterFromChatChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncBanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncBanCharacterFromChatChannelRaw(context, request, cq));
    }
    ::grpc::Status GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::sro::chat::ChatLogs* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>> AsyncGetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>>(AsyncGetChatLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>> PrepareAsyncGetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>>(PrepareAsyncGetChatLogsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) override;
      void ConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) override;
      void SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) override;
      void GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) override;
      void GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) override;
      void CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) override;
      void DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)>) override;
      void EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)>) override;
      void GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response, std::function<void(::grpc::Status)>) override;
      void GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::sro::chat::ChatMessage>* ConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* AsyncConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* PrepareAsyncConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::sro::chat::ChatMessage>* ConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* AsyncConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* PrepareAsyncConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSendChatChannelMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSendChatChannelMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* AsyncGetChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* PrepareAsyncGetChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* AsyncGetChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* PrepareAsyncGetChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* AsyncCreateChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* PrepareAsyncCreateChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* AsyncDeleteChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* PrepareAsyncDeleteChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* AsyncEditChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* PrepareAsyncEditChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* AsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* PrepareAsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSetCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSetCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncUpdateCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncUpdateCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncBanCharacterFromChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncBanCharacterFromChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>* AsyncGetChatLogsRaw(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>* PrepareAsyncGetChatLogsRaw(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectChatChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectDirectMessages_;
    const ::grpc::internal::RpcMethod rpcmethod_SendChatChannelMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_SendDirectMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChatChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChatChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateChatChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteChatChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_EditChatChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAuthorizedChatChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCharacterChatChannelAuth_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCharacterChatChannelAuth_;
    const ::grpc::internal::RpcMethod rpcmethod_BanCharacterFromChatChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChatLogs_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ConnectChatChannel(::grpc::ServerContext* context, const ::sro::chat::ConnectChatChannelRequest* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer);
    virtual ::grpc::Status ConnectDirectMessages(::grpc::ServerContext* context, const ::sro::TargetId* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer);
    virtual ::grpc::Status SendChatChannelMessage(::grpc::ServerContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status SendDirectMessage(::grpc::ServerContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response);
    // TODO: Have request allow for filtering
    virtual ::grpc::Status GetChatChannels(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response);
    virtual ::grpc::Status GetChatChannel(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response);
    virtual ::grpc::Status CreateChatChannel(::grpc::ServerContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response);
    virtual ::grpc::Status DeleteChatChannel(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response);
    virtual ::grpc::Status EditChatChannel(::grpc::ServerContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response);
    virtual ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response);
    // Sets the character chat channels to the given list of channels
    virtual ::grpc::Status SetCharacterChatChannelAuth(::grpc::ServerContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response);
    // If add is true, adds the given channels to the character's chat channels,
    // otherwise removes them
    virtual ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ServerContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status BanCharacterFromChatChannel(::grpc::ServerContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status GetChatLogs(::grpc::ServerContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectChatChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ConnectChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ConnectChatChannelRequest* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectChatChannel(::grpc::ServerContext* context, ::sro::chat::ConnectChatChannelRequest* request, ::grpc::ServerAsyncWriter< ::sro::chat::ChatMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectDirectMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectDirectMessages() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ConnectDirectMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessages(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectDirectMessages(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncWriter< ::sro::chat::ChatMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendChatChannelMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendChatChannelMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendChatChannelMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatChannelMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatChannelMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChatChannelMessage(::grpc::ServerContext* context, ::sro::chat::SendChatChannelMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDirectMessage(::grpc::ServerContext* context, ::sro::chat::SendDirectMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChatChannels() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatChannels(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannels>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChatChannel() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatChannel(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateChatChannel() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChatChannelMessage* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChatChannel(::grpc::ServerContext* context, ::sro::chat::CreateChatChannelMessage* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteChatChannel() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChatChannel(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditChatChannel() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_EditChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditChatChannel(::grpc::ServerContext* context, ::sro::chat::UpdateChatChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannel>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthorizedChatChannels(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatChannels>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCharacterChatChannelAuth(::grpc::ServerContext* context, ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UpdateCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCharacterChatChannelAuth(::grpc::ServerContext* context, ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BanCharacterFromChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BanCharacterFromChatChannel() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_BanCharacterFromChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BanCharacterFromChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::BanRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBanCharacterFromChatChannel(::grpc::ServerContext* context, ::sro::chat::BanRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChatLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChatLogs() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetChatLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatLogs(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatLogRequest* /*request*/, ::sro::chat::ChatLogs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatLogs(::grpc::ServerContext* context, ::sro::chat::ChatLogRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::chat::ChatLogs>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ConnectChatChannel<WithAsyncMethod_ConnectDirectMessages<WithAsyncMethod_SendChatChannelMessage<WithAsyncMethod_SendDirectMessage<WithAsyncMethod_GetChatChannels<WithAsyncMethod_GetChatChannel<WithAsyncMethod_CreateChatChannel<WithAsyncMethod_DeleteChatChannel<WithAsyncMethod_EditChatChannel<WithAsyncMethod_GetAuthorizedChatChannels<WithAsyncMethod_SetCharacterChatChannelAuth<WithAsyncMethod_UpdateCharacterChatChannelAuth<WithAsyncMethod_BanCharacterFromChatChannel<WithAsyncMethod_GetChatLogs<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ConnectChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConnectChatChannel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sro::chat::ConnectChatChannelRequest, ::sro::chat::ChatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::ConnectChatChannelRequest* request) { return this->ConnectChatChannel(context, request); }));
    }
    ~WithCallbackMethod_ConnectChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ConnectChatChannelRequest* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sro::chat::ChatMessage>* ConnectChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::ConnectChatChannelRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConnectDirectMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConnectDirectMessages() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::sro::TargetId, ::sro::chat::ChatMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request) { return this->ConnectDirectMessages(context, request); }));
    }
    ~WithCallbackMethod_ConnectDirectMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessages(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::sro::chat::ChatMessage>* ConnectDirectMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendChatChannelMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendChatChannelMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response) { return this->SendChatChannelMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendChatChannelMessage(
        ::grpc::MessageAllocator< ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendChatChannelMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatChannelMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatChannelMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendChatChannelMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::SendChatChannelMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response) { return this->SendDirectMessage(context, request, response); }));}
    void SetMessageAllocatorFor_SendDirectMessage(
        ::grpc::MessageAllocator< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDirectMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChatChannels() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::chat::ChatChannels>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response) { return this->GetChatChannels(context, request, response); }));}
    void SetMessageAllocatorFor_GetChatChannels(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::sro::chat::ChatChannels>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::sro::chat::ChatChannels>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChatChannel() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::chat::ChatChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response) { return this->GetChatChannel(context, request, response); }));}
    void SetMessageAllocatorFor_GetChatChannel(
        ::grpc::MessageAllocator< ::sro::TargetId, ::sro::chat::ChatChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::chat::ChatChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateChatChannel() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response) { return this->CreateChatChannel(context, request, response); }));}
    void SetMessageAllocatorFor_CreateChatChannel(
        ::grpc::MessageAllocator< ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChatChannelMessage* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::CreateChatChannelMessage* /*request*/, ::sro::chat::ChatChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteChatChannel() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::chat::ChatChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response) { return this->DeleteChatChannel(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteChatChannel(
        ::grpc::MessageAllocator< ::sro::TargetId, ::sro::chat::ChatChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::chat::ChatChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditChatChannel() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response) { return this->EditChatChannel(context, request, response); }));}
    void SetMessageAllocatorFor_EditChatChannel(
        ::grpc::MessageAllocator< ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::sro::chat::ChatChannel* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::chat::ChatChannels>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response) { return this->GetAuthorizedChatChannels(context, request, response); }));}
    void SetMessageAllocatorFor_GetAuthorizedChatChannels(
        ::grpc::MessageAllocator< ::sro::TargetId, ::sro::chat::ChatChannels>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::sro::chat::ChatChannels>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAuthorizedChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannels* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response) { return this->SetCharacterChatChannelAuth(context, request, response); }));}
    void SetMessageAllocatorFor_SetCharacterChatChannelAuth(
        ::grpc::MessageAllocator< ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCharacterChatChannelAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response) { return this->UpdateCharacterChatChannelAuth(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCharacterChatChannelAuth(
        ::grpc::MessageAllocator< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCharacterChatChannelAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BanCharacterFromChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BanCharacterFromChatChannel() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::BanRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response) { return this->BanCharacterFromChatChannel(context, request, response); }));}
    void SetMessageAllocatorFor_BanCharacterFromChatChannel(
        ::grpc::MessageAllocator< ::sro::chat::BanRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::BanRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BanCharacterFromChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BanCharacterFromChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::BanRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BanCharacterFromChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::BanRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetChatLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChatLogs() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response) { return this->GetChatLogs(context, request, response); }));}
    void SetMessageAllocatorFor_GetChatLogs(
        ::grpc::MessageAllocator< ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChatLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatLogs(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatLogRequest* /*request*/, ::sro::chat::ChatLogs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::chat::ChatLogRequest* /*request*/, ::sro::chat::ChatLogs* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ConnectChatChannel<WithCallbackMethod_ConnectDirectMessages<WithCallbackMethod_SendChatChannelMessage<WithCallbackMethod_SendDirectMessage<WithCallbackMethod_GetChatChannels<WithCallbackMethod_GetChatChannel<WithCallbackMethod_CreateChatChannel<WithCallbackMethod_DeleteChatChannel<WithCallbackMethod_EditChatChannel<WithCallbackMethod_GetAuthorizedChatChannels<WithCallbackMethod_SetCharacterChatChannelAuth<WithCallbackMethod_UpdateCharacterChatChannelAuth<WithCallbackMethod_BanCharacterFromChatChannel<WithCallbackMethod_GetChatLogs<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ConnectChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectChatChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ConnectChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ConnectChatChannelRequest* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConnectDirectMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectDirectMessages() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ConnectDirectMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessages(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendChatChannelMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendChatChannelMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendChatChannelMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatChannelMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatChannelMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChatChannels() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChatChannel() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateChatChannel() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChatChannelMessage* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteChatChannel() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditChatChannel() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_EditChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UpdateCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BanCharacterFromChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BanCharacterFromChatChannel() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_BanCharacterFromChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BanCharacterFromChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::BanRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChatLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChatLogs() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetChatLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatLogs(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatLogRequest* /*request*/, ::sro::chat::ChatLogs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectChatChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ConnectChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ConnectChatChannelRequest* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectChatChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectDirectMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectDirectMessages() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ConnectDirectMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessages(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectDirectMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendChatChannelMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendChatChannelMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendChatChannelMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatChannelMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatChannelMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChatChannelMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendDirectMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChatChannels() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChatChannel() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateChatChannel() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChatChannelMessage* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateChatChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteChatChannel() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteChatChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditChatChannel() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_EditChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditChatChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthorizedChatChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCharacterChatChannelAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_UpdateCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCharacterChatChannelAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BanCharacterFromChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BanCharacterFromChatChannel() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_BanCharacterFromChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BanCharacterFromChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::BanRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBanCharacterFromChatChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChatLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChatLogs() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetChatLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatLogs(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatLogRequest* /*request*/, ::sro::chat::ChatLogs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConnectChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConnectChatChannel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ConnectChatChannel(context, request); }));
    }
    ~WithRawCallbackMethod_ConnectChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ConnectChatChannelRequest* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ConnectChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConnectDirectMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConnectDirectMessages() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ConnectDirectMessages(context, request); }));
    }
    ~WithRawCallbackMethod_ConnectDirectMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectDirectMessages(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ConnectDirectMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendChatChannelMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendChatChannelMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendChatChannelMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendChatChannelMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatChannelMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatChannelMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendChatChannelMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendDirectMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendDirectMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChatChannels() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChatChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChatChannel() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChatChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateChatChannel() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateChatChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChatChannelMessage* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteChatChannel() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteChatChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditChatChannel() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditChatChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAuthorizedChatChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAuthorizedChatChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCharacterChatChannelAuth(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCharacterChatChannelAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCharacterChatChannelAuth(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCharacterChatChannelAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BanCharacterFromChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BanCharacterFromChatChannel() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BanCharacterFromChatChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_BanCharacterFromChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BanCharacterFromChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::BanRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BanCharacterFromChatChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChatLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChatLogs() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChatLogs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChatLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatLogs(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatLogRequest* /*request*/, ::sro::chat::ChatLogs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChatLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendChatChannelMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendChatChannelMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSendChatChannelMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendChatChannelMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendChatChannelMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendChatChannelMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendChatChannelMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::SendChatChannelMessageRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendDirectMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendDirectMessage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSendDirectMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendDirectMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendDirectMessage(::grpc::ServerContext* /*context*/, const ::sro::chat::SendDirectMessageRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendDirectMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::SendDirectMessageRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChatChannels() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::sro::chat::ChatChannels>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::sro::chat::ChatChannels>* streamer) {
                       return this->StreamedGetChatChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChatChannels(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChatChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::sro::chat::ChatChannels>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChatChannel() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::sro::chat::ChatChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::sro::chat::ChatChannel>* streamer) {
                       return this->StreamedGetChatChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChatChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::sro::chat::ChatChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateChatChannel() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel>* streamer) {
                       return this->StreamedCreateChatChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::CreateChatChannelMessage* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateChatChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::CreateChatChannelMessage,::sro::chat::ChatChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteChatChannel() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::sro::chat::ChatChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::sro::chat::ChatChannel>* streamer) {
                       return this->StreamedDeleteChatChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteChatChannel(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteChatChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::sro::chat::ChatChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditChatChannel() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel>* streamer) {
                       return this->StreamedEditChatChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::UpdateChatChannelRequest* /*request*/, ::sro::chat::ChatChannel* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditChatChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::UpdateChatChannelRequest,::sro::chat::ChatChannel>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAuthorizedChatChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAuthorizedChatChannels() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::sro::chat::ChatChannels>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::sro::chat::ChatChannels>* streamer) {
                       return this->StreamedGetAuthorizedChatChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAuthorizedChatChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAuthorizedChatChannels(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::sro::chat::ChatChannels* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAuthorizedChatChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::sro::chat::ChatChannels>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSetCharacterChatChannelAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCharacterChatChannelAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::RequestSetCharacterSetChatChannelAuth,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCharacterChatChannelAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCharacterChatChannelAuth() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedUpdateCharacterChatChannelAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCharacterChatChannelAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCharacterChatChannelAuth(::grpc::ServerContext* /*context*/, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCharacterChatChannelAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BanCharacterFromChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BanCharacterFromChatChannel() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::BanRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::BanRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedBanCharacterFromChatChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BanCharacterFromChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BanCharacterFromChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::BanRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBanCharacterFromChatChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::BanRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChatLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChatLogs() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs>* streamer) {
                       return this->StreamedGetChatLogs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChatLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChatLogs(::grpc::ServerContext* /*context*/, const ::sro::chat::ChatLogRequest* /*request*/, ::sro::chat::ChatLogs* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChatLogs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::chat::ChatLogRequest,::sro::chat::ChatLogs>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendChatChannelMessage<WithStreamedUnaryMethod_SendDirectMessage<WithStreamedUnaryMethod_GetChatChannels<WithStreamedUnaryMethod_GetChatChannel<WithStreamedUnaryMethod_CreateChatChannel<WithStreamedUnaryMethod_DeleteChatChannel<WithStreamedUnaryMethod_EditChatChannel<WithStreamedUnaryMethod_GetAuthorizedChatChannels<WithStreamedUnaryMethod_SetCharacterChatChannelAuth<WithStreamedUnaryMethod_UpdateCharacterChatChannelAuth<WithStreamedUnaryMethod_BanCharacterFromChatChannel<WithStreamedUnaryMethod_GetChatLogs<Service > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ConnectChatChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ConnectChatChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sro::chat::ConnectChatChannelRequest, ::sro::chat::ChatMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sro::chat::ConnectChatChannelRequest, ::sro::chat::ChatMessage>* streamer) {
                       return this->StreamedConnectChatChannel(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ConnectChatChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectChatChannel(::grpc::ServerContext* /*context*/, const ::sro::chat::ConnectChatChannelRequest* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedConnectChatChannel(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sro::chat::ConnectChatChannelRequest,::sro::chat::ChatMessage>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ConnectDirectMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ConnectDirectMessages() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::sro::TargetId, ::sro::chat::ChatMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::sro::TargetId, ::sro::chat::ChatMessage>* streamer) {
                       return this->StreamedConnectDirectMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ConnectDirectMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectDirectMessages(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedConnectDirectMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::sro::TargetId,::sro::chat::ChatMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ConnectChatChannel<WithSplitStreamingMethod_ConnectDirectMessages<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ConnectChatChannel<WithSplitStreamingMethod_ConnectDirectMessages<WithStreamedUnaryMethod_SendChatChannelMessage<WithStreamedUnaryMethod_SendDirectMessage<WithStreamedUnaryMethod_GetChatChannels<WithStreamedUnaryMethod_GetChatChannel<WithStreamedUnaryMethod_CreateChatChannel<WithStreamedUnaryMethod_DeleteChatChannel<WithStreamedUnaryMethod_EditChatChannel<WithStreamedUnaryMethod_GetAuthorizedChatChannels<WithStreamedUnaryMethod_SetCharacterChatChannelAuth<WithStreamedUnaryMethod_UpdateCharacterChatChannelAuth<WithStreamedUnaryMethod_BanCharacterFromChatChannel<WithStreamedUnaryMethod_GetChatLogs<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace chat
}  // namespace sro


#endif  // GRPC_sro_2fchat_2fchat_2eproto__INCLUDED
