#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/chat/chat.proto

#include "sro/chat/chat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace chat {
template <typename>
PROTOBUF_CONSTEXPR ChatLogRequest::ChatLogRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.optional_sender_id_)*/{}
  , /*decltype(_impl_.optional_before_)*/{}
  , /*decltype(_impl_.optional_after_)*/{}
  , /*decltype(_impl_.optional_limit_)*/{}
  , /*decltype(_impl_.optional_offset_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChatLogRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatLogRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatLogRequestDefaultTypeInternal() {}
  union {
    ChatLogRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatLogRequestDefaultTypeInternal _ChatLogRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatLog::ChatLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sender_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sent_at_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatLogDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatLogDefaultTypeInternal() {}
  union {
    ChatLog _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatLogDefaultTypeInternal _ChatLog_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatLogs::ChatLogs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.logs_)*/{}
  , /*decltype(_impl_.total_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatLogsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatLogsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatLogsDefaultTypeInternal() {}
  union {
    ChatLogs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatLogsDefaultTypeInternal _ChatLogs_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BanRequest::BanRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.duration_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BanRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BanRequestDefaultTypeInternal() {}
  union {
    BanRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BanRequestDefaultTypeInternal _BanRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConnectChatChannelRequest::ConnectChatChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.character_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectChatChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectChatChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectChatChannelRequestDefaultTypeInternal() {}
  union {
    ConnectChatChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectChatChannelRequestDefaultTypeInternal _ConnectChatChannelRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RequestSetCharacterSetChatChannelAuth::RequestSetCharacterSetChatChannelAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.character_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestSetCharacterSetChatChannelAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestSetCharacterSetChatChannelAuthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestSetCharacterSetChatChannelAuthDefaultTypeInternal() {}
  union {
    RequestSetCharacterSetChatChannelAuth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestSetCharacterSetChatChannelAuthDefaultTypeInternal _RequestSetCharacterSetChatChannelAuth_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RequestUpdateCharacterSetChatChannelAuth::RequestUpdateCharacterSetChatChannelAuth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/{}
  , /*decltype(_impl_.character_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.add_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestUpdateCharacterSetChatChannelAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestUpdateCharacterSetChatChannelAuthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestUpdateCharacterSetChatChannelAuthDefaultTypeInternal() {}
  union {
    RequestUpdateCharacterSetChatChannelAuth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestUpdateCharacterSetChatChannelAuthDefaultTypeInternal _RequestUpdateCharacterSetChatChannelAuth_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatChannel::ChatChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dimension_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.public__)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatChannelDefaultTypeInternal() {}
  union {
    ChatChannel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatChannelDefaultTypeInternal _ChatChannel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatChannels::ChatChannels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatChannelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatChannelsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatChannelsDefaultTypeInternal() {}
  union {
    ChatChannels _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatChannelsDefaultTypeInternal _ChatChannels_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateChatChannelMessage::CreateChatChannelMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dimension_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateChatChannelMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateChatChannelMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateChatChannelMessageDefaultTypeInternal() {}
  union {
    CreateChatChannelMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateChatChannelMessageDefaultTypeInternal _CreateChatChannelMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_character_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.content_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sent_time_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SendChatChannelMessageRequest::SendChatChannelMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.chat_message_)*/nullptr} {}
struct SendChatChannelMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatChannelMessageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatChannelMessageRequestDefaultTypeInternal() {}
  union {
    SendChatChannelMessageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatChannelMessageRequestDefaultTypeInternal _SendChatChannelMessageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SendDirectMessageRequest::SendDirectMessageRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.character_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.chat_message_)*/nullptr} {}
struct SendDirectMessageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendDirectMessageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendDirectMessageRequestDefaultTypeInternal() {}
  union {
    SendDirectMessageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendDirectMessageRequestDefaultTypeInternal _SendDirectMessageRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateChatChannelRequest::UpdateChatChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.optional_name_)*/{}
  , /*decltype(_impl_.optional_dimension_)*/{}
  , /*decltype(_impl_.optional_public_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateChatChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateChatChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateChatChannelRequestDefaultTypeInternal() {}
  union {
    UpdateChatChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateChatChannelRequestDefaultTypeInternal _UpdateChatChannelRequest_default_instance_;
}  // namespace chat
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fchat_2fchat_2eproto[14];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fchat_2fchat_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fchat_2fchat_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fchat_2fchat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_.channel_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_.optional_sender_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_.optional_before_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_.optional_after_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_.optional_limit_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_.optional_offset_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLog, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLog, _impl_.sent_at_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLog, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLog, _impl_.sender_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLog, _impl_.content_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogs, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogs, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogs, _impl_.logs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::BanRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::BanRequest, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::BanRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::BanRequest, _impl_.duration_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ConnectChatChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ConnectChatChannelRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ConnectChatChannelRequest, _impl_.character_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestSetCharacterSetChatChannelAuth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestSetCharacterSetChatChannelAuth, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestSetCharacterSetChatChannelAuth, _impl_.ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestUpdateCharacterSetChatChannelAuth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestUpdateCharacterSetChatChannelAuth, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestUpdateCharacterSetChatChannelAuth, _impl_.add_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::RequestUpdateCharacterSetChatChannelAuth, _impl_.ids_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _impl_.dimension_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannel, _impl_.public__),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannels, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatChannels, _impl_.channels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::CreateChatChannelMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::CreateChatChannelMessage, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::CreateChatChannelMessage, _impl_.dimension_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatMessage, _impl_.sender_character_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatMessage, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatMessage, _impl_.sent_time_ms_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatChannelMessageRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatChannelMessageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatChannelMessageRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendChatChannelMessageRequest, _impl_.chat_message_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::SendDirectMessageRequest, _impl_.chat_message_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_.channel_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_.optional_name_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_.optional_dimension_),
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_.optional_public_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::sro::chat::ChatLogRequest)},
        { 19, -1, -1, sizeof(::sro::chat::ChatLog)},
        { 31, -1, -1, sizeof(::sro::chat::ChatLogs)},
        { 41, -1, -1, sizeof(::sro::chat::BanRequest)},
        { 52, -1, -1, sizeof(::sro::chat::ConnectChatChannelRequest)},
        { 62, -1, -1, sizeof(::sro::chat::RequestSetCharacterSetChatChannelAuth)},
        { 72, -1, -1, sizeof(::sro::chat::RequestUpdateCharacterSetChatChannelAuth)},
        { 83, -1, -1, sizeof(::sro::chat::ChatChannel)},
        { 95, -1, -1, sizeof(::sro::chat::ChatChannels)},
        { 104, -1, -1, sizeof(::sro::chat::CreateChatChannelMessage)},
        { 114, -1, -1, sizeof(::sro::chat::ChatMessage)},
        { 125, 135, -1, sizeof(::sro::chat::SendChatChannelMessageRequest)},
        { 137, 147, -1, sizeof(::sro::chat::SendDirectMessageRequest)},
        { 149, -1, -1, sizeof(::sro::chat::UpdateChatChannelRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::chat::_ChatLogRequest_default_instance_._instance,
    &::sro::chat::_ChatLog_default_instance_._instance,
    &::sro::chat::_ChatLogs_default_instance_._instance,
    &::sro::chat::_BanRequest_default_instance_._instance,
    &::sro::chat::_ConnectChatChannelRequest_default_instance_._instance,
    &::sro::chat::_RequestSetCharacterSetChatChannelAuth_default_instance_._instance,
    &::sro::chat::_RequestUpdateCharacterSetChatChannelAuth_default_instance_._instance,
    &::sro::chat::_ChatChannel_default_instance_._instance,
    &::sro::chat::_ChatChannels_default_instance_._instance,
    &::sro::chat::_CreateChatChannelMessage_default_instance_._instance,
    &::sro::chat::_ChatMessage_default_instance_._instance,
    &::sro::chat::_SendChatChannelMessageRequest_default_instance_._instance,
    &::sro::chat::_SendDirectMessageRequest_default_instance_._instance,
    &::sro::chat::_UpdateChatChannelRequest_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fchat_2fchat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023sro/chat/chat.proto\022\010sro.chat\032\034google/"
    "api/annotations.proto\032\033google/protobuf/e"
    "mpty.proto\032\021sro/globals.proto\"\337\001\n\016ChatLo"
    "gRequest\022\022\n\nchannel_id\030\001 \001(\t\022\023\n\tsender_i"
    "d\030\002 \001(\tH\000\022\020\n\006before\030\003 \001(\003H\001\022\017\n\005after\030\004 \001"
    "(\003H\002\022\017\n\005limit\030\005 \001(\004H\003\022\020\n\006offset\030\006 \001(\004H\004B"
    "\024\n\022optional_sender_idB\021\n\017optional_before"
    "B\020\n\016optional_afterB\020\n\016optional_limitB\021\n\017"
    "optional_offset\"R\n\007ChatLog\022\017\n\007sent_at\030\001 "
    "\001(\004\022\022\n\nchannel_id\030\002 \001(\t\022\021\n\tsender_id\030\003 \001"
    "(\t\022\017\n\007content\030\004 \001(\t\":\n\010ChatLogs\022\r\n\005total"
    "\030\001 \001(\004\022\037\n\004logs\030\002 \003(\0132\021.sro.chat.ChatLog\""
    "H\n\nBanRequest\022\024\n\014character_id\030\001 \001(\t\022\022\n\nc"
    "hannel_id\030\002 \001(\t\022\020\n\010duration\030\003 \001(\003\"E\n\031Con"
    "nectChatChannelRequest\022\022\n\nchannel_id\030\001 \001"
    "(\t\022\024\n\014character_id\030\002 \001(\t\"J\n%RequestSetCh"
    "aracterSetChatChannelAuth\022\024\n\014character_i"
    "d\030\001 \001(\t\022\013\n\003ids\030\002 \003(\t\"Z\n(RequestUpdateCha"
    "racterSetChatChannelAuth\022\024\n\014character_id"
    "\030\001 \001(\t\022\013\n\003add\030\002 \001(\010\022\013\n\003ids\030\003 \003(\t\"M\n\013Chat"
    "Channel\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\024\n\014dim"
    "ension_id\030\003 \001(\t\022\016\n\006public\030\004 \001(\010\"7\n\014ChatC"
    "hannels\022\'\n\010channels\030\001 \003(\0132\025.sro.chat.Cha"
    "tChannel\">\n\030CreateChatChannelMessage\022\014\n\004"
    "name\030\001 \001(\t\022\024\n\014dimension_id\030\002 \001(\t\"Q\n\013Chat"
    "Message\022\033\n\023sender_character_id\030\001 \001(\t\022\017\n\007"
    "content\030\002 \001(\t\022\024\n\014sent_time_ms\030\003 \001(\003\"`\n\035S"
    "endChatChannelMessageRequest\022\022\n\nchannel_"
    "id\030\001 \001(\t\022+\n\014chat_message\030\002 \001(\0132\025.sro.cha"
    "t.ChatMessage\"]\n\030SendDirectMessageReques"
    "t\022\024\n\014character_id\030\001 \001(\t\022+\n\014chat_message\030"
    "\002 \001(\0132\025.sro.chat.ChatMessage\"\237\001\n\030UpdateC"
    "hatChannelRequest\022\022\n\nchannel_id\030\001 \001(\t\022\016\n"
    "\004name\030\002 \001(\tH\000\022\023\n\tdimension\030\003 \001(\tH\001\022\020\n\006pu"
    "blic\030\004 \001(\010H\002B\017\n\roptional_nameB\024\n\022optiona"
    "l_dimensionB\021\n\017optional_public2\215\r\n\013ChatS"
    "ervice\022\177\n\022ConnectChatChannel\022#.sro.chat."
    "ConnectChatChannelRequest\032\025.sro.chat.Cha"
    "tMessage\"+\202\323\344\223\002%\022#/v1/message/channel/id"
    "/{channel_id}0\001\022f\n\025ConnectDirectMessages"
    "\022\r.sro.TargetId\032\025.sro.chat.ChatMessage\"%"
    "\202\323\344\223\002\037\022\035/v1/message/character/id/{id}0\001\022"
    "\211\001\n\026SendChatChannelMessage\022\'.sro.chat.Se"
    "ndChatChannelMessageRequest\032\026.google.pro"
    "tobuf.Empty\".\202\323\344\223\002(\032#/v1/message/channel"
    "/id/{channel_id}:\001*\022\203\001\n\021SendDirectMessag"
    "e\022\".sro.chat.SendDirectMessageRequest\032\026."
    "google.protobuf.Empty\"2\202\323\344\223\002,\032\'/v1/messa"
    "ge/character/id/{character_id}:\001*\022W\n\017Get"
    "ChatChannels\022\026.google.protobuf.Empty\032\026.s"
    "ro.chat.ChatChannels\"\024\202\323\344\223\002\016\022\014/v1/channe"
    "ls\022T\n\016GetChatChannel\022\r.sro.TargetId\032\025.sr"
    "o.chat.ChatChannel\"\034\202\323\344\223\002\026\022\024/v1/channels"
    "/id/{id}\022g\n\021CreateChatChannel\022\".sro.chat"
    ".CreateChatChannelMessage\032\025.sro.chat.Cha"
    "tChannel\"\027\202\323\344\223\002\021\"\014/v1/channels:\001*\022W\n\021Del"
    "eteChatChannel\022\r.sro.TargetId\032\025.sro.chat"
    ".ChatChannel\"\034\202\323\344\223\002\026*\024/v1/channels/id/{i"
    "d}\022u\n\017EditChatChannel\022\".sro.chat.UpdateC"
    "hatChannelRequest\032\025.sro.chat.ChatChannel"
    "\"\'\202\323\344\223\002!\032\034/v1/channels/id/{channel_id}:\001"
    "*\022j\n\031GetAuthorizedChatChannels\022\r.sro.Tar"
    "getId\032\026.sro.chat.ChatChannels\"&\202\323\344\223\002 \022\036/"
    "v1/character/id/{id}/channels\022\231\001\n\033SetCha"
    "racterChatChannelAuth\022/.sro.chat.Request"
    "SetCharacterSetChatChannelAuth\032\026.google."
    "protobuf.Empty\"1\202\323\344\223\002+\")/v1/characters/i"
    "d/{character_id}/channels\022\237\001\n\036UpdateChar"
    "acterChatChannelAuth\0222.sro.chat.RequestU"
    "pdateCharacterSetChatChannelAuth\032\026.googl"
    "e.protobuf.Empty\"1\202\323\344\223\002+\032)/v1/characters"
    "/id/{character_id}/channels\022\217\001\n\033BanChara"
    "cterFromChatChannel\022\024.sro.chat.BanReques"
    "t\032\026.google.protobuf.Empty\"B\202\323\344\223\002<\":/v1/c"
    "haracters/id/{character_id}/channels/{ch"
    "annel_id}/ban\022_\n\013GetChatLogs\022\030.sro.chat."
    "ChatLogRequest\032\022.sro.chat.ChatLogs\"\"\202\323\344\223"
    "\002\034\022\032/v1/chat/{channel_id}/logsB3Z1github"
    ".com/ShatteredRealms/chat-service/pkg/pb"
    ";pbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fchat_2fchat_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_sro_2fglobals_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fchat_2fchat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fchat_2fchat_2eproto = {
    false,
    false,
    3171,
    descriptor_table_protodef_sro_2fchat_2fchat_2eproto,
    "sro/chat/chat.proto",
    &descriptor_table_sro_2fchat_2fchat_2eproto_once,
    descriptor_table_sro_2fchat_2fchat_2eproto_deps,
    3,
    14,
    schemas,
    file_default_instances,
    TableStruct_sro_2fchat_2fchat_2eproto::offsets,
    file_level_metadata_sro_2fchat_2fchat_2eproto,
    file_level_enum_descriptors_sro_2fchat_2fchat_2eproto,
    file_level_service_descriptors_sro_2fchat_2fchat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fchat_2fchat_2eproto_getter() {
  return &descriptor_table_sro_2fchat_2fchat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fchat_2fchat_2eproto(&descriptor_table_sro_2fchat_2fchat_2eproto);
namespace sro {
namespace chat {
// ===================================================================

class ChatLogRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::chat::ChatLogRequest, _impl_._oneof_case_);
};

ChatLogRequest::ChatLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatLogRequest)
}
ChatLogRequest::ChatLogRequest(const ChatLogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatLogRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.optional_sender_id_){}
    , decltype(_impl_.optional_before_){}
    , decltype(_impl_.optional_after_){}
    , decltype(_impl_.optional_limit_){}
    , decltype(_impl_.optional_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  clear_has_optional_sender_id();
  switch (from.optional_sender_id_case()) {
    case kSenderId: {
      _this->_internal_set_sender_id(from._internal_sender_id());
      break;
    }
    case OPTIONAL_SENDER_ID_NOT_SET: {
      break;
    }
  }
  clear_has_optional_before();
  switch (from.optional_before_case()) {
    case kBefore: {
      _this->_internal_set_before(from._internal_before());
      break;
    }
    case OPTIONAL_BEFORE_NOT_SET: {
      break;
    }
  }
  clear_has_optional_after();
  switch (from.optional_after_case()) {
    case kAfter: {
      _this->_internal_set_after(from._internal_after());
      break;
    }
    case OPTIONAL_AFTER_NOT_SET: {
      break;
    }
  }
  clear_has_optional_limit();
  switch (from.optional_limit_case()) {
    case kLimit: {
      _this->_internal_set_limit(from._internal_limit());
      break;
    }
    case OPTIONAL_LIMIT_NOT_SET: {
      break;
    }
  }
  clear_has_optional_offset();
  switch (from.optional_offset_case()) {
    case kOffset: {
      _this->_internal_set_offset(from._internal_offset());
      break;
    }
    case OPTIONAL_OFFSET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatLogRequest)
}

inline void ChatLogRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.optional_sender_id_){}
    , decltype(_impl_.optional_before_){}
    , decltype(_impl_.optional_after_){}
    , decltype(_impl_.optional_limit_){}
    , decltype(_impl_.optional_offset_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_optional_sender_id();
  clear_has_optional_before();
  clear_has_optional_after();
  clear_has_optional_limit();
  clear_has_optional_offset();
}

ChatLogRequest::~ChatLogRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatLogRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatLogRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  if (has_optional_sender_id()) {
    clear_optional_sender_id();
  }
  if (has_optional_before()) {
    clear_optional_before();
  }
  if (has_optional_after()) {
    clear_optional_after();
  }
  if (has_optional_limit()) {
    clear_optional_limit();
  }
  if (has_optional_offset()) {
    clear_optional_offset();
  }
}

void ChatLogRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatLogRequest::clear_optional_sender_id() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.ChatLogRequest)
  switch (optional_sender_id_case()) {
    case kSenderId: {
      _impl_.optional_sender_id_.sender_id_.Destroy();
      break;
    }
    case OPTIONAL_SENDER_ID_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_SENDER_ID_NOT_SET;
}

void ChatLogRequest::clear_optional_before() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.ChatLogRequest)
  switch (optional_before_case()) {
    case kBefore: {
      // No need to clear
      break;
    }
    case OPTIONAL_BEFORE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_BEFORE_NOT_SET;
}

void ChatLogRequest::clear_optional_after() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.ChatLogRequest)
  switch (optional_after_case()) {
    case kAfter: {
      // No need to clear
      break;
    }
    case OPTIONAL_AFTER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_AFTER_NOT_SET;
}

void ChatLogRequest::clear_optional_limit() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.ChatLogRequest)
  switch (optional_limit_case()) {
    case kLimit: {
      // No need to clear
      break;
    }
    case OPTIONAL_LIMIT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[3] = OPTIONAL_LIMIT_NOT_SET;
}

void ChatLogRequest::clear_optional_offset() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.ChatLogRequest)
  switch (optional_offset_case()) {
    case kOffset: {
      // No need to clear
      break;
    }
    case OPTIONAL_OFFSET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[4] = OPTIONAL_OFFSET_NOT_SET;
}


void ChatLogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatLogRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  clear_optional_sender_id();
  clear_optional_before();
  clear_optional_after();
  clear_optional_limit();
  clear_optional_offset();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatLogRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatLogRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatLogRequest.sender_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 before = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_before(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 after = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_after(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _internal_set_limit(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _internal_set_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatLogRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatLogRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatLogRequest.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sender_id = 2;
  if (optional_sender_id_case() == kSenderId) {
    const std::string& _s = this->_internal_sender_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatLogRequest.sender_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 before = 3;
  if (optional_before_case() == kBefore) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_before(), target);
  }

  // int64 after = 4;
  if (optional_after_case() == kAfter) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_after(), target);
  }

  // uint64 limit = 5;
  if (optional_limit_case() == kLimit) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_limit(), target);
  }

  // uint64 offset = 6;
  if (optional_offset_case() == kOffset) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatLogRequest)
  return target;
}

::size_t ChatLogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatLogRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  switch (optional_sender_id_case()) {
    // string sender_id = 2;
    case kSenderId: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_sender_id());
      break;
    }
    case OPTIONAL_SENDER_ID_NOT_SET: {
      break;
    }
  }
  switch (optional_before_case()) {
    // int64 before = 3;
    case kBefore: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_before());
      break;
    }
    case OPTIONAL_BEFORE_NOT_SET: {
      break;
    }
  }
  switch (optional_after_case()) {
    // int64 after = 4;
    case kAfter: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_after());
      break;
    }
    case OPTIONAL_AFTER_NOT_SET: {
      break;
    }
  }
  switch (optional_limit_case()) {
    // uint64 limit = 5;
    case kLimit: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_limit());
      break;
    }
    case OPTIONAL_LIMIT_NOT_SET: {
      break;
    }
  }
  switch (optional_offset_case()) {
    // uint64 offset = 6;
    case kOffset: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this->_internal_offset());
      break;
    }
    case OPTIONAL_OFFSET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatLogRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatLogRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatLogRequest::GetClassData() const { return &_class_data_; }


void ChatLogRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatLogRequest*>(&to_msg);
  auto& from = static_cast<const ChatLogRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatLogRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  switch (from.optional_sender_id_case()) {
    case kSenderId: {
      _this->_internal_set_sender_id(from._internal_sender_id());
      break;
    }
    case OPTIONAL_SENDER_ID_NOT_SET: {
      break;
    }
  }
  switch (from.optional_before_case()) {
    case kBefore: {
      _this->_internal_set_before(from._internal_before());
      break;
    }
    case OPTIONAL_BEFORE_NOT_SET: {
      break;
    }
  }
  switch (from.optional_after_case()) {
    case kAfter: {
      _this->_internal_set_after(from._internal_after());
      break;
    }
    case OPTIONAL_AFTER_NOT_SET: {
      break;
    }
  }
  switch (from.optional_limit_case()) {
    case kLimit: {
      _this->_internal_set_limit(from._internal_limit());
      break;
    }
    case OPTIONAL_LIMIT_NOT_SET: {
      break;
    }
  }
  switch (from.optional_offset_case()) {
    case kOffset: {
      _this->_internal_set_offset(from._internal_offset());
      break;
    }
    case OPTIONAL_OFFSET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatLogRequest::CopyFrom(const ChatLogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatLogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLogRequest::IsInitialized() const {
  return true;
}

void ChatLogRequest::InternalSwap(ChatLogRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  swap(_impl_.optional_sender_id_, other->_impl_.optional_sender_id_);
  swap(_impl_.optional_before_, other->_impl_.optional_before_);
  swap(_impl_.optional_after_, other->_impl_.optional_after_);
  swap(_impl_.optional_limit_, other->_impl_.optional_limit_);
  swap(_impl_.optional_offset_, other->_impl_.optional_offset_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
  swap(_impl_._oneof_case_[3], other->_impl_._oneof_case_[3]);
  swap(_impl_._oneof_case_[4], other->_impl_._oneof_case_[4]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatLogRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[0]);
}
// ===================================================================

class ChatLog::_Internal {
 public:
};

ChatLog::ChatLog(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatLog)
}
ChatLog::ChatLog(const ChatLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sender_id_) {}

    , decltype(_impl_.content_) {}

    , decltype(_impl_.sent_at_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id().empty()) {
    _this->_impl_.sender_id_.Set(from._internal_sender_id(), _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sent_at_ = from._impl_.sent_at_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatLog)
}

inline void ChatLog::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sender_id_) {}

    , decltype(_impl_.content_) {}

    , decltype(_impl_.sent_at_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatLog::~ChatLog() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatLog::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.sender_id_.Destroy();
  _impl_.content_.Destroy();
}

void ChatLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatLog::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatLog)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.sender_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.sent_at_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sent_at = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sent_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatLog.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatLog.sender_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatLog.content"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatLog::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatLog)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sent_at = 1;
  if (this->_internal_sent_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sent_at(), target);
  }

  // string channel_id = 2;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatLog.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string sender_id = 3;
  if (!this->_internal_sender_id().empty()) {
    const std::string& _s = this->_internal_sender_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatLog.sender_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatLog.content");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatLog)
  return target;
}

::size_t ChatLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatLog)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 2;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string sender_id = 3;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_id());
  }

  // string content = 4;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_content());
  }

  // uint64 sent_at = 1;
  if (this->_internal_sent_at() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sent_at());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatLog::GetClassData() const { return &_class_data_; }


void ChatLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatLog*>(&to_msg);
  auto& from = static_cast<const ChatLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatLog)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_sent_at() != 0) {
    _this->_internal_set_sent_at(from._internal_sent_at());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatLog::CopyFrom(const ChatLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLog::IsInitialized() const {
  return true;
}

void ChatLog::InternalSwap(ChatLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_id_, lhs_arena,
                                       &other->_impl_.sender_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);

  swap(_impl_.sent_at_, other->_impl_.sent_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[1]);
}
// ===================================================================

class ChatLogs::_Internal {
 public:
};

ChatLogs::ChatLogs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatLogs)
}
ChatLogs::ChatLogs(const ChatLogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatLogs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){from._impl_.logs_}
    , decltype(_impl_.total_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatLogs)
}

inline void ChatLogs::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.logs_){arena}
    , decltype(_impl_.total_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatLogs::~ChatLogs() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatLogs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatLogs::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_logs()->~RepeatedPtrField();
}

void ChatLogs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatLogs::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatLogs)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_logs()->Clear();
  _impl_.total_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatLogs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .sro.chat.ChatLog logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatLogs::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatLogs)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_total(), target);
  }

  // repeated .sro.chat.ChatLog logs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatLogs)
  return target;
}

::size_t ChatLogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatLogs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.chat.ChatLog logs = 2;
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->_internal_logs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatLogs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatLogs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatLogs::GetClassData() const { return &_class_data_; }


void ChatLogs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatLogs*>(&to_msg);
  auto& from = static_cast<const ChatLogs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatLogs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_logs()->MergeFrom(from._internal_logs());
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatLogs::CopyFrom(const ChatLogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatLogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatLogs::IsInitialized() const {
  return true;
}

void ChatLogs::InternalSwap(ChatLogs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_logs()->InternalSwap(other->_internal_mutable_logs());

  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatLogs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[2]);
}
// ===================================================================

class BanRequest::_Internal {
 public:
};

BanRequest::BanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.BanRequest)
}
BanRequest::BanRequest(const BanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BanRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.duration_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character_id().empty()) {
    _this->_impl_.character_id_.Set(from._internal_character_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.duration_ = from._impl_.duration_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.BanRequest)
}

inline void BanRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.character_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.duration_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BanRequest::~BanRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.BanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BanRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.character_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void BanRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.BanRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.duration_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_character_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.BanRequest.character_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.BanRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BanRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.BanRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.BanRequest.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.BanRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.BanRequest)
  return target;
}

::size_t BanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.BanRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // string channel_id = 2;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // int64 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_duration());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BanRequest::GetClassData() const { return &_class_data_; }


void BanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BanRequest*>(&to_msg);
  auto& from = static_cast<const BanRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.BanRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BanRequest::CopyFrom(const BanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.BanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BanRequest::IsInitialized() const {
  return true;
}

void BanRequest::InternalSwap(BanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, lhs_arena,
                                       &other->_impl_.character_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);

  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[3]);
}
// ===================================================================

class ConnectChatChannelRequest::_Internal {
 public:
};

ConnectChatChannelRequest::ConnectChatChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ConnectChatChannelRequest)
}
ConnectChatChannelRequest::ConnectChatChannelRequest(const ConnectChatChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectChatChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.character_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character_id().empty()) {
    _this->_impl_.character_id_.Set(from._internal_character_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.ConnectChatChannelRequest)
}

inline void ConnectChatChannelRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.character_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectChatChannelRequest::~ConnectChatChannelRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.ConnectChatChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectChatChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.character_id_.Destroy();
}

void ConnectChatChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectChatChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ConnectChatChannelRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.character_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectChatChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ConnectChatChannelRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string character_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_character_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ConnectChatChannelRequest.character_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConnectChatChannelRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ConnectChatChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ConnectChatChannelRequest.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string character_id = 2;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ConnectChatChannelRequest.character_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ConnectChatChannelRequest)
  return target;
}

::size_t ConnectChatChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ConnectChatChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string character_id = 2;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectChatChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectChatChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectChatChannelRequest::GetClassData() const { return &_class_data_; }


void ConnectChatChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectChatChannelRequest*>(&to_msg);
  auto& from = static_cast<const ConnectChatChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ConnectChatChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectChatChannelRequest::CopyFrom(const ConnectChatChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ConnectChatChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectChatChannelRequest::IsInitialized() const {
  return true;
}

void ConnectChatChannelRequest::InternalSwap(ConnectChatChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, lhs_arena,
                                       &other->_impl_.character_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectChatChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[4]);
}
// ===================================================================

class RequestSetCharacterSetChatChannelAuth::_Internal {
 public:
};

RequestSetCharacterSetChatChannelAuth::RequestSetCharacterSetChatChannelAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.RequestSetCharacterSetChatChannelAuth)
}
RequestSetCharacterSetChatChannelAuth::RequestSetCharacterSetChatChannelAuth(const RequestSetCharacterSetChatChannelAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestSetCharacterSetChatChannelAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.character_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character_id().empty()) {
    _this->_impl_.character_id_.Set(from._internal_character_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.RequestSetCharacterSetChatChannelAuth)
}

inline void RequestSetCharacterSetChatChannelAuth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.character_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestSetCharacterSetChatChannelAuth::~RequestSetCharacterSetChatChannelAuth() {
  // @@protoc_insertion_point(destructor:sro.chat.RequestSetCharacterSetChatChannelAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestSetCharacterSetChatChannelAuth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ids()->~RepeatedPtrField();
  _impl_.character_id_.Destroy();
}

void RequestSetCharacterSetChatChannelAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestSetCharacterSetChatChannelAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.RequestSetCharacterSetChatChannelAuth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ids()->Clear();
  _impl_.character_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSetCharacterSetChatChannelAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_character_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.RequestSetCharacterSetChatChannelAuth.character_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.chat.RequestSetCharacterSetChatChannelAuth.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestSetCharacterSetChatChannelAuth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.RequestSetCharacterSetChatChannelAuth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.RequestSetCharacterSetChatChannelAuth.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string ids = 2;
  for (int i = 0, n = this->_internal_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.RequestSetCharacterSetChatChannelAuth.ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.RequestSetCharacterSetChatChannelAuth)
  return target;
}

::size_t RequestSetCharacterSetChatChannelAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.RequestSetCharacterSetChatChannelAuth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 2;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_ids().size());
  for (int i = 0, n = _internal_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_ids().Get(i));
  }

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestSetCharacterSetChatChannelAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestSetCharacterSetChatChannelAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestSetCharacterSetChatChannelAuth::GetClassData() const { return &_class_data_; }


void RequestSetCharacterSetChatChannelAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestSetCharacterSetChatChannelAuth*>(&to_msg);
  auto& from = static_cast<const RequestSetCharacterSetChatChannelAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.RequestSetCharacterSetChatChannelAuth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ids()->MergeFrom(from._internal_ids());
  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestSetCharacterSetChatChannelAuth::CopyFrom(const RequestSetCharacterSetChatChannelAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.RequestSetCharacterSetChatChannelAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSetCharacterSetChatChannelAuth::IsInitialized() const {
  return true;
}

void RequestSetCharacterSetChatChannelAuth::InternalSwap(RequestSetCharacterSetChatChannelAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_ids()->InternalSwap(
      other->_internal_mutable_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, lhs_arena,
                                       &other->_impl_.character_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSetCharacterSetChatChannelAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[5]);
}
// ===================================================================

class RequestUpdateCharacterSetChatChannelAuth::_Internal {
 public:
};

RequestUpdateCharacterSetChatChannelAuth::RequestUpdateCharacterSetChatChannelAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
}
RequestUpdateCharacterSetChatChannelAuth::RequestUpdateCharacterSetChatChannelAuth(const RequestUpdateCharacterSetChatChannelAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestUpdateCharacterSetChatChannelAuth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){from._impl_.ids_}
    , decltype(_impl_.character_id_) {}

    , decltype(_impl_.add_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character_id().empty()) {
    _this->_impl_.character_id_.Set(from._internal_character_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.add_ = from._impl_.add_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
}

inline void RequestUpdateCharacterSetChatChannelAuth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_){arena}
    , decltype(_impl_.character_id_) {}

    , decltype(_impl_.add_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestUpdateCharacterSetChatChannelAuth::~RequestUpdateCharacterSetChatChannelAuth() {
  // @@protoc_insertion_point(destructor:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestUpdateCharacterSetChatChannelAuth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ids()->~RepeatedPtrField();
  _impl_.character_id_.Destroy();
}

void RequestUpdateCharacterSetChatChannelAuth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestUpdateCharacterSetChatChannelAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ids()->Clear();
  _impl_.character_id_.ClearToEmpty();
  _impl_.add_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestUpdateCharacterSetChatChannelAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_character_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.RequestUpdateCharacterSetChatChannelAuth.character_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool add = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.add_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "sro.chat.RequestUpdateCharacterSetChatChannelAuth.ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestUpdateCharacterSetChatChannelAuth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.RequestUpdateCharacterSetChatChannelAuth.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool add = 2;
  if (this->_internal_add() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_add(), target);
  }

  // repeated string ids = 3;
  for (int i = 0, n = this->_internal_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.RequestUpdateCharacterSetChatChannelAuth.ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
  return target;
}

::size_t RequestUpdateCharacterSetChatChannelAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 3;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_ids().size());
  for (int i = 0, n = _internal_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_ids().Get(i));
  }

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // bool add = 2;
  if (this->_internal_add() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestUpdateCharacterSetChatChannelAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestUpdateCharacterSetChatChannelAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestUpdateCharacterSetChatChannelAuth::GetClassData() const { return &_class_data_; }


void RequestUpdateCharacterSetChatChannelAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestUpdateCharacterSetChatChannelAuth*>(&to_msg);
  auto& from = static_cast<const RequestUpdateCharacterSetChatChannelAuth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ids()->MergeFrom(from._internal_ids());
  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if (from._internal_add() != 0) {
    _this->_internal_set_add(from._internal_add());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestUpdateCharacterSetChatChannelAuth::CopyFrom(const RequestUpdateCharacterSetChatChannelAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.RequestUpdateCharacterSetChatChannelAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpdateCharacterSetChatChannelAuth::IsInitialized() const {
  return true;
}

void RequestUpdateCharacterSetChatChannelAuth::InternalSwap(RequestUpdateCharacterSetChatChannelAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_ids()->InternalSwap(
      other->_internal_mutable_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, lhs_arena,
                                       &other->_impl_.character_id_, rhs_arena);

  swap(_impl_.add_, other->_impl_.add_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestUpdateCharacterSetChatChannelAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[6]);
}
// ===================================================================

class ChatChannel::_Internal {
 public:
};

ChatChannel::ChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatChannel)
}
ChatChannel::ChatChannel(const ChatChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_id_) {}

    , decltype(_impl_.public__) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension_id().empty()) {
    _this->_impl_.dimension_id_.Set(from._internal_dimension_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.public__ = from._impl_.public__;
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatChannel)
}

inline void ChatChannel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_id_) {}

    , decltype(_impl_.public__) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatChannel::~ChatChannel() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatChannel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.dimension_id_.Destroy();
}

void ChatChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatChannel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.dimension_id_.ClearToEmpty();
  _impl_.public__ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatChannel.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatChannel.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dimension_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatChannel.dimension_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatChannel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatChannel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatChannel.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatChannel.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string dimension_id = 3;
  if (!this->_internal_dimension_id().empty()) {
    const std::string& _s = this->_internal_dimension_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatChannel.dimension_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool public = 4;
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_public_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatChannel)
  return target;
}

::size_t ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatChannel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string dimension_id = 3;
  if (!this->_internal_dimension_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dimension_id());
  }

  // bool public = 4;
  if (this->_internal_public_() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatChannel::GetClassData() const { return &_class_data_; }


void ChatChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatChannel*>(&to_msg);
  auto& from = static_cast<const ChatChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatChannel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_dimension_id().empty()) {
    _this->_internal_set_dimension_id(from._internal_dimension_id());
  }
  if (from._internal_public_() != 0) {
    _this->_internal_set_public_(from._internal_public_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatChannel::CopyFrom(const ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannel::IsInitialized() const {
  return true;
}

void ChatChannel::InternalSwap(ChatChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dimension_id_, lhs_arena,
                                       &other->_impl_.dimension_id_, rhs_arena);

  swap(_impl_.public__, other->_impl_.public__);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[7]);
}
// ===================================================================

class ChatChannels::_Internal {
 public:
};

ChatChannels::ChatChannels(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatChannels)
}
ChatChannels::ChatChannels(const ChatChannels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatChannels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatChannels)
}

inline void ChatChannels::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatChannels::~ChatChannels() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatChannels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatChannels::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_channels()->~RepeatedPtrField();
}

void ChatChannels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatChannels::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatChannels)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_channels()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatChannels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.chat.ChatChannel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatChannels::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatChannels)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.chat.ChatChannel channels = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatChannels)
  return target;
}

::size_t ChatChannels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatChannels)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.chat.ChatChannel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_internal_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatChannels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatChannels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatChannels::GetClassData() const { return &_class_data_; }


void ChatChannels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatChannels*>(&to_msg);
  auto& from = static_cast<const ChatChannels&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatChannels)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channels()->MergeFrom(from._internal_channels());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatChannels::CopyFrom(const ChatChannels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatChannels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatChannels::IsInitialized() const {
  return true;
}

void ChatChannels::InternalSwap(ChatChannels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_channels()->InternalSwap(other->_internal_mutable_channels());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatChannels::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[8]);
}
// ===================================================================

class CreateChatChannelMessage::_Internal {
 public:
};

CreateChatChannelMessage::CreateChatChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.CreateChatChannelMessage)
}
CreateChatChannelMessage::CreateChatChannelMessage(const CreateChatChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateChatChannelMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension_id().empty()) {
    _this->_impl_.dimension_id_.Set(from._internal_dimension_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.CreateChatChannelMessage)
}

inline void CreateChatChannelMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.dimension_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateChatChannelMessage::~CreateChatChannelMessage() {
  // @@protoc_insertion_point(destructor:sro.chat.CreateChatChannelMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateChatChannelMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.dimension_id_.Destroy();
}

void CreateChatChannelMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateChatChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.CreateChatChannelMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.dimension_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateChatChannelMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.CreateChatChannelMessage.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dimension_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.CreateChatChannelMessage.dimension_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateChatChannelMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.CreateChatChannelMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.CreateChatChannelMessage.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string dimension_id = 2;
  if (!this->_internal_dimension_id().empty()) {
    const std::string& _s = this->_internal_dimension_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.CreateChatChannelMessage.dimension_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.CreateChatChannelMessage)
  return target;
}

::size_t CreateChatChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.CreateChatChannelMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string dimension_id = 2;
  if (!this->_internal_dimension_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dimension_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateChatChannelMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateChatChannelMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateChatChannelMessage::GetClassData() const { return &_class_data_; }


void CreateChatChannelMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateChatChannelMessage*>(&to_msg);
  auto& from = static_cast<const CreateChatChannelMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.CreateChatChannelMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_dimension_id().empty()) {
    _this->_internal_set_dimension_id(from._internal_dimension_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateChatChannelMessage::CopyFrom(const CreateChatChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.CreateChatChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatChannelMessage::IsInitialized() const {
  return true;
}

void CreateChatChannelMessage::InternalSwap(CreateChatChannelMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dimension_id_, lhs_arena,
                                       &other->_impl_.dimension_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateChatChannelMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[9]);
}
// ===================================================================

class ChatMessage::_Internal {
 public:
};

ChatMessage::ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.ChatMessage)
}
ChatMessage::ChatMessage(const ChatMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_character_id_) {}

    , decltype(_impl_.content_) {}

    , decltype(_impl_.sent_time_ms_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_character_id().empty()) {
    _this->_impl_.sender_character_id_.Set(from._internal_sender_character_id(), _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sent_time_ms_ = from._impl_.sent_time_ms_;
  // @@protoc_insertion_point(copy_constructor:sro.chat.ChatMessage)
}

inline void ChatMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_character_id_) {}

    , decltype(_impl_.content_) {}

    , decltype(_impl_.sent_time_ms_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:sro.chat.ChatMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_character_id_.Destroy();
  _impl_.content_.Destroy();
}

void ChatMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.ChatMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_character_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.sent_time_ms_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender_character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender_character_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatMessage.sender_character_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.ChatMessage.content"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 sent_time_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sent_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChatMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.ChatMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender_character_id = 1;
  if (!this->_internal_sender_character_id().empty()) {
    const std::string& _s = this->_internal_sender_character_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatMessage.sender_character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.ChatMessage.content");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 sent_time_ms = 3;
  if (this->_internal_sent_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_sent_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.ChatMessage)
  return target;
}

::size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.ChatMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender_character_id = 1;
  if (!this->_internal_sender_character_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_character_id());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_content());
  }

  // int64 sent_time_ms = 3;
  if (this->_internal_sent_time_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_sent_time_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessage::GetClassData() const { return &_class_data_; }


void ChatMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.ChatMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender_character_id().empty()) {
    _this->_internal_set_sender_character_id(from._internal_sender_character_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_sent_time_ms() != 0) {
    _this->_internal_set_sent_time_ms(from._internal_sent_time_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {
  return true;
}

void ChatMessage::InternalSwap(ChatMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_character_id_, lhs_arena,
                                       &other->_impl_.sender_character_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);

  swap(_impl_.sent_time_ms_, other->_impl_.sent_time_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[10]);
}
// ===================================================================

class SendChatChannelMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChatChannelMessageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SendChatChannelMessageRequest, _impl_._has_bits_);
  static const ::sro::chat::ChatMessage& chat_message(const SendChatChannelMessageRequest* msg);
  static void set_has_chat_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::chat::ChatMessage&
SendChatChannelMessageRequest::_Internal::chat_message(const SendChatChannelMessageRequest* msg) {
  return *msg->_impl_.chat_message_;
}
SendChatChannelMessageRequest::SendChatChannelMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.SendChatChannelMessageRequest)
}
SendChatChannelMessageRequest::SendChatChannelMessageRequest(const SendChatChannelMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendChatChannelMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.chat_message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.chat_message_ = new ::sro::chat::ChatMessage(*from._impl_.chat_message_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.SendChatChannelMessageRequest)
}

inline void SendChatChannelMessageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.chat_message_){nullptr}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendChatChannelMessageRequest::~SendChatChannelMessageRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.SendChatChannelMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChatChannelMessageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chat_message_;
}

void SendChatChannelMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendChatChannelMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.SendChatChannelMessageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.chat_message_ != nullptr);
    _impl_.chat_message_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendChatChannelMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.SendChatChannelMessageRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.chat.ChatMessage chat_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SendChatChannelMessageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.SendChatChannelMessageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.SendChatChannelMessageRequest.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.chat.ChatMessage chat_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chat_message(this),
        _Internal::chat_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.SendChatChannelMessageRequest)
  return target;
}

::size_t SendChatChannelMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.SendChatChannelMessageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // .sro.chat.ChatMessage chat_message = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendChatChannelMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendChatChannelMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendChatChannelMessageRequest::GetClassData() const { return &_class_data_; }


void SendChatChannelMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendChatChannelMessageRequest*>(&to_msg);
  auto& from = static_cast<const SendChatChannelMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.SendChatChannelMessageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_chat_message()->::sro::chat::ChatMessage::MergeFrom(
        from._internal_chat_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendChatChannelMessageRequest::CopyFrom(const SendChatChannelMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.SendChatChannelMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatChannelMessageRequest::IsInitialized() const {
  return true;
}

void SendChatChannelMessageRequest::InternalSwap(SendChatChannelMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  swap(_impl_.chat_message_, other->_impl_.chat_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendChatChannelMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[11]);
}
// ===================================================================

class SendDirectMessageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SendDirectMessageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SendDirectMessageRequest, _impl_._has_bits_);
  static const ::sro::chat::ChatMessage& chat_message(const SendDirectMessageRequest* msg);
  static void set_has_chat_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::chat::ChatMessage&
SendDirectMessageRequest::_Internal::chat_message(const SendDirectMessageRequest* msg) {
  return *msg->_impl_.chat_message_;
}
SendDirectMessageRequest::SendDirectMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.SendDirectMessageRequest)
}
SendDirectMessageRequest::SendDirectMessageRequest(const SendDirectMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendDirectMessageRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_id_) {}

    , decltype(_impl_.chat_message_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character_id().empty()) {
    _this->_impl_.character_id_.Set(from._internal_character_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.chat_message_ = new ::sro::chat::ChatMessage(*from._impl_.chat_message_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.SendDirectMessageRequest)
}

inline void SendDirectMessageRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_id_) {}

    , decltype(_impl_.chat_message_){nullptr}
  };
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendDirectMessageRequest::~SendDirectMessageRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.SendDirectMessageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendDirectMessageRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.character_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chat_message_;
}

void SendDirectMessageRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendDirectMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.SendDirectMessageRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.chat_message_ != nullptr);
    _impl_.chat_message_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendDirectMessageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_character_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.SendDirectMessageRequest.character_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.chat.ChatMessage chat_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat_message(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SendDirectMessageRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.SendDirectMessageRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.SendDirectMessageRequest.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.chat.ChatMessage chat_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chat_message(this),
        _Internal::chat_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.SendDirectMessageRequest)
  return target;
}

::size_t SendDirectMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.SendDirectMessageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // .sro.chat.ChatMessage chat_message = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendDirectMessageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendDirectMessageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendDirectMessageRequest::GetClassData() const { return &_class_data_; }


void SendDirectMessageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendDirectMessageRequest*>(&to_msg);
  auto& from = static_cast<const SendDirectMessageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.SendDirectMessageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_chat_message()->::sro::chat::ChatMessage::MergeFrom(
        from._internal_chat_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendDirectMessageRequest::CopyFrom(const SendDirectMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.SendDirectMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDirectMessageRequest::IsInitialized() const {
  return true;
}

void SendDirectMessageRequest::InternalSwap(SendDirectMessageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, lhs_arena,
                                       &other->_impl_.character_id_, rhs_arena);
  swap(_impl_.chat_message_, other->_impl_.chat_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendDirectMessageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[12]);
}
// ===================================================================

class UpdateChatChannelRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::sro::chat::UpdateChatChannelRequest, _impl_._oneof_case_);
};

UpdateChatChannelRequest::UpdateChatChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.chat.UpdateChatChannelRequest)
}
UpdateChatChannelRequest::UpdateChatChannelRequest(const UpdateChatChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateChatChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_dimension_){}
    , decltype(_impl_.optional_public_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  clear_has_optional_name();
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  clear_has_optional_dimension();
  switch (from.optional_dimension_case()) {
    case kDimension: {
      _this->_internal_set_dimension(from._internal_dimension());
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  clear_has_optional_public();
  switch (from.optional_public_case()) {
    case kPublic: {
      _this->_internal_set_public_(from._internal_public_());
      break;
    }
    case OPTIONAL_PUBLIC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sro.chat.UpdateChatChannelRequest)
}

inline void UpdateChatChannelRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.optional_name_){}
    , decltype(_impl_.optional_dimension_){}
    , decltype(_impl_.optional_public_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_optional_name();
  clear_has_optional_dimension();
  clear_has_optional_public();
}

UpdateChatChannelRequest::~UpdateChatChannelRequest() {
  // @@protoc_insertion_point(destructor:sro.chat.UpdateChatChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateChatChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  if (has_optional_name()) {
    clear_optional_name();
  }
  if (has_optional_dimension()) {
    clear_optional_dimension();
  }
  if (has_optional_public()) {
    clear_optional_public();
  }
}

void UpdateChatChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateChatChannelRequest::clear_optional_name() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.UpdateChatChannelRequest)
  switch (optional_name_case()) {
    case kName: {
      _impl_.optional_name_.name_.Destroy();
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_NAME_NOT_SET;
}

void UpdateChatChannelRequest::clear_optional_dimension() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.UpdateChatChannelRequest)
  switch (optional_dimension_case()) {
    case kDimension: {
      _impl_.optional_dimension_.dimension_.Destroy();
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_DIMENSION_NOT_SET;
}

void UpdateChatChannelRequest::clear_optional_public() {
// @@protoc_insertion_point(one_of_clear_start:sro.chat.UpdateChatChannelRequest)
  switch (optional_public_case()) {
    case kPublic: {
      // No need to clear
      break;
    }
    case OPTIONAL_PUBLIC_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_PUBLIC_NOT_SET;
}


void UpdateChatChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.chat.UpdateChatChannelRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  clear_optional_name();
  clear_optional_dimension();
  clear_optional_public();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateChatChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.UpdateChatChannelRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.UpdateChatChannelRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dimension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.chat.UpdateChatChannelRequest.dimension"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_public_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateChatChannelRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.chat.UpdateChatChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.UpdateChatChannelRequest.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (optional_name_case() == kName) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.UpdateChatChannelRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string dimension = 3;
  if (optional_dimension_case() == kDimension) {
    const std::string& _s = this->_internal_dimension();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.chat.UpdateChatChannelRequest.dimension");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool public = 4;
  if (optional_public_case() == kPublic) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_public_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.chat.UpdateChatChannelRequest)
  return target;
}

::size_t UpdateChatChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.chat.UpdateChatChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  switch (optional_name_case()) {
    // string name = 2;
    case kName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (optional_dimension_case()) {
    // string dimension = 3;
    case kDimension: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_dimension());
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  switch (optional_public_case()) {
    // bool public = 4;
    case kPublic: {
      total_size += 2;
      break;
    }
    case OPTIONAL_PUBLIC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateChatChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateChatChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateChatChannelRequest::GetClassData() const { return &_class_data_; }


void UpdateChatChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateChatChannelRequest*>(&to_msg);
  auto& from = static_cast<const UpdateChatChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.chat.UpdateChatChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  switch (from.optional_name_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case OPTIONAL_NAME_NOT_SET: {
      break;
    }
  }
  switch (from.optional_dimension_case()) {
    case kDimension: {
      _this->_internal_set_dimension(from._internal_dimension());
      break;
    }
    case OPTIONAL_DIMENSION_NOT_SET: {
      break;
    }
  }
  switch (from.optional_public_case()) {
    case kPublic: {
      _this->_internal_set_public_(from._internal_public_());
      break;
    }
    case OPTIONAL_PUBLIC_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateChatChannelRequest::CopyFrom(const UpdateChatChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.chat.UpdateChatChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateChatChannelRequest::IsInitialized() const {
  return true;
}

void UpdateChatChannelRequest::InternalSwap(UpdateChatChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  swap(_impl_.optional_name_, other->_impl_.optional_name_);
  swap(_impl_.optional_dimension_, other->_impl_.optional_dimension_);
  swap(_impl_.optional_public_, other->_impl_.optional_public_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateChatChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fchat_2fchat_2eproto_getter, &descriptor_table_sro_2fchat_2fchat_2eproto_once,
      file_level_metadata_sro_2fchat_2fchat_2eproto[13]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::chat::ChatLogRequest*
Arena::CreateMaybeMessage< ::sro::chat::ChatLogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatLogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatLog*
Arena::CreateMaybeMessage< ::sro::chat::ChatLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatLog >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatLogs*
Arena::CreateMaybeMessage< ::sro::chat::ChatLogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatLogs >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::BanRequest*
Arena::CreateMaybeMessage< ::sro::chat::BanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::BanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ConnectChatChannelRequest*
Arena::CreateMaybeMessage< ::sro::chat::ConnectChatChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ConnectChatChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::RequestSetCharacterSetChatChannelAuth*
Arena::CreateMaybeMessage< ::sro::chat::RequestSetCharacterSetChatChannelAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::RequestSetCharacterSetChatChannelAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::RequestUpdateCharacterSetChatChannelAuth*
Arena::CreateMaybeMessage< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatChannel*
Arena::CreateMaybeMessage< ::sro::chat::ChatChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatChannels*
Arena::CreateMaybeMessage< ::sro::chat::ChatChannels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatChannels >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::CreateChatChannelMessage*
Arena::CreateMaybeMessage< ::sro::chat::CreateChatChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::CreateChatChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::ChatMessage*
Arena::CreateMaybeMessage< ::sro::chat::ChatMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::ChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::SendChatChannelMessageRequest*
Arena::CreateMaybeMessage< ::sro::chat::SendChatChannelMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::SendChatChannelMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::SendDirectMessageRequest*
Arena::CreateMaybeMessage< ::sro::chat::SendDirectMessageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::SendDirectMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::chat::UpdateChatChannelRequest*
Arena::CreateMaybeMessage< ::sro::chat::UpdateChatChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::chat::UpdateChatChannelRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
