// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/chat/chat.proto

#include "sro/chat/chat.pb.h"
#include "sro/chat/chat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sro {
namespace chat {

static const char* ChatService_method_names[] = {
  "/sro.chat.ChatService/ConnectChatChannel",
  "/sro.chat.ChatService/ConnectDirectMessages",
  "/sro.chat.ChatService/SendChatChannelMessage",
  "/sro.chat.ChatService/SendDirectMessage",
  "/sro.chat.ChatService/GetChatChannels",
  "/sro.chat.ChatService/GetChatChannel",
  "/sro.chat.ChatService/CreateChatChannel",
  "/sro.chat.ChatService/DeleteChatChannel",
  "/sro.chat.ChatService/EditChatChannel",
  "/sro.chat.ChatService/GetAuthorizedChatChannels",
  "/sro.chat.ChatService/SetCharacterChatChannelAuth",
  "/sro.chat.ChatService/UpdateCharacterChatChannelAuth",
  "/sro.chat.ChatService/BanCharacterFromChatChannel",
  "/sro.chat.ChatService/GetChatLogs",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel, options));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ConnectChatChannel_(ChatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ConnectDirectMessages_(ChatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendChatChannelMessage_(ChatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendDirectMessage_(ChatService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChatChannels_(ChatService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChatChannel_(ChatService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateChatChannel_(ChatService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteChatChannel_(ChatService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditChatChannel_(ChatService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAuthorizedChatChannels_(ChatService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCharacterChatChannelAuth_(ChatService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCharacterChatChannelAuth_(ChatService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BanCharacterFromChatChannel_(ChatService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChatLogs_(ChatService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::sro::chat::ChatMessage>* ChatService::Stub::ConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), rpcmethod_ConnectChatChannel_, context, request);
}

void ChatService::Stub::async::ConnectChatChannel(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sro::chat::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectChatChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::AsyncConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectChatChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::PrepareAsyncConnectChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::ConnectChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectChatChannel_, context, request, false, nullptr);
}

::grpc::ClientReader< ::sro::chat::ChatMessage>* ChatService::Stub::ConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request) {
  return ::grpc::internal::ClientReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), rpcmethod_ConnectDirectMessages_, context, request);
}

void ChatService::Stub::async::ConnectDirectMessages(::grpc::ClientContext* context, const ::sro::TargetId* request, ::grpc::ClientReadReactor< ::sro::chat::ChatMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::sro::chat::ChatMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectDirectMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::AsyncConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectDirectMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::sro::chat::ChatMessage>* ChatService::Stub::PrepareAsyncConnectDirectMessagesRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::sro::chat::ChatMessage>::Create(channel_.get(), cq, rpcmethod_ConnectDirectMessages_, context, request, false, nullptr);
}

::grpc::Status ChatService::Stub::SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendChatChannelMessage_, context, request, response);
}

void ChatService::Stub::async::SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendChatChannelMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::SendChatChannelMessage(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendChatChannelMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncSendChatChannelMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::SendChatChannelMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendChatChannelMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncSendChatChannelMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendChatChannelMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendChatChannelMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendDirectMessage_, context, request, response);
}

void ChatService::Stub::async::SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDirectMessage_, context, request, response, std::move(f));
}

void ChatService::Stub::async::SendDirectMessage(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendDirectMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::SendDirectMessageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendDirectMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncSendDirectMessageRaw(::grpc::ClientContext* context, const ::sro::chat::SendDirectMessageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendDirectMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::sro::chat::ChatChannels* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChatChannels_, context, request, response);
}

void ChatService::Stub::async::GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatChannels_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetChatChannels(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* ChatService::Stub::PrepareAsyncGetChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannels, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChatChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* ChatService::Stub::AsyncGetChatChannelsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChatChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChatChannel_, context, request, response);
}

void ChatService::Stub::async::GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::PrepareAsyncGetChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannel, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChatChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::AsyncGetChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChatChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::sro::chat::ChatChannel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateChatChannel_, context, request, response);
}

void ChatService::Stub::async::CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::CreateChatChannel(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateChatChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::PrepareAsyncCreateChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannel, ::sro::chat::CreateChatChannelMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateChatChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::AsyncCreateChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::CreateChatChannelMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateChatChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteChatChannel_, context, request, response);
}

void ChatService::Stub::async::DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChatChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::DeleteChatChannel(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteChatChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::PrepareAsyncDeleteChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannel, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteChatChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::AsyncDeleteChatChannelRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteChatChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::sro::chat::ChatChannel* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditChatChannel_, context, request, response);
}

void ChatService::Stub::async::EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditChatChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::EditChatChannel(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditChatChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::PrepareAsyncEditChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannel, ::sro::chat::UpdateChatChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditChatChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannel>* ChatService::Stub::AsyncEditChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::UpdateChatChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditChatChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId& request, ::sro::chat::ChatChannels* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAuthorizedChatChannels_, context, request, response);
}

void ChatService::Stub::async::GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthorizedChatChannels_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetAuthorizedChatChannels(::grpc::ClientContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAuthorizedChatChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* ChatService::Stub::PrepareAsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatChannels, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAuthorizedChatChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatChannels>* ChatService::Stub::AsyncGetAuthorizedChatChannelsRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAuthorizedChatChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCharacterChatChannelAuth_, context, request, response);
}

void ChatService::Stub::async::SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCharacterChatChannelAuth_, context, request, response, std::move(f));
}

void ChatService::Stub::async::SetCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCharacterChatChannelAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncSetCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCharacterChatChannelAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncSetCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCharacterChatChannelAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCharacterChatChannelAuth_, context, request, response);
}

void ChatService::Stub::async::UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCharacterChatChannelAuth_, context, request, response, std::move(f));
}

void ChatService::Stub::async::UpdateCharacterChatChannelAuth(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCharacterChatChannelAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncUpdateCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCharacterChatChannelAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncUpdateCharacterChatChannelAuthRaw(::grpc::ClientContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCharacterChatChannelAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::BanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BanCharacterFromChatChannel_, context, request, response);
}

void ChatService::Stub::async::BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::BanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BanCharacterFromChatChannel_, context, request, response, std::move(f));
}

void ChatService::Stub::async::BanCharacterFromChatChannel(::grpc::ClientContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BanCharacterFromChatChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::PrepareAsyncBanCharacterFromChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::chat::BanRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BanCharacterFromChatChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ChatService::Stub::AsyncBanCharacterFromChatChannelRaw(::grpc::ClientContext* context, const ::sro::chat::BanRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBanCharacterFromChatChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::sro::chat::ChatLogs* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChatLogs_, context, request, response);
}

void ChatService::Stub::async::GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatLogs_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetChatLogs(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChatLogs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>* ChatService::Stub::PrepareAsyncGetChatLogsRaw(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::chat::ChatLogs, ::sro::chat::ChatLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChatLogs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::chat::ChatLogs>* ChatService::Stub::AsyncGetChatLogsRaw(::grpc::ClientContext* context, const ::sro::chat::ChatLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChatLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::sro::chat::ConnectChatChannelRequest, ::sro::chat::ChatMessage>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::ConnectChatChannelRequest* req,
             ::grpc::ServerWriter<::sro::chat::ChatMessage>* writer) {
               return service->ConnectChatChannel(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ChatService::Service, ::sro::TargetId, ::sro::chat::ChatMessage>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::grpc::ServerWriter<::sro::chat::ChatMessage>* writer) {
               return service->ConnectDirectMessages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::SendChatChannelMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::SendChatChannelMessageRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SendChatChannelMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::SendDirectMessageRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::SendDirectMessageRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->SendDirectMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::google::protobuf::Empty, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::sro::chat::ChatChannels* resp) {
               return service->GetChatChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::TargetId, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::chat::ChatChannel* resp) {
               return service->GetChatChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::CreateChatChannelMessage, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::CreateChatChannelMessage* req,
             ::sro::chat::ChatChannel* resp) {
               return service->CreateChatChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::TargetId, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::chat::ChatChannel* resp) {
               return service->DeleteChatChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::UpdateChatChannelRequest, ::sro::chat::ChatChannel, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::UpdateChatChannelRequest* req,
             ::sro::chat::ChatChannel* resp) {
               return service->EditChatChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::TargetId, ::sro::chat::ChatChannels, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::sro::chat::ChatChannels* resp) {
               return service->GetAuthorizedChatChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::RequestSetCharacterSetChatChannelAuth, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::RequestSetCharacterSetChatChannelAuth* req,
             ::google::protobuf::Empty* resp) {
               return service->SetCharacterChatChannelAuth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::RequestUpdateCharacterSetChatChannelAuth, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* req,
             ::google::protobuf::Empty* resp) {
               return service->UpdateCharacterChatChannelAuth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::BanRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::BanRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->BanCharacterFromChatChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::sro::chat::ChatLogRequest, ::sro::chat::ChatLogs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::chat::ChatLogRequest* req,
             ::sro::chat::ChatLogs* resp) {
               return service->GetChatLogs(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::ConnectChatChannel(::grpc::ServerContext* context, const ::sro::chat::ConnectChatChannelRequest* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::ConnectDirectMessages(::grpc::ServerContext* context, const ::sro::TargetId* request, ::grpc::ServerWriter< ::sro::chat::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SendChatChannelMessage(::grpc::ServerContext* context, const ::sro::chat::SendChatChannelMessageRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SendDirectMessage(::grpc::ServerContext* context, const ::sro::chat::SendDirectMessageRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetChatChannels(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::sro::chat::ChatChannels* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetChatChannel(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::CreateChatChannel(::grpc::ServerContext* context, const ::sro::chat::CreateChatChannelMessage* request, ::sro::chat::ChatChannel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::DeleteChatChannel(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::EditChatChannel(::grpc::ServerContext* context, const ::sro::chat::UpdateChatChannelRequest* request, ::sro::chat::ChatChannel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetAuthorizedChatChannels(::grpc::ServerContext* context, const ::sro::TargetId* request, ::sro::chat::ChatChannels* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::SetCharacterChatChannelAuth(::grpc::ServerContext* context, const ::sro::chat::RequestSetCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::UpdateCharacterChatChannelAuth(::grpc::ServerContext* context, const ::sro::chat::RequestUpdateCharacterSetChatChannelAuth* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::BanCharacterFromChatChannel(::grpc::ServerContext* context, const ::sro::chat::BanRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetChatLogs(::grpc::ServerContext* context, const ::sro::chat::ChatLogRequest* request, ::sro::chat::ChatLogs* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace chat

