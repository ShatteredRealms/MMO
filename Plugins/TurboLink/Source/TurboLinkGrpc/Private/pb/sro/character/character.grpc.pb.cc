// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/character/character.proto

#include "sro/character/character.pb.h"
#include "sro/character/character.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sro {
namespace character {

static const char* CharacterService_method_names[] = {
  "/sro.character.CharacterService/GetCharacter",
  "/sro.character.CharacterService/GetCharacters",
  "/sro.character.CharacterService/GetCharactersForUser",
  "/sro.character.CharacterService/CreateCharacter",
  "/sro.character.CharacterService/DeleteCharacter",
  "/sro.character.CharacterService/EditCharacter",
  "/sro.character.CharacterService/AddCharacterPlayTime",
};

std::unique_ptr< CharacterService::Stub> CharacterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CharacterService::Stub> stub(new CharacterService::Stub(channel, options));
  return stub;
}

CharacterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetCharacter_(CharacterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCharacters_(CharacterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCharactersForUser_(CharacterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCharacter_(CharacterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCharacter_(CharacterService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditCharacter_(CharacterService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCharacterPlayTime_(CharacterService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CharacterService::Stub::GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::sro::character::Character* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::GetCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharacter_, context, request, response);
}

void CharacterService::Stub::async::GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::GetCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Character>* CharacterService::Stub::PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::Character, ::sro::character::GetCharacterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Character>* CharacterService::Stub::AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::sro::character::Characters* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::GetCharactersRequest, ::sro::character::Characters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharacters_, context, request, response);
}

void CharacterService::Stub::async::GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::GetCharactersRequest, ::sro::character::Characters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacters_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharacters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* CharacterService::Stub::PrepareAsyncGetCharactersRaw(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::Characters, ::sro::character::GetCharactersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharacters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* CharacterService::Stub::AsyncGetCharactersRaw(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCharactersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::sro::character::Characters* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::GetUserCharactersRequest, ::sro::character::Characters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCharactersForUser_, context, request, response);
}

void CharacterService::Stub::async::GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::GetUserCharactersRequest, ::sro::character::Characters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharactersForUser_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCharactersForUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* CharacterService::Stub::PrepareAsyncGetCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::Characters, ::sro::character::GetUserCharactersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCharactersForUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* CharacterService::Stub::AsyncGetCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCharactersForUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::sro::character::Character* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::CreateCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCharacter_, context, request, response);
}

void CharacterService::Stub::async::CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::CreateCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Character>* CharacterService::Stub::PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::Character, ::sro::character::CreateCharacterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Character>* CharacterService::Stub::AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCharacter_, context, request, response);
}

void CharacterService::Stub::async::DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::TargetId, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::sro::character::Character* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::EditCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditCharacter_, context, request, response);
}

void CharacterService::Stub::async::EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::EditCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditCharacter_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditCharacter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Character>* CharacterService::Stub::PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sro::character::Character, ::sro::character::EditCharacterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditCharacter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sro::character::Character>* CharacterService::Stub::AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditCharacterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CharacterService::Stub::AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddCharacterPlayTime_, context, request, response);
}

void CharacterService::Stub::async::AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCharacterPlayTime_, context, request, response, std::move(f));
}

void CharacterService::Stub::async::AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCharacterPlayTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sro::character::AddPlayTimeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddCharacterPlayTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* CharacterService::Stub::AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

CharacterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::GetCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::GetCharacterRequest* req,
             ::sro::character::Character* resp) {
               return service->GetCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::GetCharactersRequest, ::sro::character::Characters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::GetCharactersRequest* req,
             ::sro::character::Characters* resp) {
               return service->GetCharacters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::GetUserCharactersRequest, ::sro::character::Characters, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::GetUserCharactersRequest* req,
             ::sro::character::Characters* resp) {
               return service->GetCharactersForUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::CreateCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::CreateCharacterRequest* req,
             ::sro::character::Character* resp) {
               return service->CreateCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::TargetId, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::TargetId* req,
             ::google::protobuf::Empty* resp) {
               return service->DeleteCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::EditCharacterRequest, ::sro::character::Character, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::EditCharacterRequest* req,
             ::sro::character::Character* resp) {
               return service->EditCharacter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CharacterService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CharacterService::Service, ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CharacterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sro::character::AddPlayTimeRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->AddCharacterPlayTime(ctx, req, resp);
             }, this)));
}

CharacterService::Service::~Service() {
}

::grpc::Status CharacterService::Service::GetCharacter(::grpc::ServerContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetCharacters(::grpc::ServerContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::GetCharactersForUser(::grpc::ServerContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::CreateCharacter(::grpc::ServerContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::DeleteCharacter(::grpc::ServerContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::EditCharacter(::grpc::ServerContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CharacterService::Service::AddCharacterPlayTime(::grpc::ServerContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sro
}  // namespace character

