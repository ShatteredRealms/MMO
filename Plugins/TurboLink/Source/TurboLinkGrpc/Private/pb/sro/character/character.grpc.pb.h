// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sro/character/character.proto
#ifndef GRPC_sro_2fcharacter_2fcharacter_2eproto__INCLUDED
#define GRPC_sro_2fcharacter_2fcharacter_2eproto__INCLUDED

#include "sro/character/character.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sro {
namespace character {

class CharacterService final {
 public:
  static constexpr char const* service_full_name() {
    return "sro.character.CharacterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::sro::character::Character* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>> AsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::sro::character::Characters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>> AsyncGetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>>(AsyncGetCharactersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>> PrepareAsyncGetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>>(PrepareAsyncGetCharactersRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::sro::character::Characters* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>> AsyncGetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>>(AsyncGetCharactersForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>> PrepareAsyncGetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>>(PrepareAsyncGetCharactersForUserRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::sro::character::Character* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    virtual ::grpc::Status EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::sro::character::Character* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>> AsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>>(AsyncEditCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>> PrepareAsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>>(PrepareAsyncEditCharacterRaw(context, request, cq));
    }
    // Adds the given amount of playtime to the character and returns the total
    // playtime
    virtual ::grpc::Status AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Adds the given amount of playtime to the character and returns the total
      // playtime
      virtual void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>* AsyncGetCharactersRaw(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>* PrepareAsyncGetCharactersRaw(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>* AsyncGetCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Characters>* PrepareAsyncGetCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>* AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sro::character::Character>* PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::sro::character::Character* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>> AsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>>(AsyncGetCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>> PrepareAsyncGetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>>(PrepareAsyncGetCharacterRaw(context, request, cq));
    }
    ::grpc::Status GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::sro::character::Characters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>> AsyncGetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>>(AsyncGetCharactersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>> PrepareAsyncGetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>>(PrepareAsyncGetCharactersRaw(context, request, cq));
    }
    ::grpc::Status GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::sro::character::Characters* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>> AsyncGetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>>(AsyncGetCharactersForUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>> PrepareAsyncGetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>>(PrepareAsyncGetCharactersForUserRaw(context, request, cq));
    }
    ::grpc::Status CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::sro::character::Character* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>> AsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>>(AsyncCreateCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>> PrepareAsyncCreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>>(PrepareAsyncCreateCharacterRaw(context, request, cq));
    }
    ::grpc::Status DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteCharacterRaw(context, request, cq));
    }
    ::grpc::Status EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::sro::character::Character* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>> AsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>>(AsyncEditCharacterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>> PrepareAsyncEditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sro::character::Character>>(PrepareAsyncEditCharacterRaw(context, request, cq));
    }
    ::grpc::Status AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAddCharacterPlayTimeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)>) override;
      void GetCharacter(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response, std::function<void(::grpc::Status)>) override;
      void GetCharacters(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response, std::function<void(::grpc::Status)>) override;
      void GetCharactersForUser(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)>) override;
      void CreateCharacter(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteCharacter(::grpc::ClientContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response, std::function<void(::grpc::Status)>) override;
      void EditCharacter(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddCharacterPlayTime(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sro::character::Character>* AsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Character>* PrepareAsyncGetCharacterRaw(::grpc::ClientContext* context, const ::sro::character::GetCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* AsyncGetCharactersRaw(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* PrepareAsyncGetCharactersRaw(::grpc::ClientContext* context, const ::sro::character::GetCharactersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* AsyncGetCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Characters>* PrepareAsyncGetCharactersForUserRaw(::grpc::ClientContext* context, const ::sro::character::GetUserCharactersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Character>* AsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Character>* PrepareAsyncCreateCharacterRaw(::grpc::ClientContext* context, const ::sro::character::CreateCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteCharacterRaw(::grpc::ClientContext* context, const ::sro::TargetId& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Character>* AsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sro::character::Character>* PrepareAsyncEditCharacterRaw(::grpc::ClientContext* context, const ::sro::character::EditCharacterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAddCharacterPlayTimeRaw(::grpc::ClientContext* context, const ::sro::character::AddPlayTimeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharacters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCharactersForUser_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_EditCharacter_;
    const ::grpc::internal::RpcMethod rpcmethod_AddCharacterPlayTime_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetCharacter(::grpc::ServerContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response);
    virtual ::grpc::Status GetCharacters(::grpc::ServerContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response);
    virtual ::grpc::Status GetCharactersForUser(::grpc::ServerContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response);
    virtual ::grpc::Status CreateCharacter(::grpc::ServerContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response);
    virtual ::grpc::Status DeleteCharacter(::grpc::ServerContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status EditCharacter(::grpc::ServerContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response);
    // Adds the given amount of playtime to the character and returns the total
    // playtime
    virtual ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharacter() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::sro::character::GetCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::Character>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharacters() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacters(::grpc::ServerContext* context, ::sro::character::GetCharactersRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::Characters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCharactersForUser() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::character::GetUserCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharactersForUser(::grpc::ServerContext* context, ::sro::character::GetUserCharactersRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::Characters>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::sro::character::CreateCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::Character>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::sro::TargetId* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditCharacter() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCharacter(::grpc::ServerContext* context, ::sro::character::EditCharacterRequest* request, ::grpc::ServerAsyncResponseWriter< ::sro::character::Character>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCharacterPlayTime(::grpc::ServerContext* context, ::sro::character::AddPlayTimeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCharacter<WithAsyncMethod_GetCharacters<WithAsyncMethod_GetCharactersForUser<WithAsyncMethod_CreateCharacter<WithAsyncMethod_DeleteCharacter<WithAsyncMethod_EditCharacter<WithAsyncMethod_AddCharacterPlayTime<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCharacter() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::GetCharacterRequest, ::sro::character::Character>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::GetCharacterRequest* request, ::sro::character::Character* response) { return this->GetCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharacter(
        ::grpc::MessageAllocator< ::sro::character::GetCharacterRequest, ::sro::character::Character>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::GetCharacterRequest, ::sro::character::Character>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::GetCharacterRequest* /*request*/, ::sro::character::Character* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCharacters() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::GetCharactersRequest, ::sro::character::Characters>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::GetCharactersRequest* request, ::sro::character::Characters* response) { return this->GetCharacters(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharacters(
        ::grpc::MessageAllocator< ::sro::character::GetCharactersRequest, ::sro::character::Characters>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::GetCharactersRequest, ::sro::character::Characters>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacters(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::GetCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCharactersForUser() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::GetUserCharactersRequest, ::sro::character::Characters>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::GetUserCharactersRequest* request, ::sro::character::Characters* response) { return this->GetCharactersForUser(context, request, response); }));}
    void SetMessageAllocatorFor_GetCharactersForUser(
        ::grpc::MessageAllocator< ::sro::character::GetUserCharactersRequest, ::sro::character::Characters>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::GetUserCharactersRequest, ::sro::character::Characters>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::character::GetUserCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharactersForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::GetUserCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::CreateCharacterRequest, ::sro::character::Character>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::CreateCharacterRequest* request, ::sro::character::Character* response) { return this->CreateCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCharacter(
        ::grpc::MessageAllocator< ::sro::character::CreateCharacterRequest, ::sro::character::Character>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::CreateCharacterRequest, ::sro::character::Character>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::Character* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::TargetId* request, ::google::protobuf::Empty* response) { return this->DeleteCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCharacter(
        ::grpc::MessageAllocator< ::sro::TargetId, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::TargetId, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditCharacter() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::EditCharacterRequest, ::sro::character::Character>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::EditCharacterRequest* request, ::sro::character::Character* response) { return this->EditCharacter(context, request, response); }));}
    void SetMessageAllocatorFor_EditCharacter(
        ::grpc::MessageAllocator< ::sro::character::EditCharacterRequest, ::sro::character::Character>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::EditCharacterRequest, ::sro::character::Character>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::sro::character::Character* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sro::character::AddPlayTimeRequest* request, ::google::protobuf::Empty* response) { return this->AddCharacterPlayTime(context, request, response); }));}
    void SetMessageAllocatorFor_AddCharacterPlayTime(
        ::grpc::MessageAllocator< ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCharacterPlayTime(
      ::grpc::CallbackServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetCharacter<WithCallbackMethod_GetCharacters<WithCallbackMethod_GetCharactersForUser<WithCallbackMethod_CreateCharacter<WithCallbackMethod_DeleteCharacter<WithCallbackMethod_EditCharacter<WithCallbackMethod_AddCharacterPlayTime<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharacter() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharacters() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCharactersForUser() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::character::GetUserCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditCharacter() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharacter() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharacters() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharacters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCharactersForUser() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::character::GetUserCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCharactersForUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditCharacter() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditCharacter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCharacterPlayTime(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCharacter() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCharacters() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharacters(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharacters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCharactersForUser() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCharactersForUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::character::GetUserCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCharactersForUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditCharacter() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditCharacter(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditCharacter(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCharacterPlayTime(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCharacterPlayTime(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharacter() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::GetCharacterRequest, ::sro::character::Character>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::GetCharacterRequest, ::sro::character::Character>* streamer) {
                       return this->StreamedGetCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::GetCharacterRequest,::sro::character::Character>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharacters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharacters() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::GetCharactersRequest, ::sro::character::Characters>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::GetCharactersRequest, ::sro::character::Characters>* streamer) {
                       return this->StreamedGetCharacters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharacters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharacters(::grpc::ServerContext* /*context*/, const ::sro::character::GetCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharacters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::GetCharactersRequest,::sro::character::Characters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCharactersForUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCharactersForUser() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::GetUserCharactersRequest, ::sro::character::Characters>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::GetUserCharactersRequest, ::sro::character::Characters>* streamer) {
                       return this->StreamedGetCharactersForUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCharactersForUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCharactersForUser(::grpc::ServerContext* /*context*/, const ::sro::character::GetUserCharactersRequest* /*request*/, ::sro::character::Characters* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCharactersForUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::GetUserCharactersRequest,::sro::character::Characters>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCharacter() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::CreateCharacterRequest, ::sro::character::Character>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::CreateCharacterRequest, ::sro::character::Character>* streamer) {
                       return this->StreamedCreateCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::CreateCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::CreateCharacterRequest,::sro::character::Character>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCharacter() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::TargetId, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::TargetId, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDeleteCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCharacter(::grpc::ServerContext* /*context*/, const ::sro::TargetId* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::TargetId,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditCharacter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditCharacter() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::EditCharacterRequest, ::sro::character::Character>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::EditCharacterRequest, ::sro::character::Character>* streamer) {
                       return this->StreamedEditCharacter(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditCharacter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditCharacter(::grpc::ServerContext* /*context*/, const ::sro::character::EditCharacterRequest* /*request*/, ::sro::character::Character* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditCharacter(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::EditCharacterRequest,::sro::character::Character>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCharacterPlayTime : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCharacterPlayTime() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sro::character::AddPlayTimeRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAddCharacterPlayTime(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCharacterPlayTime() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCharacterPlayTime(::grpc::ServerContext* /*context*/, const ::sro::character::AddPlayTimeRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCharacterPlayTime(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sro::character::AddPlayTimeRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_GetCharacters<WithStreamedUnaryMethod_GetCharactersForUser<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_EditCharacter<WithStreamedUnaryMethod_AddCharacterPlayTime<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCharacter<WithStreamedUnaryMethod_GetCharacters<WithStreamedUnaryMethod_GetCharactersForUser<WithStreamedUnaryMethod_CreateCharacter<WithStreamedUnaryMethod_DeleteCharacter<WithStreamedUnaryMethod_EditCharacter<WithStreamedUnaryMethod_AddCharacterPlayTime<Service > > > > > > > StreamedService;
};

}  // namespace character
}  // namespace sro


#endif  // GRPC_sro_2fcharacter_2fcharacter_2eproto__INCLUDED
