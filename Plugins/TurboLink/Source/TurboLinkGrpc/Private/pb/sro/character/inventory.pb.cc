#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/character/inventory.proto

#include "sro/character/inventory.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace character {
template <typename>
PROTOBUF_CONSTEXPR GetInventoryRequest::GetInventoryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.character_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mask_)*/nullptr} {}
struct GetInventoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInventoryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInventoryRequestDefaultTypeInternal() {}
  union {
    GetInventoryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInventoryRequestDefaultTypeInternal _GetInventoryRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetInventoryResponse::GetInventoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetInventoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInventoryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInventoryResponseDefaultTypeInternal() {}
  union {
    GetInventoryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInventoryResponseDefaultTypeInternal _GetInventoryResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.slot_)*/ 0u

  , /*decltype(_impl_.quantity_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
}  // namespace character
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fcharacter_2finventory_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fcharacter_2finventory_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fcharacter_2finventory_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fcharacter_2finventory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sro::character::GetInventoryRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetInventoryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::GetInventoryRequest, _impl_.mask_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetInventoryRequest, _impl_.character_id_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::character::GetInventoryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::GetInventoryResponse, _impl_.items_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::character::Item, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::Item, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Item, _impl_.slot_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Item, _impl_.quantity_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::sro::character::GetInventoryRequest)},
        { 12, -1, -1, sizeof(::sro::character::GetInventoryResponse)},
        { 21, -1, -1, sizeof(::sro::character::Item)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::character::_GetInventoryRequest_default_instance_._instance,
    &::sro::character::_GetInventoryResponse_default_instance_._instance,
    &::sro::character::_Item_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fcharacter_2finventory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035sro/character/inventory.proto\022\rsro.cha"
    "racter\032\034google/api/annotations.proto\032 go"
    "ogle/protobuf/field_mask.proto\"U\n\023GetInv"
    "entoryRequest\022(\n\004mask\030\001 \001(\0132\032.google.pro"
    "tobuf.FieldMask\022\024\n\014character_id\030\002 \001(\t\":\n"
    "\024GetInventoryResponse\022\"\n\005items\030\001 \003(\0132\023.s"
    "ro.character.Item\"2\n\004Item\022\n\n\002id\030\001 \001(\r\022\014\n"
    "\004slot\030\002 \001(\r\022\020\n\010quantity\030\003 \001(\r2\240\001\n\020Invent"
    "oryService\022\213\001\n\014GetInventory\022\".sro.charac"
    "ter.GetInventoryRequest\032#.sro.character."
    "GetInventoryResponse\"2\202\323\344\223\002,\022*/v1/charac"
    "ters/id/{character_id}/inventoryB8Z6gith"
    "ub.com/ShatteredRealms/character-service"
    "/pkg/pb;pbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fcharacter_2finventory_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fcharacter_2finventory_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fcharacter_2finventory_2eproto = {
    false,
    false,
    538,
    descriptor_table_protodef_sro_2fcharacter_2finventory_2eproto,
    "sro/character/inventory.proto",
    &descriptor_table_sro_2fcharacter_2finventory_2eproto_once,
    descriptor_table_sro_2fcharacter_2finventory_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_sro_2fcharacter_2finventory_2eproto::offsets,
    file_level_metadata_sro_2fcharacter_2finventory_2eproto,
    file_level_enum_descriptors_sro_2fcharacter_2finventory_2eproto,
    file_level_service_descriptors_sro_2fcharacter_2finventory_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fcharacter_2finventory_2eproto_getter() {
  return &descriptor_table_sro_2fcharacter_2finventory_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fcharacter_2finventory_2eproto(&descriptor_table_sro_2fcharacter_2finventory_2eproto);
namespace sro {
namespace character {
// ===================================================================

class GetInventoryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetInventoryRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetInventoryRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask(const GetInventoryRequest* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetInventoryRequest::_Internal::mask(const GetInventoryRequest* msg) {
  return *msg->_impl_.mask_;
}
void GetInventoryRequest::clear_mask() {
  if (_impl_.mask_ != nullptr) _impl_.mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetInventoryRequest::GetInventoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.GetInventoryRequest)
}
GetInventoryRequest::GetInventoryRequest(const GetInventoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInventoryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_id_) {}

    , decltype(_impl_.mask_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_character_id().empty()) {
    _this->_impl_.character_id_.Set(from._internal_character_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.character.GetInventoryRequest)
}

inline void GetInventoryRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.character_id_) {}

    , decltype(_impl_.mask_){nullptr}
  };
  _impl_.character_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.character_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInventoryRequest::~GetInventoryRequest() {
  // @@protoc_insertion_point(destructor:sro.character.GetInventoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInventoryRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.character_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mask_;
}

void GetInventoryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInventoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.GetInventoryRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.mask_ != nullptr);
    _impl_.mask_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInventoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string character_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_character_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.GetInventoryRequest.character_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetInventoryRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.GetInventoryRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.FieldMask mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // string character_id = 2;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.GetInventoryRequest.character_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.GetInventoryRequest)
  return target;
}

::size_t GetInventoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.GetInventoryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string character_id = 2;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // .google.protobuf.FieldMask mask = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInventoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInventoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInventoryRequest::GetClassData() const { return &_class_data_; }


void GetInventoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInventoryRequest*>(&to_msg);
  auto& from = static_cast<const GetInventoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.GetInventoryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInventoryRequest::CopyFrom(const GetInventoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.GetInventoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInventoryRequest::IsInitialized() const {
  return true;
}

void GetInventoryRequest::InternalSwap(GetInventoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, lhs_arena,
                                       &other->_impl_.character_id_, rhs_arena);
  swap(_impl_.mask_, other->_impl_.mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInventoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2finventory_2eproto_getter, &descriptor_table_sro_2fcharacter_2finventory_2eproto_once,
      file_level_metadata_sro_2fcharacter_2finventory_2eproto[0]);
}
// ===================================================================

class GetInventoryResponse::_Internal {
 public:
};

GetInventoryResponse::GetInventoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.GetInventoryResponse)
}
GetInventoryResponse::GetInventoryResponse(const GetInventoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetInventoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.character.GetInventoryResponse)
}

inline void GetInventoryResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetInventoryResponse::~GetInventoryResponse() {
  // @@protoc_insertion_point(destructor:sro.character.GetInventoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInventoryResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_items()->~RepeatedPtrField();
}

void GetInventoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetInventoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.GetInventoryResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_items()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInventoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sro.character.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetInventoryResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.GetInventoryResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sro.character.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.GetInventoryResponse)
  return target;
}

::size_t GetInventoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.GetInventoryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.character.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_internal_items()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInventoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetInventoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInventoryResponse::GetClassData() const { return &_class_data_; }


void GetInventoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetInventoryResponse*>(&to_msg);
  auto& from = static_cast<const GetInventoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.GetInventoryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(from._internal_items());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInventoryResponse::CopyFrom(const GetInventoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.GetInventoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInventoryResponse::IsInitialized() const {
  return true;
}

void GetInventoryResponse::InternalSwap(GetInventoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_items()->InternalSwap(other->_internal_mutable_items());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInventoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2finventory_2eproto_getter, &descriptor_table_sro_2fcharacter_2finventory_2eproto_once,
      file_level_metadata_sro_2fcharacter_2finventory_2eproto[1]);
}
// ===================================================================

class Item::_Internal {
 public:
};

Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sro.character.Item)
}

inline void Item::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { 0u }

    , decltype(_impl_.slot_) { 0u }

    , decltype(_impl_.quantity_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:sro.character.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.Item)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.quantity_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Item::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.Item)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // uint32 slot = 2;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_slot(), target);
  }

  // uint32 quantity = 3;
  if (this->_internal_quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.Item)
  return target;
}

::size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.Item)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 slot = 2;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_slot());
  }

  // uint32 quantity = 3;
  if (this->_internal_quantity() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_quantity());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.Item)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (from._internal_quantity() != 0) {
    _this->_internal_set_quantity(from._internal_quantity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, _impl_.quantity_)
      + sizeof(Item::_impl_.quantity_)
      - PROTOBUF_FIELD_OFFSET(Item, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2finventory_2eproto_getter, &descriptor_table_sro_2fcharacter_2finventory_2eproto_once,
      file_level_metadata_sro_2fcharacter_2finventory_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace character
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::character::GetInventoryRequest*
Arena::CreateMaybeMessage< ::sro::character::GetInventoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::GetInventoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::GetInventoryResponse*
Arena::CreateMaybeMessage< ::sro::character::GetInventoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::GetInventoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::Item*
Arena::CreateMaybeMessage< ::sro::character::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::Item >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
