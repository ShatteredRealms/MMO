#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/character/character.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sro_2fcharacter_2fcharacter_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sro_2fcharacter_2fcharacter_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/empty.pb.h"
#include "google/protobuf/field_mask.pb.h"
#include "sro/globals.pb.h"
#include "sro/filter.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sro_2fcharacter_2fcharacter_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sro_2fcharacter_2fcharacter_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sro_2fcharacter_2fcharacter_2eproto;
namespace sro {
namespace character {
class AddPlayTimeRequest;
struct AddPlayTimeRequestDefaultTypeInternal;
extern AddPlayTimeRequestDefaultTypeInternal _AddPlayTimeRequest_default_instance_;
class Character;
struct CharacterDefaultTypeInternal;
extern CharacterDefaultTypeInternal _Character_default_instance_;
class Characters;
struct CharactersDefaultTypeInternal;
extern CharactersDefaultTypeInternal _Characters_default_instance_;
class CreateCharacterRequest;
struct CreateCharacterRequestDefaultTypeInternal;
extern CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
class EditCharacterRequest;
struct EditCharacterRequestDefaultTypeInternal;
extern EditCharacterRequestDefaultTypeInternal _EditCharacterRequest_default_instance_;
class GetCharacterRequest;
struct GetCharacterRequestDefaultTypeInternal;
extern GetCharacterRequestDefaultTypeInternal _GetCharacterRequest_default_instance_;
class GetCharactersRequest;
struct GetCharactersRequestDefaultTypeInternal;
extern GetCharactersRequestDefaultTypeInternal _GetCharactersRequest_default_instance_;
class GetUserCharactersRequest;
struct GetUserCharactersRequestDefaultTypeInternal;
extern GetUserCharactersRequestDefaultTypeInternal _GetUserCharactersRequest_default_instance_;
}  // namespace character
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template <>
::sro::character::AddPlayTimeRequest* Arena::CreateMaybeMessage<::sro::character::AddPlayTimeRequest>(Arena*);
template <>
::sro::character::Character* Arena::CreateMaybeMessage<::sro::character::Character>(Arena*);
template <>
::sro::character::Characters* Arena::CreateMaybeMessage<::sro::character::Characters>(Arena*);
template <>
::sro::character::CreateCharacterRequest* Arena::CreateMaybeMessage<::sro::character::CreateCharacterRequest>(Arena*);
template <>
::sro::character::EditCharacterRequest* Arena::CreateMaybeMessage<::sro::character::EditCharacterRequest>(Arena*);
template <>
::sro::character::GetCharacterRequest* Arena::CreateMaybeMessage<::sro::character::GetCharacterRequest>(Arena*);
template <>
::sro::character::GetCharactersRequest* Arena::CreateMaybeMessage<::sro::character::GetCharactersRequest>(Arena*);
template <>
::sro::character::GetUserCharactersRequest* Arena::CreateMaybeMessage<::sro::character::GetUserCharactersRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sro {
namespace character {

// ===================================================================


// -------------------------------------------------------------------

class GetCharacterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.GetCharacterRequest) */ {
 public:
  inline GetCharacterRequest() : GetCharacterRequest(nullptr) {}
  ~GetCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCharacterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCharacterRequest(const GetCharacterRequest& from);
  GetCharacterRequest(GetCharacterRequest&& from) noexcept
    : GetCharacterRequest() {
    *this = ::std::move(from);
  }

  inline GetCharacterRequest& operator=(const GetCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterRequest& operator=(GetCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharacterRequest*>(
               &_GetCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetCharacterRequest& a, GetCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCharacterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCharacterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCharacterRequest& from) {
    GetCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.GetCharacterRequest";
  }
  protected:
  explicit GetCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kMaskFieldNumber = 1,
  };
  // string id = 2;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .google.protobuf.FieldMask mask = 1;
  bool has_mask() const;
  void clear_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();
  // @@protoc_insertion_point(class_scope:sro.character.GetCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};// -------------------------------------------------------------------

class GetCharactersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.GetCharactersRequest) */ {
 public:
  inline GetCharactersRequest() : GetCharactersRequest(nullptr) {}
  ~GetCharactersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCharactersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCharactersRequest(const GetCharactersRequest& from);
  GetCharactersRequest(GetCharactersRequest&& from) noexcept
    : GetCharactersRequest() {
    *this = ::std::move(from);
  }

  inline GetCharactersRequest& operator=(const GetCharactersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharactersRequest& operator=(GetCharactersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCharactersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCharactersRequest* internal_default_instance() {
    return reinterpret_cast<const GetCharactersRequest*>(
               &_GetCharactersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetCharactersRequest& a, GetCharactersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharactersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharactersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCharactersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCharactersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCharactersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCharactersRequest& from) {
    GetCharactersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharactersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.GetCharactersRequest";
  }
  protected:
  explicit GetCharactersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
    kFiltersFieldNumber = 2,
  };
  // .google.protobuf.FieldMask mask = 1;
  bool has_mask() const;
  void clear_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();
  // .sro.QueryFilters filters = 2;
  bool has_filters() const;
  void clear_filters() ;
  const ::sro::QueryFilters& filters() const;
  PROTOBUF_NODISCARD ::sro::QueryFilters* release_filters();
  ::sro::QueryFilters* mutable_filters();
  void set_allocated_filters(::sro::QueryFilters* filters);
  private:
  const ::sro::QueryFilters& _internal_filters() const;
  ::sro::QueryFilters* _internal_mutable_filters();
  public:
  void unsafe_arena_set_allocated_filters(
      ::sro::QueryFilters* filters);
  ::sro::QueryFilters* unsafe_arena_release_filters();
  // @@protoc_insertion_point(class_scope:sro.character.GetCharactersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
    ::sro::QueryFilters* filters_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};// -------------------------------------------------------------------

class GetUserCharactersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.GetUserCharactersRequest) */ {
 public:
  inline GetUserCharactersRequest() : GetUserCharactersRequest(nullptr) {}
  ~GetUserCharactersRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetUserCharactersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserCharactersRequest(const GetUserCharactersRequest& from);
  GetUserCharactersRequest(GetUserCharactersRequest&& from) noexcept
    : GetUserCharactersRequest() {
    *this = ::std::move(from);
  }

  inline GetUserCharactersRequest& operator=(const GetUserCharactersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserCharactersRequest& operator=(GetUserCharactersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserCharactersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserCharactersRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserCharactersRequest*>(
               &_GetUserCharactersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetUserCharactersRequest& a, GetUserCharactersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserCharactersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserCharactersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserCharactersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserCharactersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserCharactersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserCharactersRequest& from) {
    GetUserCharactersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserCharactersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.GetUserCharactersRequest";
  }
  protected:
  explicit GetUserCharactersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 3,
    kMaskFieldNumber = 1,
    kFiltersFieldNumber = 2,
  };
  // string owner_id = 3;
  void clear_owner_id() ;
  const std::string& owner_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* ptr);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // .google.protobuf.FieldMask mask = 1;
  bool has_mask() const;
  void clear_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();
  // .sro.QueryFilters filters = 2;
  bool has_filters() const;
  void clear_filters() ;
  const ::sro::QueryFilters& filters() const;
  PROTOBUF_NODISCARD ::sro::QueryFilters* release_filters();
  ::sro::QueryFilters* mutable_filters();
  void set_allocated_filters(::sro::QueryFilters* filters);
  private:
  const ::sro::QueryFilters& _internal_filters() const;
  ::sro::QueryFilters* _internal_mutable_filters();
  public:
  void unsafe_arena_set_allocated_filters(
      ::sro::QueryFilters* filters);
  ::sro::QueryFilters* unsafe_arena_release_filters();
  // @@protoc_insertion_point(class_scope:sro.character.GetUserCharactersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
    ::sro::QueryFilters* filters_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};// -------------------------------------------------------------------

class EditCharacterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.EditCharacterRequest) */ {
 public:
  inline EditCharacterRequest() : EditCharacterRequest(nullptr) {}
  ~EditCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EditCharacterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditCharacterRequest(const EditCharacterRequest& from);
  EditCharacterRequest(EditCharacterRequest&& from) noexcept
    : EditCharacterRequest() {
    *this = ::std::move(from);
  }

  inline EditCharacterRequest& operator=(const EditCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditCharacterRequest& operator=(EditCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EditCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const EditCharacterRequest*>(
               &_EditCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EditCharacterRequest& a, EditCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EditCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EditCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EditCharacterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EditCharacterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EditCharacterRequest& from) {
    EditCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditCharacterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.EditCharacterRequest";
  }
  protected:
  explicit EditCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaskFieldNumber = 1,
    kCharacterFieldNumber = 2,
  };
  // .google.protobuf.FieldMask mask = 1;
  bool has_mask() const;
  void clear_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();
  // .sro.character.Character character = 2;
  bool has_character() const;
  void clear_character() ;
  const ::sro::character::Character& character() const;
  PROTOBUF_NODISCARD ::sro::character::Character* release_character();
  ::sro::character::Character* mutable_character();
  void set_allocated_character(::sro::character::Character* character);
  private:
  const ::sro::character::Character& _internal_character() const;
  ::sro::character::Character* _internal_mutable_character();
  public:
  void unsafe_arena_set_allocated_character(
      ::sro::character::Character* character);
  ::sro::character::Character* unsafe_arena_release_character();
  // @@protoc_insertion_point(class_scope:sro.character.EditCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
    ::sro::character::Character* character_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};// -------------------------------------------------------------------

class CreateCharacterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.CreateCharacterRequest) */ {
 public:
  inline CreateCharacterRequest() : CreateCharacterRequest(nullptr) {}
  ~CreateCharacterRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterRequest(const CreateCharacterRequest& from);
  CreateCharacterRequest(CreateCharacterRequest&& from) noexcept
    : CreateCharacterRequest() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRequest& operator=(const CreateCharacterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRequest& operator=(CreateCharacterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRequest*>(
               &_CreateCharacterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateCharacterRequest& a, CreateCharacterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCharacterRequest& from) {
    CreateCharacterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.CreateCharacterRequest";
  }
  protected:
  explicit CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kGenderFieldNumber = 3,
    kRealmFieldNumber = 4,
    kDimensionIdFieldNumber = 5,
    kProfessionFieldNumber = 6,
  };
  // string owner_id = 1;
  void clear_owner_id() ;
  const std::string& owner_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* ptr);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string gender = 3;
  void clear_gender() ;
  const std::string& gender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gender(Arg_&& arg, Args_... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* ptr);

  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(
      const std::string& value);
  std::string* _internal_mutable_gender();

  public:
  // string realm = 4;
  void clear_realm() ;
  const std::string& realm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_realm(Arg_&& arg, Args_... args);
  std::string* mutable_realm();
  PROTOBUF_NODISCARD std::string* release_realm();
  void set_allocated_realm(std::string* ptr);

  private:
  const std::string& _internal_realm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_realm(
      const std::string& value);
  std::string* _internal_mutable_realm();

  public:
  // string dimension_id = 5;
  void clear_dimension_id() ;
  const std::string& dimension_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dimension_id(Arg_&& arg, Args_... args);
  std::string* mutable_dimension_id();
  PROTOBUF_NODISCARD std::string* release_dimension_id();
  void set_allocated_dimension_id(std::string* ptr);

  private:
  const std::string& _internal_dimension_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dimension_id(
      const std::string& value);
  std::string* _internal_mutable_dimension_id();

  public:
  // string profession = 6;
  void clear_profession() ;
  const std::string& profession() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profession(Arg_&& arg, Args_... args);
  std::string* mutable_profession();
  PROTOBUF_NODISCARD std::string* release_profession();
  void set_allocated_profession(std::string* ptr);

  private:
  const std::string& _internal_profession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profession(
      const std::string& value);
  std::string* _internal_mutable_profession();

  public:
  // @@protoc_insertion_point(class_scope:sro.character.CreateCharacterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr realm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dimension_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profession_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};// -------------------------------------------------------------------

class Character final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.Character) */ {
 public:
  inline Character() : Character(nullptr) {}
  ~Character() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Character(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Character(const Character& from);
  Character(Character&& from) noexcept
    : Character() {
    *this = ::std::move(from);
  }

  inline Character& operator=(const Character& from) {
    CopyFrom(from);
    return *this;
  }
  inline Character& operator=(Character&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Character& default_instance() {
    return *internal_default_instance();
  }
  static inline const Character* internal_default_instance() {
    return reinterpret_cast<const Character*>(
               &_Character_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Character& a, Character& b) {
    a.Swap(&b);
  }
  inline void Swap(Character* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Character* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Character* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Character>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Character& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Character& from) {
    Character::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Character* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.Character";
  }
  protected:
  explicit Character(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kGenderFieldNumber = 4,
    kRealmFieldNumber = 5,
    kDimensionIdFieldNumber = 8,
    kProfessionFieldNumber = 12,
    kLocationFieldNumber = 7,
    kCreatedAtFieldNumber = 9,
    kUpdatedAtFieldNumber = 10,
    kDeletedAtFieldNumber = 11,
    kPlayTimeFieldNumber = 6,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string owner_id = 2;
  void clear_owner_id() ;
  const std::string& owner_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner_id(Arg_&& arg, Args_... args);
  std::string* mutable_owner_id();
  PROTOBUF_NODISCARD std::string* release_owner_id();
  void set_allocated_owner_id(std::string* ptr);

  private:
  const std::string& _internal_owner_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner_id(
      const std::string& value);
  std::string* _internal_mutable_owner_id();

  public:
  // string name = 3;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string gender = 4;
  void clear_gender() ;
  const std::string& gender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gender(Arg_&& arg, Args_... args);
  std::string* mutable_gender();
  PROTOBUF_NODISCARD std::string* release_gender();
  void set_allocated_gender(std::string* ptr);

  private:
  const std::string& _internal_gender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gender(
      const std::string& value);
  std::string* _internal_mutable_gender();

  public:
  // string realm = 5;
  void clear_realm() ;
  const std::string& realm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_realm(Arg_&& arg, Args_... args);
  std::string* mutable_realm();
  PROTOBUF_NODISCARD std::string* release_realm();
  void set_allocated_realm(std::string* ptr);

  private:
  const std::string& _internal_realm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_realm(
      const std::string& value);
  std::string* _internal_mutable_realm();

  public:
  // string dimension_id = 8;
  void clear_dimension_id() ;
  const std::string& dimension_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dimension_id(Arg_&& arg, Args_... args);
  std::string* mutable_dimension_id();
  PROTOBUF_NODISCARD std::string* release_dimension_id();
  void set_allocated_dimension_id(std::string* ptr);

  private:
  const std::string& _internal_dimension_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dimension_id(
      const std::string& value);
  std::string* _internal_mutable_dimension_id();

  public:
  // string profession = 12;
  void clear_profession() ;
  const std::string& profession() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_profession(Arg_&& arg, Args_... args);
  std::string* mutable_profession();
  PROTOBUF_NODISCARD std::string* release_profession();
  void set_allocated_profession(std::string* ptr);

  private:
  const std::string& _internal_profession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profession(
      const std::string& value);
  std::string* _internal_mutable_profession();

  public:
  // .sro.Location location = 7;
  bool has_location() const;
  void clear_location() ;
  const ::sro::Location& location() const;
  PROTOBUF_NODISCARD ::sro::Location* release_location();
  ::sro::Location* mutable_location();
  void set_allocated_location(::sro::Location* location);
  private:
  const ::sro::Location& _internal_location() const;
  ::sro::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::sro::Location* location);
  ::sro::Location* unsafe_arena_release_location();
  // int64 created_at = 9;
  void clear_created_at() ;
  ::int64_t created_at() const;
  void set_created_at(::int64_t value);

  private:
  ::int64_t _internal_created_at() const;
  void _internal_set_created_at(::int64_t value);

  public:
  // int64 updated_at = 10;
  void clear_updated_at() ;
  ::int64_t updated_at() const;
  void set_updated_at(::int64_t value);

  private:
  ::int64_t _internal_updated_at() const;
  void _internal_set_updated_at(::int64_t value);

  public:
  // int64 deleted_at = 11;
  void clear_deleted_at() ;
  ::int64_t deleted_at() const;
  void set_deleted_at(::int64_t value);

  private:
  ::int64_t _internal_deleted_at() const;
  void _internal_set_deleted_at(::int64_t value);

  public:
  // int32 play_time = 6;
  void clear_play_time() ;
  ::int32_t play_time() const;
  void set_play_time(::int32_t value);

  private:
  ::int32_t _internal_play_time() const;
  void _internal_set_play_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sro.character.Character)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr realm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dimension_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profession_;
    ::sro::Location* location_;
    ::int64_t created_at_;
    ::int64_t updated_at_;
    ::int64_t deleted_at_;
    ::int32_t play_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};// -------------------------------------------------------------------

class Characters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.Characters) */ {
 public:
  inline Characters() : Characters(nullptr) {}
  ~Characters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Characters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Characters(const Characters& from);
  Characters(Characters&& from) noexcept
    : Characters() {
    *this = ::std::move(from);
  }

  inline Characters& operator=(const Characters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Characters& operator=(Characters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Characters& default_instance() {
    return *internal_default_instance();
  }
  static inline const Characters* internal_default_instance() {
    return reinterpret_cast<const Characters*>(
               &_Characters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Characters& a, Characters& b) {
    a.Swap(&b);
  }
  inline void Swap(Characters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Characters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Characters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Characters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Characters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Characters& from) {
    Characters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Characters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.Characters";
  }
  protected:
  explicit Characters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 2,
    kTotalFieldNumber = 1,
  };
  // repeated .sro.character.Character characters = 2;
  int characters_size() const;
  private:
  int _internal_characters_size() const;

  public:
  void clear_characters() ;
  ::sro::character::Character* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Character >*
      mutable_characters();
  private:
  const ::sro::character::Character& _internal_characters(int index) const;
  ::sro::character::Character* _internal_add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Character>& _internal_characters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Character>* _internal_mutable_characters();
  public:
  const ::sro::character::Character& characters(int index) const;
  ::sro::character::Character* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Character >&
      characters() const;
  // int64 total = 1;
  void clear_total() ;
  ::int64_t total() const;
  void set_total(::int64_t value);

  private:
  ::int64_t _internal_total() const;
  void _internal_set_total(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:sro.character.Characters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Character > characters_;
    ::int64_t total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};// -------------------------------------------------------------------

class AddPlayTimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.AddPlayTimeRequest) */ {
 public:
  inline AddPlayTimeRequest() : AddPlayTimeRequest(nullptr) {}
  ~AddPlayTimeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddPlayTimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPlayTimeRequest(const AddPlayTimeRequest& from);
  AddPlayTimeRequest(AddPlayTimeRequest&& from) noexcept
    : AddPlayTimeRequest() {
    *this = ::std::move(from);
  }

  inline AddPlayTimeRequest& operator=(const AddPlayTimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPlayTimeRequest& operator=(AddPlayTimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPlayTimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPlayTimeRequest* internal_default_instance() {
    return reinterpret_cast<const AddPlayTimeRequest*>(
               &_AddPlayTimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddPlayTimeRequest& a, AddPlayTimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPlayTimeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPlayTimeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPlayTimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPlayTimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPlayTimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddPlayTimeRequest& from) {
    AddPlayTimeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlayTimeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.AddPlayTimeRequest";
  }
  protected:
  explicit AddPlayTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // int32 time = 2;
  void clear_time() ;
  ::int32_t time() const;
  void set_time(::int32_t value);

  private:
  ::int32_t _internal_time() const;
  void _internal_set_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sro.character.AddPlayTimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::int32_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2fcharacter_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetCharacterRequest

// .google.protobuf.FieldMask mask = 1;
inline bool GetCharacterRequest::has_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetCharacterRequest::_internal_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetCharacterRequest::mask() const {
  // @@protoc_insertion_point(field_get:sro.character.GetCharacterRequest.mask)
  return _internal_mask();
}
inline void GetCharacterRequest::unsafe_arena_set_allocated_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  _impl_.mask_ = mask;
  if (mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.GetCharacterRequest.mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharacterRequest::release_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharacterRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:sro.character.GetCharacterRequest.mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharacterRequest::_internal_mutable_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.mask_ = p;
  }
  return _impl_.mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharacterRequest::mutable_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:sro.character.GetCharacterRequest.mask)
  return _msg;
}
inline void GetCharacterRequest::set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask));
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetCharacterRequest.mask)
}

// string id = 2;
inline void GetCharacterRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetCharacterRequest::id() const {
  // @@protoc_insertion_point(field_get:sro.character.GetCharacterRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCharacterRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.GetCharacterRequest.id)
}
inline std::string* GetCharacterRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.character.GetCharacterRequest.id)
  return _s;
}
inline const std::string& GetCharacterRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void GetCharacterRequest::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCharacterRequest::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* GetCharacterRequest::release_id() {
  // @@protoc_insertion_point(field_release:sro.character.GetCharacterRequest.id)
  return _impl_.id_.Release();
}
inline void GetCharacterRequest::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetCharacterRequest.id)
}

// -------------------------------------------------------------------

// GetCharactersRequest

// .google.protobuf.FieldMask mask = 1;
inline bool GetCharactersRequest::has_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetCharactersRequest::_internal_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetCharactersRequest::mask() const {
  // @@protoc_insertion_point(field_get:sro.character.GetCharactersRequest.mask)
  return _internal_mask();
}
inline void GetCharactersRequest::unsafe_arena_set_allocated_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  _impl_.mask_ = mask;
  if (mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.GetCharactersRequest.mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharactersRequest::release_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharactersRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:sro.character.GetCharactersRequest.mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharactersRequest::_internal_mutable_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.mask_ = p;
  }
  return _impl_.mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetCharactersRequest::mutable_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:sro.character.GetCharactersRequest.mask)
  return _msg;
}
inline void GetCharactersRequest::set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask));
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetCharactersRequest.mask)
}

// .sro.QueryFilters filters = 2;
inline bool GetCharactersRequest::has_filters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filters_ != nullptr);
  return value;
}
inline const ::sro::QueryFilters& GetCharactersRequest::_internal_filters() const {
  const ::sro::QueryFilters* p = _impl_.filters_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::QueryFilters&>(
      ::sro::_QueryFilters_default_instance_);
}
inline const ::sro::QueryFilters& GetCharactersRequest::filters() const {
  // @@protoc_insertion_point(field_get:sro.character.GetCharactersRequest.filters)
  return _internal_filters();
}
inline void GetCharactersRequest::unsafe_arena_set_allocated_filters(
    ::sro::QueryFilters* filters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filters_);
  }
  _impl_.filters_ = filters;
  if (filters) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.GetCharactersRequest.filters)
}
inline ::sro::QueryFilters* GetCharactersRequest::release_filters() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sro::QueryFilters* temp = _impl_.filters_;
  _impl_.filters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::QueryFilters* GetCharactersRequest::unsafe_arena_release_filters() {
  // @@protoc_insertion_point(field_release:sro.character.GetCharactersRequest.filters)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sro::QueryFilters* temp = _impl_.filters_;
  _impl_.filters_ = nullptr;
  return temp;
}
inline ::sro::QueryFilters* GetCharactersRequest::_internal_mutable_filters() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.filters_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::QueryFilters>(GetArenaForAllocation());
    _impl_.filters_ = p;
  }
  return _impl_.filters_;
}
inline ::sro::QueryFilters* GetCharactersRequest::mutable_filters() {
  ::sro::QueryFilters* _msg = _internal_mutable_filters();
  // @@protoc_insertion_point(field_mutable:sro.character.GetCharactersRequest.filters)
  return _msg;
}
inline void GetCharactersRequest::set_allocated_filters(::sro::QueryFilters* filters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filters_);
  }
  if (filters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filters));
    if (message_arena != submessage_arena) {
      filters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filters, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filters_ = filters;
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetCharactersRequest.filters)
}

// -------------------------------------------------------------------

// GetUserCharactersRequest

// .google.protobuf.FieldMask mask = 1;
inline bool GetUserCharactersRequest::has_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetUserCharactersRequest::_internal_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetUserCharactersRequest::mask() const {
  // @@protoc_insertion_point(field_get:sro.character.GetUserCharactersRequest.mask)
  return _internal_mask();
}
inline void GetUserCharactersRequest::unsafe_arena_set_allocated_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  _impl_.mask_ = mask;
  if (mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.GetUserCharactersRequest.mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetUserCharactersRequest::release_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetUserCharactersRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:sro.character.GetUserCharactersRequest.mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetUserCharactersRequest::_internal_mutable_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.mask_ = p;
  }
  return _impl_.mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetUserCharactersRequest::mutable_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:sro.character.GetUserCharactersRequest.mask)
  return _msg;
}
inline void GetUserCharactersRequest::set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask));
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetUserCharactersRequest.mask)
}

// .sro.QueryFilters filters = 2;
inline bool GetUserCharactersRequest::has_filters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filters_ != nullptr);
  return value;
}
inline const ::sro::QueryFilters& GetUserCharactersRequest::_internal_filters() const {
  const ::sro::QueryFilters* p = _impl_.filters_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::QueryFilters&>(
      ::sro::_QueryFilters_default_instance_);
}
inline const ::sro::QueryFilters& GetUserCharactersRequest::filters() const {
  // @@protoc_insertion_point(field_get:sro.character.GetUserCharactersRequest.filters)
  return _internal_filters();
}
inline void GetUserCharactersRequest::unsafe_arena_set_allocated_filters(
    ::sro::QueryFilters* filters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filters_);
  }
  _impl_.filters_ = filters;
  if (filters) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.GetUserCharactersRequest.filters)
}
inline ::sro::QueryFilters* GetUserCharactersRequest::release_filters() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sro::QueryFilters* temp = _impl_.filters_;
  _impl_.filters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::QueryFilters* GetUserCharactersRequest::unsafe_arena_release_filters() {
  // @@protoc_insertion_point(field_release:sro.character.GetUserCharactersRequest.filters)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sro::QueryFilters* temp = _impl_.filters_;
  _impl_.filters_ = nullptr;
  return temp;
}
inline ::sro::QueryFilters* GetUserCharactersRequest::_internal_mutable_filters() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.filters_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::QueryFilters>(GetArenaForAllocation());
    _impl_.filters_ = p;
  }
  return _impl_.filters_;
}
inline ::sro::QueryFilters* GetUserCharactersRequest::mutable_filters() {
  ::sro::QueryFilters* _msg = _internal_mutable_filters();
  // @@protoc_insertion_point(field_mutable:sro.character.GetUserCharactersRequest.filters)
  return _msg;
}
inline void GetUserCharactersRequest::set_allocated_filters(::sro::QueryFilters* filters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filters_);
  }
  if (filters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filters));
    if (message_arena != submessage_arena) {
      filters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filters, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filters_ = filters;
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetUserCharactersRequest.filters)
}

// string owner_id = 3;
inline void GetUserCharactersRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& GetUserCharactersRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:sro.character.GetUserCharactersRequest.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetUserCharactersRequest::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.GetUserCharactersRequest.owner_id)
}
inline std::string* GetUserCharactersRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:sro.character.GetUserCharactersRequest.owner_id)
  return _s;
}
inline const std::string& GetUserCharactersRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void GetUserCharactersRequest::_internal_set_owner_id(const std::string& value) {
  ;


  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserCharactersRequest::_internal_mutable_owner_id() {
  ;
  return _impl_.owner_id_.Mutable( GetArenaForAllocation());
}
inline std::string* GetUserCharactersRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:sro.character.GetUserCharactersRequest.owner_id)
  return _impl_.owner_id_.Release();
}
inline void GetUserCharactersRequest::set_allocated_owner_id(std::string* value) {
  _impl_.owner_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_id_.IsDefault()) {
          _impl_.owner_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetUserCharactersRequest.owner_id)
}

// -------------------------------------------------------------------

// EditCharacterRequest

// .google.protobuf.FieldMask mask = 1;
inline bool EditCharacterRequest::has_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& EditCharacterRequest::_internal_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& EditCharacterRequest::mask() const {
  // @@protoc_insertion_point(field_get:sro.character.EditCharacterRequest.mask)
  return _internal_mask();
}
inline void EditCharacterRequest::unsafe_arena_set_allocated_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  _impl_.mask_ = mask;
  if (mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.EditCharacterRequest.mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* EditCharacterRequest::release_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* EditCharacterRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:sro.character.EditCharacterRequest.mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* EditCharacterRequest::_internal_mutable_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.mask_ = p;
  }
  return _impl_.mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* EditCharacterRequest::mutable_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:sro.character.EditCharacterRequest.mask)
  return _msg;
}
inline void EditCharacterRequest::set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask));
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:sro.character.EditCharacterRequest.mask)
}

// .sro.character.Character character = 2;
inline bool EditCharacterRequest::has_character() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.character_ != nullptr);
  return value;
}
inline void EditCharacterRequest::clear_character() {
  if (_impl_.character_ != nullptr) _impl_.character_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sro::character::Character& EditCharacterRequest::_internal_character() const {
  const ::sro::character::Character* p = _impl_.character_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::character::Character&>(
      ::sro::character::_Character_default_instance_);
}
inline const ::sro::character::Character& EditCharacterRequest::character() const {
  // @@protoc_insertion_point(field_get:sro.character.EditCharacterRequest.character)
  return _internal_character();
}
inline void EditCharacterRequest::unsafe_arena_set_allocated_character(
    ::sro::character::Character* character) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_);
  }
  _impl_.character_ = character;
  if (character) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.EditCharacterRequest.character)
}
inline ::sro::character::Character* EditCharacterRequest::release_character() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sro::character::Character* temp = _impl_.character_;
  _impl_.character_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::character::Character* EditCharacterRequest::unsafe_arena_release_character() {
  // @@protoc_insertion_point(field_release:sro.character.EditCharacterRequest.character)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sro::character::Character* temp = _impl_.character_;
  _impl_.character_ = nullptr;
  return temp;
}
inline ::sro::character::Character* EditCharacterRequest::_internal_mutable_character() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.character_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::character::Character>(GetArenaForAllocation());
    _impl_.character_ = p;
  }
  return _impl_.character_;
}
inline ::sro::character::Character* EditCharacterRequest::mutable_character() {
  ::sro::character::Character* _msg = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:sro.character.EditCharacterRequest.character)
  return _msg;
}
inline void EditCharacterRequest::set_allocated_character(::sro::character::Character* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.character_;
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character);
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.character_ = character;
  // @@protoc_insertion_point(field_set_allocated:sro.character.EditCharacterRequest.character)
}

// -------------------------------------------------------------------

// CreateCharacterRequest

// string owner_id = 1;
inline void CreateCharacterRequest::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:sro.character.CreateCharacterRequest.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateCharacterRequest::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.CreateCharacterRequest.owner_id)
}
inline std::string* CreateCharacterRequest::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:sro.character.CreateCharacterRequest.owner_id)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void CreateCharacterRequest::_internal_set_owner_id(const std::string& value) {
  ;


  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_owner_id() {
  ;
  return _impl_.owner_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_owner_id() {
  // @@protoc_insertion_point(field_release:sro.character.CreateCharacterRequest.owner_id)
  return _impl_.owner_id_.Release();
}
inline void CreateCharacterRequest::set_allocated_owner_id(std::string* value) {
  _impl_.owner_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_id_.IsDefault()) {
          _impl_.owner_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.CreateCharacterRequest.owner_id)
}

// string name = 2;
inline void CreateCharacterRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::name() const {
  // @@protoc_insertion_point(field_get:sro.character.CreateCharacterRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateCharacterRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.CreateCharacterRequest.name)
}
inline std::string* CreateCharacterRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.character.CreateCharacterRequest.name)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CreateCharacterRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_name() {
  // @@protoc_insertion_point(field_release:sro.character.CreateCharacterRequest.name)
  return _impl_.name_.Release();
}
inline void CreateCharacterRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.CreateCharacterRequest.name)
}

// string gender = 3;
inline void CreateCharacterRequest::clear_gender() {
  _impl_.gender_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::gender() const {
  // @@protoc_insertion_point(field_get:sro.character.CreateCharacterRequest.gender)
  return _internal_gender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateCharacterRequest::set_gender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.gender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.CreateCharacterRequest.gender)
}
inline std::string* CreateCharacterRequest::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:sro.character.CreateCharacterRequest.gender)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_gender() const {
  return _impl_.gender_.Get();
}
inline void CreateCharacterRequest::_internal_set_gender(const std::string& value) {
  ;


  _impl_.gender_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_gender() {
  ;
  return _impl_.gender_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_gender() {
  // @@protoc_insertion_point(field_release:sro.character.CreateCharacterRequest.gender)
  return _impl_.gender_.Release();
}
inline void CreateCharacterRequest::set_allocated_gender(std::string* value) {
  _impl_.gender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gender_.IsDefault()) {
          _impl_.gender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.CreateCharacterRequest.gender)
}

// string realm = 4;
inline void CreateCharacterRequest::clear_realm() {
  _impl_.realm_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::realm() const {
  // @@protoc_insertion_point(field_get:sro.character.CreateCharacterRequest.realm)
  return _internal_realm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateCharacterRequest::set_realm(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.realm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.CreateCharacterRequest.realm)
}
inline std::string* CreateCharacterRequest::mutable_realm() {
  std::string* _s = _internal_mutable_realm();
  // @@protoc_insertion_point(field_mutable:sro.character.CreateCharacterRequest.realm)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_realm() const {
  return _impl_.realm_.Get();
}
inline void CreateCharacterRequest::_internal_set_realm(const std::string& value) {
  ;


  _impl_.realm_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_realm() {
  ;
  return _impl_.realm_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_realm() {
  // @@protoc_insertion_point(field_release:sro.character.CreateCharacterRequest.realm)
  return _impl_.realm_.Release();
}
inline void CreateCharacterRequest::set_allocated_realm(std::string* value) {
  _impl_.realm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.realm_.IsDefault()) {
          _impl_.realm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.CreateCharacterRequest.realm)
}

// string dimension_id = 5;
inline void CreateCharacterRequest::clear_dimension_id() {
  _impl_.dimension_id_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::dimension_id() const {
  // @@protoc_insertion_point(field_get:sro.character.CreateCharacterRequest.dimension_id)
  return _internal_dimension_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateCharacterRequest::set_dimension_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.dimension_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.CreateCharacterRequest.dimension_id)
}
inline std::string* CreateCharacterRequest::mutable_dimension_id() {
  std::string* _s = _internal_mutable_dimension_id();
  // @@protoc_insertion_point(field_mutable:sro.character.CreateCharacterRequest.dimension_id)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_dimension_id() const {
  return _impl_.dimension_id_.Get();
}
inline void CreateCharacterRequest::_internal_set_dimension_id(const std::string& value) {
  ;


  _impl_.dimension_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_dimension_id() {
  ;
  return _impl_.dimension_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_dimension_id() {
  // @@protoc_insertion_point(field_release:sro.character.CreateCharacterRequest.dimension_id)
  return _impl_.dimension_id_.Release();
}
inline void CreateCharacterRequest::set_allocated_dimension_id(std::string* value) {
  _impl_.dimension_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dimension_id_.IsDefault()) {
          _impl_.dimension_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.CreateCharacterRequest.dimension_id)
}

// string profession = 6;
inline void CreateCharacterRequest::clear_profession() {
  _impl_.profession_.ClearToEmpty();
}
inline const std::string& CreateCharacterRequest::profession() const {
  // @@protoc_insertion_point(field_get:sro.character.CreateCharacterRequest.profession)
  return _internal_profession();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateCharacterRequest::set_profession(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.profession_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.CreateCharacterRequest.profession)
}
inline std::string* CreateCharacterRequest::mutable_profession() {
  std::string* _s = _internal_mutable_profession();
  // @@protoc_insertion_point(field_mutable:sro.character.CreateCharacterRequest.profession)
  return _s;
}
inline const std::string& CreateCharacterRequest::_internal_profession() const {
  return _impl_.profession_.Get();
}
inline void CreateCharacterRequest::_internal_set_profession(const std::string& value) {
  ;


  _impl_.profession_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::_internal_mutable_profession() {
  ;
  return _impl_.profession_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateCharacterRequest::release_profession() {
  // @@protoc_insertion_point(field_release:sro.character.CreateCharacterRequest.profession)
  return _impl_.profession_.Release();
}
inline void CreateCharacterRequest::set_allocated_profession(std::string* value) {
  _impl_.profession_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.profession_.IsDefault()) {
          _impl_.profession_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.CreateCharacterRequest.profession)
}

// -------------------------------------------------------------------

// Character

// string id = 1;
inline void Character::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Character::id() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.Character.id)
}
inline std::string* Character::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.id)
  return _s;
}
inline const std::string& Character::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Character::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* Character::release_id() {
  // @@protoc_insertion_point(field_release:sro.character.Character.id)
  return _impl_.id_.Release();
}
inline void Character::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.id)
}

// string owner_id = 2;
inline void Character::clear_owner_id() {
  _impl_.owner_id_.ClearToEmpty();
}
inline const std::string& Character::owner_id() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.owner_id)
  return _internal_owner_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_owner_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.Character.owner_id)
}
inline std::string* Character::mutable_owner_id() {
  std::string* _s = _internal_mutable_owner_id();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.owner_id)
  return _s;
}
inline const std::string& Character::_internal_owner_id() const {
  return _impl_.owner_id_.Get();
}
inline void Character::_internal_set_owner_id(const std::string& value) {
  ;


  _impl_.owner_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_owner_id() {
  ;
  return _impl_.owner_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Character::release_owner_id() {
  // @@protoc_insertion_point(field_release:sro.character.Character.owner_id)
  return _impl_.owner_id_.Release();
}
inline void Character::set_allocated_owner_id(std::string* value) {
  _impl_.owner_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_id_.IsDefault()) {
          _impl_.owner_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.owner_id)
}

// string name = 3;
inline void Character::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Character::name() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.Character.name)
}
inline std::string* Character::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.name)
  return _s;
}
inline const std::string& Character::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Character::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Character::release_name() {
  // @@protoc_insertion_point(field_release:sro.character.Character.name)
  return _impl_.name_.Release();
}
inline void Character::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.name)
}

// string gender = 4;
inline void Character::clear_gender() {
  _impl_.gender_.ClearToEmpty();
}
inline const std::string& Character::gender() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.gender)
  return _internal_gender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_gender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.gender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.Character.gender)
}
inline std::string* Character::mutable_gender() {
  std::string* _s = _internal_mutable_gender();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.gender)
  return _s;
}
inline const std::string& Character::_internal_gender() const {
  return _impl_.gender_.Get();
}
inline void Character::_internal_set_gender(const std::string& value) {
  ;


  _impl_.gender_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_gender() {
  ;
  return _impl_.gender_.Mutable( GetArenaForAllocation());
}
inline std::string* Character::release_gender() {
  // @@protoc_insertion_point(field_release:sro.character.Character.gender)
  return _impl_.gender_.Release();
}
inline void Character::set_allocated_gender(std::string* value) {
  _impl_.gender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gender_.IsDefault()) {
          _impl_.gender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.gender)
}

// string realm = 5;
inline void Character::clear_realm() {
  _impl_.realm_.ClearToEmpty();
}
inline const std::string& Character::realm() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.realm)
  return _internal_realm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_realm(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.realm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.Character.realm)
}
inline std::string* Character::mutable_realm() {
  std::string* _s = _internal_mutable_realm();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.realm)
  return _s;
}
inline const std::string& Character::_internal_realm() const {
  return _impl_.realm_.Get();
}
inline void Character::_internal_set_realm(const std::string& value) {
  ;


  _impl_.realm_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_realm() {
  ;
  return _impl_.realm_.Mutable( GetArenaForAllocation());
}
inline std::string* Character::release_realm() {
  // @@protoc_insertion_point(field_release:sro.character.Character.realm)
  return _impl_.realm_.Release();
}
inline void Character::set_allocated_realm(std::string* value) {
  _impl_.realm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.realm_.IsDefault()) {
          _impl_.realm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.realm)
}

// int32 play_time = 6;
inline void Character::clear_play_time() {
  _impl_.play_time_ = 0;
}
inline ::int32_t Character::play_time() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.play_time)
  return _internal_play_time();
}
inline void Character::set_play_time(::int32_t value) {
  _internal_set_play_time(value);
  // @@protoc_insertion_point(field_set:sro.character.Character.play_time)
}
inline ::int32_t Character::_internal_play_time() const {
  return _impl_.play_time_;
}
inline void Character::_internal_set_play_time(::int32_t value) {
  ;
  _impl_.play_time_ = value;
}

// .sro.Location location = 7;
inline bool Character::has_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ != nullptr);
  return value;
}
inline const ::sro::Location& Character::_internal_location() const {
  const ::sro::Location* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::sro::Location&>(
      ::sro::_Location_default_instance_);
}
inline const ::sro::Location& Character::location() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.location)
  return _internal_location();
}
inline void Character::unsafe_arena_set_allocated_location(
    ::sro::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.Character.location)
}
inline ::sro::Location* Character::release_location() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sro::Location* Character::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:sro.character.Character.location)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::sro::Location* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::sro::Location* Character::_internal_mutable_location() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::sro::Location>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::sro::Location* Character::mutable_location() {
  ::sro::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.location)
  return _msg;
}
inline void Character::set_allocated_location(::sro::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.location)
}

// string dimension_id = 8;
inline void Character::clear_dimension_id() {
  _impl_.dimension_id_.ClearToEmpty();
}
inline const std::string& Character::dimension_id() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.dimension_id)
  return _internal_dimension_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_dimension_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.dimension_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.Character.dimension_id)
}
inline std::string* Character::mutable_dimension_id() {
  std::string* _s = _internal_mutable_dimension_id();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.dimension_id)
  return _s;
}
inline const std::string& Character::_internal_dimension_id() const {
  return _impl_.dimension_id_.Get();
}
inline void Character::_internal_set_dimension_id(const std::string& value) {
  ;


  _impl_.dimension_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_dimension_id() {
  ;
  return _impl_.dimension_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Character::release_dimension_id() {
  // @@protoc_insertion_point(field_release:sro.character.Character.dimension_id)
  return _impl_.dimension_id_.Release();
}
inline void Character::set_allocated_dimension_id(std::string* value) {
  _impl_.dimension_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dimension_id_.IsDefault()) {
          _impl_.dimension_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.dimension_id)
}

// int64 created_at = 9;
inline void Character::clear_created_at() {
  _impl_.created_at_ = ::int64_t{0};
}
inline ::int64_t Character::created_at() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.created_at)
  return _internal_created_at();
}
inline void Character::set_created_at(::int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:sro.character.Character.created_at)
}
inline ::int64_t Character::_internal_created_at() const {
  return _impl_.created_at_;
}
inline void Character::_internal_set_created_at(::int64_t value) {
  ;
  _impl_.created_at_ = value;
}

// int64 updated_at = 10;
inline void Character::clear_updated_at() {
  _impl_.updated_at_ = ::int64_t{0};
}
inline ::int64_t Character::updated_at() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.updated_at)
  return _internal_updated_at();
}
inline void Character::set_updated_at(::int64_t value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:sro.character.Character.updated_at)
}
inline ::int64_t Character::_internal_updated_at() const {
  return _impl_.updated_at_;
}
inline void Character::_internal_set_updated_at(::int64_t value) {
  ;
  _impl_.updated_at_ = value;
}

// int64 deleted_at = 11;
inline void Character::clear_deleted_at() {
  _impl_.deleted_at_ = ::int64_t{0};
}
inline ::int64_t Character::deleted_at() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.deleted_at)
  return _internal_deleted_at();
}
inline void Character::set_deleted_at(::int64_t value) {
  _internal_set_deleted_at(value);
  // @@protoc_insertion_point(field_set:sro.character.Character.deleted_at)
}
inline ::int64_t Character::_internal_deleted_at() const {
  return _impl_.deleted_at_;
}
inline void Character::_internal_set_deleted_at(::int64_t value) {
  ;
  _impl_.deleted_at_ = value;
}

// string profession = 12;
inline void Character::clear_profession() {
  _impl_.profession_.ClearToEmpty();
}
inline const std::string& Character::profession() const {
  // @@protoc_insertion_point(field_get:sro.character.Character.profession)
  return _internal_profession();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Character::set_profession(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.profession_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.Character.profession)
}
inline std::string* Character::mutable_profession() {
  std::string* _s = _internal_mutable_profession();
  // @@protoc_insertion_point(field_mutable:sro.character.Character.profession)
  return _s;
}
inline const std::string& Character::_internal_profession() const {
  return _impl_.profession_.Get();
}
inline void Character::_internal_set_profession(const std::string& value) {
  ;


  _impl_.profession_.Set(value, GetArenaForAllocation());
}
inline std::string* Character::_internal_mutable_profession() {
  ;
  return _impl_.profession_.Mutable( GetArenaForAllocation());
}
inline std::string* Character::release_profession() {
  // @@protoc_insertion_point(field_release:sro.character.Character.profession)
  return _impl_.profession_.Release();
}
inline void Character::set_allocated_profession(std::string* value) {
  _impl_.profession_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.profession_.IsDefault()) {
          _impl_.profession_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.Character.profession)
}

// -------------------------------------------------------------------

// Characters

// int64 total = 1;
inline void Characters::clear_total() {
  _impl_.total_ = ::int64_t{0};
}
inline ::int64_t Characters::total() const {
  // @@protoc_insertion_point(field_get:sro.character.Characters.total)
  return _internal_total();
}
inline void Characters::set_total(::int64_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:sro.character.Characters.total)
}
inline ::int64_t Characters::_internal_total() const {
  return _impl_.total_;
}
inline void Characters::_internal_set_total(::int64_t value) {
  ;
  _impl_.total_ = value;
}

// repeated .sro.character.Character characters = 2;
inline int Characters::_internal_characters_size() const {
  return _impl_.characters_.size();
}
inline int Characters::characters_size() const {
  return _internal_characters_size();
}
inline void Characters::clear_characters() {
  _internal_mutable_characters()->Clear();
}
inline ::sro::character::Character* Characters::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:sro.character.Characters.characters)
  return _internal_mutable_characters()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Character >*
Characters::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:sro.character.Characters.characters)
  return _internal_mutable_characters();
}
inline const ::sro::character::Character& Characters::_internal_characters(int index) const {
  return _internal_characters().Get(index);
}
inline const ::sro::character::Character& Characters::characters(int index) const {
  // @@protoc_insertion_point(field_get:sro.character.Characters.characters)
  return _internal_characters(index);
}
inline ::sro::character::Character* Characters::_internal_add_characters() {
  return _internal_mutable_characters()->Add();
}
inline ::sro::character::Character* Characters::add_characters() {
  ::sro::character::Character* _add = _internal_add_characters();
  // @@protoc_insertion_point(field_add:sro.character.Characters.characters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Character >&
Characters::characters() const {
  // @@protoc_insertion_point(field_list:sro.character.Characters.characters)
  return _internal_characters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Character>&
Characters::_internal_characters() const {
  return _impl_.characters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Character>*
Characters::_internal_mutable_characters() {
  return &_impl_.characters_;
}

// -------------------------------------------------------------------

// AddPlayTimeRequest

// string id = 1;
inline void AddPlayTimeRequest::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AddPlayTimeRequest::id() const {
  // @@protoc_insertion_point(field_get:sro.character.AddPlayTimeRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddPlayTimeRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.AddPlayTimeRequest.id)
}
inline std::string* AddPlayTimeRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:sro.character.AddPlayTimeRequest.id)
  return _s;
}
inline const std::string& AddPlayTimeRequest::_internal_id() const {
  return _impl_.id_.Get();
}
inline void AddPlayTimeRequest::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* AddPlayTimeRequest::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* AddPlayTimeRequest::release_id() {
  // @@protoc_insertion_point(field_release:sro.character.AddPlayTimeRequest.id)
  return _impl_.id_.Release();
}
inline void AddPlayTimeRequest::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.AddPlayTimeRequest.id)
}

// int32 time = 2;
inline void AddPlayTimeRequest::clear_time() {
  _impl_.time_ = 0;
}
inline ::int32_t AddPlayTimeRequest::time() const {
  // @@protoc_insertion_point(field_get:sro.character.AddPlayTimeRequest.time)
  return _internal_time();
}
inline void AddPlayTimeRequest::set_time(::int32_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:sro.character.AddPlayTimeRequest.time)
}
inline ::int32_t AddPlayTimeRequest::_internal_time() const {
  return _impl_.time_;
}
inline void AddPlayTimeRequest::_internal_set_time(::int32_t value) {
  ;
  _impl_.time_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace character
}  // namespace sro


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sro_2fcharacter_2fcharacter_2eproto_2epb_2eh
