#if defined(_MSC_VER)
  #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
  #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
  #pragma warning (disable:4582) // 'type': constructor is not implicitly called
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/character/inventory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sro_2fcharacter_2finventory_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sro_2fcharacter_2finventory_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/field_mask.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sro_2fcharacter_2finventory_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sro_2fcharacter_2finventory_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_sro_2fcharacter_2finventory_2eproto;
namespace sro {
namespace character {
class GetInventoryRequest;
struct GetInventoryRequestDefaultTypeInternal;
extern GetInventoryRequestDefaultTypeInternal _GetInventoryRequest_default_instance_;
class GetInventoryResponse;
struct GetInventoryResponseDefaultTypeInternal;
extern GetInventoryResponseDefaultTypeInternal _GetInventoryResponse_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
}  // namespace character
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template <>
::sro::character::GetInventoryRequest* Arena::CreateMaybeMessage<::sro::character::GetInventoryRequest>(Arena*);
template <>
::sro::character::GetInventoryResponse* Arena::CreateMaybeMessage<::sro::character::GetInventoryResponse>(Arena*);
template <>
::sro::character::Item* Arena::CreateMaybeMessage<::sro::character::Item>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace sro {
namespace character {

// ===================================================================


// -------------------------------------------------------------------

class GetInventoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.GetInventoryRequest) */ {
 public:
  inline GetInventoryRequest() : GetInventoryRequest(nullptr) {}
  ~GetInventoryRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetInventoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInventoryRequest(const GetInventoryRequest& from);
  GetInventoryRequest(GetInventoryRequest&& from) noexcept
    : GetInventoryRequest() {
    *this = ::std::move(from);
  }

  inline GetInventoryRequest& operator=(const GetInventoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInventoryRequest& operator=(GetInventoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInventoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInventoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetInventoryRequest*>(
               &_GetInventoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetInventoryRequest& a, GetInventoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInventoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInventoryRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInventoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInventoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInventoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInventoryRequest& from) {
    GetInventoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInventoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.GetInventoryRequest";
  }
  protected:
  explicit GetInventoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 2,
    kMaskFieldNumber = 1,
  };
  // string character_id = 2;
  void clear_character_id() ;
  const std::string& character_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_id(Arg_&& arg, Args_... args);
  std::string* mutable_character_id();
  PROTOBUF_NODISCARD std::string* release_character_id();
  void set_allocated_character_id(std::string* ptr);

  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(
      const std::string& value);
  std::string* _internal_mutable_character_id();

  public:
  // .google.protobuf.FieldMask mask = 1;
  bool has_mask() const;
  void clear_mask() ;
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();
  // @@protoc_insertion_point(class_scope:sro.character.GetInventoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_id_;
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2finventory_2eproto;
};// -------------------------------------------------------------------

class GetInventoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.GetInventoryResponse) */ {
 public:
  inline GetInventoryResponse() : GetInventoryResponse(nullptr) {}
  ~GetInventoryResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetInventoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInventoryResponse(const GetInventoryResponse& from);
  GetInventoryResponse(GetInventoryResponse&& from) noexcept
    : GetInventoryResponse() {
    *this = ::std::move(from);
  }

  inline GetInventoryResponse& operator=(const GetInventoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInventoryResponse& operator=(GetInventoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInventoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInventoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetInventoryResponse*>(
               &_GetInventoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetInventoryResponse& a, GetInventoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInventoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInventoryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInventoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInventoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInventoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInventoryResponse& from) {
    GetInventoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInventoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.GetInventoryResponse";
  }
  protected:
  explicit GetInventoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .sro.character.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::sro::character::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Item >*
      mutable_items();
  private:
  const ::sro::character::Item& _internal_items(int index) const;
  ::sro::character::Item* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Item>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Item>* _internal_mutable_items();
  public:
  const ::sro::character::Item& items(int index) const;
  ::sro::character::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Item >&
      items() const;
  // @@protoc_insertion_point(class_scope:sro.character.GetInventoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2finventory_2eproto;
};// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sro.character.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "sro.character.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSlotFieldNumber = 2,
    kQuantityFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 slot = 2;
  void clear_slot() ;
  ::uint32_t slot() const;
  void set_slot(::uint32_t value);

  private:
  ::uint32_t _internal_slot() const;
  void _internal_set_slot(::uint32_t value);

  public:
  // uint32 quantity = 3;
  void clear_quantity() ;
  ::uint32_t quantity() const;
  void set_quantity(::uint32_t value);

  private:
  ::uint32_t _internal_quantity() const;
  void _internal_set_quantity(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:sro.character.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    ::uint32_t slot_;
    ::uint32_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sro_2fcharacter_2finventory_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetInventoryRequest

// .google.protobuf.FieldMask mask = 1;
inline bool GetInventoryRequest::has_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mask_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetInventoryRequest::_internal_mask() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = _impl_.mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& GetInventoryRequest::mask() const {
  // @@protoc_insertion_point(field_get:sro.character.GetInventoryRequest.mask)
  return _internal_mask();
}
inline void GetInventoryRequest::unsafe_arena_set_allocated_mask(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  _impl_.mask_ = mask;
  if (mask) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sro.character.GetInventoryRequest.mask)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetInventoryRequest::release_mask() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetInventoryRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:sro.character.GetInventoryRequest.mask)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = _impl_.mask_;
  _impl_.mask_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetInventoryRequest::_internal_mutable_mask() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    _impl_.mask_ = p;
  }
  return _impl_.mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* GetInventoryRequest::mutable_mask() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_mask();
  // @@protoc_insertion_point(field_mutable:sro.character.GetInventoryRequest.mask)
  return _msg;
}
inline void GetInventoryRequest::set_allocated_mask(::PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask));
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetInventoryRequest.mask)
}

// string character_id = 2;
inline void GetInventoryRequest::clear_character_id() {
  _impl_.character_id_.ClearToEmpty();
}
inline const std::string& GetInventoryRequest::character_id() const {
  // @@protoc_insertion_point(field_get:sro.character.GetInventoryRequest.character_id)
  return _internal_character_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetInventoryRequest::set_character_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.character_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sro.character.GetInventoryRequest.character_id)
}
inline std::string* GetInventoryRequest::mutable_character_id() {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:sro.character.GetInventoryRequest.character_id)
  return _s;
}
inline const std::string& GetInventoryRequest::_internal_character_id() const {
  return _impl_.character_id_.Get();
}
inline void GetInventoryRequest::_internal_set_character_id(const std::string& value) {
  ;


  _impl_.character_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInventoryRequest::_internal_mutable_character_id() {
  ;
  return _impl_.character_id_.Mutable( GetArenaForAllocation());
}
inline std::string* GetInventoryRequest::release_character_id() {
  // @@protoc_insertion_point(field_release:sro.character.GetInventoryRequest.character_id)
  return _impl_.character_id_.Release();
}
inline void GetInventoryRequest::set_allocated_character_id(std::string* value) {
  _impl_.character_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_id_.IsDefault()) {
          _impl_.character_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sro.character.GetInventoryRequest.character_id)
}

// -------------------------------------------------------------------

// GetInventoryResponse

// repeated .sro.character.Item items = 1;
inline int GetInventoryResponse::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GetInventoryResponse::items_size() const {
  return _internal_items_size();
}
inline void GetInventoryResponse::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::sro::character::Item* GetInventoryResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:sro.character.GetInventoryResponse.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Item >*
GetInventoryResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:sro.character.GetInventoryResponse.items)
  return _internal_mutable_items();
}
inline const ::sro::character::Item& GetInventoryResponse::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::sro::character::Item& GetInventoryResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:sro.character.GetInventoryResponse.items)
  return _internal_items(index);
}
inline ::sro::character::Item* GetInventoryResponse::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::sro::character::Item* GetInventoryResponse::add_items() {
  ::sro::character::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:sro.character.GetInventoryResponse.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sro::character::Item >&
GetInventoryResponse::items() const {
  // @@protoc_insertion_point(field_list:sro.character.GetInventoryResponse.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Item>&
GetInventoryResponse::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::sro::character::Item>*
GetInventoryResponse::_internal_mutable_items() {
  return &_impl_.items_;
}

// -------------------------------------------------------------------

// Item

// uint32 id = 1;
inline void Item::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t Item::id() const {
  // @@protoc_insertion_point(field_get:sro.character.Item.id)
  return _internal_id();
}
inline void Item::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sro.character.Item.id)
}
inline ::uint32_t Item::_internal_id() const {
  return _impl_.id_;
}
inline void Item::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// uint32 slot = 2;
inline void Item::clear_slot() {
  _impl_.slot_ = 0u;
}
inline ::uint32_t Item::slot() const {
  // @@protoc_insertion_point(field_get:sro.character.Item.slot)
  return _internal_slot();
}
inline void Item::set_slot(::uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:sro.character.Item.slot)
}
inline ::uint32_t Item::_internal_slot() const {
  return _impl_.slot_;
}
inline void Item::_internal_set_slot(::uint32_t value) {
  ;
  _impl_.slot_ = value;
}

// uint32 quantity = 3;
inline void Item::clear_quantity() {
  _impl_.quantity_ = 0u;
}
inline ::uint32_t Item::quantity() const {
  // @@protoc_insertion_point(field_get:sro.character.Item.quantity)
  return _internal_quantity();
}
inline void Item::set_quantity(::uint32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:sro.character.Item.quantity)
}
inline ::uint32_t Item::_internal_quantity() const {
  return _impl_.quantity_;
}
inline void Item::_internal_set_quantity(::uint32_t value) {
  ;
  _impl_.quantity_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace character
}  // namespace sro


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sro_2fcharacter_2finventory_2eproto_2epb_2eh
