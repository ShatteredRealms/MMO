#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sro/character/character.proto

#include "sro/character/character.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace sro {
namespace character {
template <typename>
PROTOBUF_CONSTEXPR GetCharacterRequest::GetCharacterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mask_)*/nullptr} {}
struct GetCharacterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCharacterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCharacterRequestDefaultTypeInternal() {}
  union {
    GetCharacterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCharacterRequestDefaultTypeInternal _GetCharacterRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetCharactersRequest::GetCharactersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mask_)*/nullptr
  , /*decltype(_impl_.filters_)*/nullptr} {}
struct GetCharactersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCharactersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCharactersRequestDefaultTypeInternal() {}
  union {
    GetCharactersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCharactersRequestDefaultTypeInternal _GetCharactersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetUserCharactersRequest::GetUserCharactersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mask_)*/nullptr
  , /*decltype(_impl_.filters_)*/nullptr} {}
struct GetUserCharactersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUserCharactersRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUserCharactersRequestDefaultTypeInternal() {}
  union {
    GetUserCharactersRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUserCharactersRequestDefaultTypeInternal _GetUserCharactersRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EditCharacterRequest::EditCharacterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mask_)*/nullptr
  , /*decltype(_impl_.character_)*/nullptr} {}
struct EditCharacterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditCharacterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditCharacterRequestDefaultTypeInternal() {}
  union {
    EditCharacterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditCharacterRequestDefaultTypeInternal _EditCharacterRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateCharacterRequest::CreateCharacterRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.realm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dimension_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.profession_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateCharacterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateCharacterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateCharacterRequestDefaultTypeInternal() {}
  union {
    CreateCharacterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateCharacterRequestDefaultTypeInternal _CreateCharacterRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Character::Character(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.owner_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.gender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.realm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dimension_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.profession_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.created_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.updated_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.deleted_at_)*/ ::int64_t{0}

  , /*decltype(_impl_.play_time_)*/ 0
} {}
struct CharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterDefaultTypeInternal() {}
  union {
    Character _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterDefaultTypeInternal _Character_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Characters::Characters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.characters_)*/{}
  , /*decltype(_impl_.total_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CharactersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharactersDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharactersDefaultTypeInternal() {}
  union {
    Characters _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharactersDefaultTypeInternal _Characters_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AddPlayTimeRequest::AddPlayTimeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPlayTimeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPlayTimeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPlayTimeRequestDefaultTypeInternal() {}
  union {
    AddPlayTimeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPlayTimeRequestDefaultTypeInternal _AddPlayTimeRequest_default_instance_;
}  // namespace character
}  // namespace sro
static ::_pb::Metadata file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_sro_2fcharacter_2fcharacter_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_sro_2fcharacter_2fcharacter_2eproto = nullptr;
const ::uint32_t TableStruct_sro_2fcharacter_2fcharacter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharacterRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharacterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharacterRequest, _impl_.mask_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharacterRequest, _impl_.id_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharactersRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharactersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharactersRequest, _impl_.mask_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetCharactersRequest, _impl_.filters_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::sro::character::GetUserCharactersRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetUserCharactersRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::GetUserCharactersRequest, _impl_.mask_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetUserCharactersRequest, _impl_.filters_),
    PROTOBUF_FIELD_OFFSET(::sro::character::GetUserCharactersRequest, _impl_.owner_id_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::sro::character::EditCharacterRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::character::EditCharacterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::EditCharacterRequest, _impl_.mask_),
    PROTOBUF_FIELD_OFFSET(::sro::character::EditCharacterRequest, _impl_.character_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::character::CreateCharacterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::CreateCharacterRequest, _impl_.owner_id_),
    PROTOBUF_FIELD_OFFSET(::sro::character::CreateCharacterRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::character::CreateCharacterRequest, _impl_.gender_),
    PROTOBUF_FIELD_OFFSET(::sro::character::CreateCharacterRequest, _impl_.realm_),
    PROTOBUF_FIELD_OFFSET(::sro::character::CreateCharacterRequest, _impl_.dimension_id_),
    PROTOBUF_FIELD_OFFSET(::sro::character::CreateCharacterRequest, _impl_.profession_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.owner_id_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.gender_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.realm_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.play_time_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.dimension_id_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.updated_at_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.deleted_at_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Character, _impl_.profession_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::character::Characters, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::Characters, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::sro::character::Characters, _impl_.characters_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::sro::character::AddPlayTimeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::sro::character::AddPlayTimeRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::sro::character::AddPlayTimeRequest, _impl_.time_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::sro::character::GetCharacterRequest)},
        { 12, 22, -1, sizeof(::sro::character::GetCharactersRequest)},
        { 24, 35, -1, sizeof(::sro::character::GetUserCharactersRequest)},
        { 38, 48, -1, sizeof(::sro::character::EditCharacterRequest)},
        { 50, -1, -1, sizeof(::sro::character::CreateCharacterRequest)},
        { 64, 84, -1, sizeof(::sro::character::Character)},
        { 96, -1, -1, sizeof(::sro::character::Characters)},
        { 106, -1, -1, sizeof(::sro::character::AddPlayTimeRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::sro::character::_GetCharacterRequest_default_instance_._instance,
    &::sro::character::_GetCharactersRequest_default_instance_._instance,
    &::sro::character::_GetUserCharactersRequest_default_instance_._instance,
    &::sro::character::_EditCharacterRequest_default_instance_._instance,
    &::sro::character::_CreateCharacterRequest_default_instance_._instance,
    &::sro::character::_Character_default_instance_._instance,
    &::sro::character::_Characters_default_instance_._instance,
    &::sro::character::_AddPlayTimeRequest_default_instance_._instance,
};
const char descriptor_table_protodef_sro_2fcharacter_2fcharacter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035sro/character/character.proto\022\rsro.cha"
    "racter\032\034google/api/annotations.proto\032\033go"
    "ogle/protobuf/empty.proto\032 google/protob"
    "uf/field_mask.proto\032\021sro/globals.proto\032\020"
    "sro/filter.proto\"K\n\023GetCharacterRequest\022"
    "(\n\004mask\030\001 \001(\0132\032.google.protobuf.FieldMas"
    "k\022\n\n\002id\030\002 \001(\t\"d\n\024GetCharactersRequest\022(\n"
    "\004mask\030\001 \001(\0132\032.google.protobuf.FieldMask\022"
    "\"\n\007filters\030\002 \001(\0132\021.sro.QueryFilters\"z\n\030G"
    "etUserCharactersRequest\022(\n\004mask\030\001 \001(\0132\032."
    "google.protobuf.FieldMask\022\"\n\007filters\030\002 \001"
    "(\0132\021.sro.QueryFilters\022\020\n\010owner_id\030\003 \001(\t\""
    "m\n\024EditCharacterRequest\022(\n\004mask\030\001 \001(\0132\032."
    "google.protobuf.FieldMask\022+\n\tcharacter\030\002"
    " \001(\0132\030.sro.character.Character\"\201\001\n\026Creat"
    "eCharacterRequest\022\020\n\010owner_id\030\001 \001(\t\022\014\n\004n"
    "ame\030\002 \001(\t\022\016\n\006gender\030\003 \001(\t\022\r\n\005realm\030\004 \001(\t"
    "\022\024\n\014dimension_id\030\005 \001(\t\022\022\n\nprofession\030\006 \001"
    "(\t\"\360\001\n\tCharacter\022\n\n\002id\030\001 \001(\t\022\020\n\010owner_id"
    "\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\016\n\006gender\030\004 \001(\t\022\r\n\005"
    "realm\030\005 \001(\t\022\021\n\tplay_time\030\006 \001(\005\022\037\n\010locati"
    "on\030\007 \001(\0132\r.sro.Location\022\024\n\014dimension_id\030"
    "\010 \001(\t\022\022\n\ncreated_at\030\t \001(\003\022\022\n\nupdated_at\030"
    "\n \001(\003\022\022\n\ndeleted_at\030\013 \001(\003\022\022\n\nprofession\030"
    "\014 \001(\t\"I\n\nCharacters\022\r\n\005total\030\001 \001(\003\022,\n\nch"
    "aracters\030\002 \003(\0132\030.sro.character.Character"
    "\".\n\022AddPlayTimeRequest\022\n\n\002id\030\001 \001(\t\022\014\n\004ti"
    "me\030\002 \001(\0052\270\006\n\020CharacterService\022l\n\014GetChar"
    "acter\022\".sro.character.GetCharacterReques"
    "t\032\030.sro.character.Character\"\036\202\323\344\223\002\030\022\026/v1"
    "/characters/id/{id}\022g\n\rGetCharacters\022#.s"
    "ro.character.GetCharactersRequest\032\031.sro."
    "character.Characters\"\026\202\323\344\223\002\020\022\016/v1/charac"
    "ters\022\203\001\n\024GetCharactersForUser\022\'.sro.char"
    "acter.GetUserCharactersRequest\032\031.sro.cha"
    "racter.Characters\"\'\202\323\344\223\002!\022\037/v1/character"
    "s/owner/{owner_id}\022m\n\017CreateCharacter\022%."
    "sro.character.CreateCharacterRequest\032\030.s"
    "ro.character.Character\"\031\202\323\344\223\002\023\"\016/v1/char"
    "acters:\001*\022X\n\017DeleteCharacter\022\r.sro.Targe"
    "tId\032\026.google.protobuf.Empty\"\036\202\323\344\223\002\030*\026/v1"
    "/characters/id/{id}\022{\n\rEditCharacter\022#.s"
    "ro.character.EditCharacterRequest\032\030.sro."
    "character.Character\"+\202\323\344\223\002%2 /v1/charact"
    "ers/id/{character.id}:\001*\022\200\001\n\024AddCharacte"
    "rPlayTime\022!.sro.character.AddPlayTimeReq"
    "uest\032\026.google.protobuf.Empty\"-\202\323\344\223\002\'2\037/v"
    "1/characters/id/{id}/playtime:\004timeB8Z6g"
    "ithub.com/ShatteredRealms/character-serv"
    "ice/pkg/pb;pbb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_sro_2fcharacter_2fcharacter_2eproto_deps[5] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
        &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
        &::descriptor_table_sro_2ffilter_2eproto,
        &::descriptor_table_sro_2fglobals_2eproto,
};
static ::absl::once_flag descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sro_2fcharacter_2fcharacter_2eproto = {
    false,
    false,
    1981,
    descriptor_table_protodef_sro_2fcharacter_2fcharacter_2eproto,
    "sro/character/character.proto",
    &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
    descriptor_table_sro_2fcharacter_2fcharacter_2eproto_deps,
    5,
    8,
    schemas,
    file_default_instances,
    TableStruct_sro_2fcharacter_2fcharacter_2eproto::offsets,
    file_level_metadata_sro_2fcharacter_2fcharacter_2eproto,
    file_level_enum_descriptors_sro_2fcharacter_2fcharacter_2eproto,
    file_level_service_descriptors_sro_2fcharacter_2fcharacter_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter() {
  return &descriptor_table_sro_2fcharacter_2fcharacter_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sro_2fcharacter_2fcharacter_2eproto(&descriptor_table_sro_2fcharacter_2fcharacter_2eproto);
namespace sro {
namespace character {
// ===================================================================

class GetCharacterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCharacterRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetCharacterRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask(const GetCharacterRequest* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetCharacterRequest::_Internal::mask(const GetCharacterRequest* msg) {
  return *msg->_impl_.mask_;
}
void GetCharacterRequest::clear_mask() {
  if (_impl_.mask_ != nullptr) _impl_.mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetCharacterRequest::GetCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.GetCharacterRequest)
}
GetCharacterRequest::GetCharacterRequest(const GetCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCharacterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.mask_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.character.GetCharacterRequest)
}

inline void GetCharacterRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.mask_){nullptr}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCharacterRequest::~GetCharacterRequest() {
  // @@protoc_insertion_point(destructor:sro.character.GetCharacterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCharacterRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mask_;
}

void GetCharacterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.GetCharacterRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.mask_ != nullptr);
    _impl_.mask_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCharacterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.GetCharacterRequest.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetCharacterRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.GetCharacterRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.FieldMask mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // string id = 2;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.GetCharacterRequest.id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.GetCharacterRequest)
  return target;
}

::size_t GetCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.GetCharacterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // .google.protobuf.FieldMask mask = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCharacterRequest::GetClassData() const { return &_class_data_; }


void GetCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCharacterRequest*>(&to_msg);
  auto& from = static_cast<const GetCharacterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.GetCharacterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
        from._internal_mask());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCharacterRequest::CopyFrom(const GetCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.GetCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCharacterRequest::IsInitialized() const {
  return true;
}

void GetCharacterRequest::InternalSwap(GetCharacterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  swap(_impl_.mask_, other->_impl_.mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCharacterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[0]);
}
// ===================================================================

class GetCharactersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCharactersRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetCharactersRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask(const GetCharactersRequest* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sro::QueryFilters& filters(const GetCharactersRequest* msg);
  static void set_has_filters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetCharactersRequest::_Internal::mask(const GetCharactersRequest* msg) {
  return *msg->_impl_.mask_;
}
const ::sro::QueryFilters&
GetCharactersRequest::_Internal::filters(const GetCharactersRequest* msg) {
  return *msg->_impl_.filters_;
}
void GetCharactersRequest::clear_mask() {
  if (_impl_.mask_ != nullptr) _impl_.mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetCharactersRequest::clear_filters() {
  if (_impl_.filters_ != nullptr) _impl_.filters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetCharactersRequest::GetCharactersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.GetCharactersRequest)
}
GetCharactersRequest::GetCharactersRequest(const GetCharactersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCharactersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.filters_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.mask_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.filters_ = new ::sro::QueryFilters(*from._impl_.filters_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.character.GetCharactersRequest)
}

inline void GetCharactersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.filters_){nullptr}
  };
}

GetCharactersRequest::~GetCharactersRequest() {
  // @@protoc_insertion_point(destructor:sro.character.GetCharactersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCharactersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mask_;
  if (this != internal_default_instance()) delete _impl_.filters_;
}

void GetCharactersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCharactersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.GetCharactersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.mask_ != nullptr);
      _impl_.mask_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.filters_ != nullptr);
      _impl_.filters_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCharactersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.QueryFilters filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filters(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetCharactersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.GetCharactersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.FieldMask mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // .sro.QueryFilters filters = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::filters(this),
        _Internal::filters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.GetCharactersRequest)
  return target;
}

::size_t GetCharactersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.GetCharactersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.FieldMask mask = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mask_);
    }

    // .sro.QueryFilters filters = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filters_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCharactersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCharactersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCharactersRequest::GetClassData() const { return &_class_data_; }


void GetCharactersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCharactersRequest*>(&to_msg);
  auto& from = static_cast<const GetCharactersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.GetCharactersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_mask());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_filters()->::sro::QueryFilters::MergeFrom(
          from._internal_filters());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCharactersRequest::CopyFrom(const GetCharactersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.GetCharactersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCharactersRequest::IsInitialized() const {
  return true;
}

void GetCharactersRequest::InternalSwap(GetCharactersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCharactersRequest, _impl_.filters_)
      + sizeof(GetCharactersRequest::_impl_.filters_)
      - PROTOBUF_FIELD_OFFSET(GetCharactersRequest, _impl_.mask_)>(
          reinterpret_cast<char*>(&_impl_.mask_),
          reinterpret_cast<char*>(&other->_impl_.mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCharactersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[1]);
}
// ===================================================================

class GetUserCharactersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetUserCharactersRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetUserCharactersRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask(const GetUserCharactersRequest* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sro::QueryFilters& filters(const GetUserCharactersRequest* msg);
  static void set_has_filters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
GetUserCharactersRequest::_Internal::mask(const GetUserCharactersRequest* msg) {
  return *msg->_impl_.mask_;
}
const ::sro::QueryFilters&
GetUserCharactersRequest::_Internal::filters(const GetUserCharactersRequest* msg) {
  return *msg->_impl_.filters_;
}
void GetUserCharactersRequest::clear_mask() {
  if (_impl_.mask_ != nullptr) _impl_.mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetUserCharactersRequest::clear_filters() {
  if (_impl_.filters_ != nullptr) _impl_.filters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetUserCharactersRequest::GetUserCharactersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.GetUserCharactersRequest)
}
GetUserCharactersRequest::GetUserCharactersRequest(const GetUserCharactersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetUserCharactersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_) {}

    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.filters_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    _this->_impl_.owner_id_.Set(from._internal_owner_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.mask_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.filters_ = new ::sro::QueryFilters(*from._impl_.filters_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.character.GetUserCharactersRequest)
}

inline void GetUserCharactersRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_) {}

    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.filters_){nullptr}
  };
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUserCharactersRequest::~GetUserCharactersRequest() {
  // @@protoc_insertion_point(destructor:sro.character.GetUserCharactersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUserCharactersRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mask_;
  if (this != internal_default_instance()) delete _impl_.filters_;
}

void GetUserCharactersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetUserCharactersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.GetUserCharactersRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.mask_ != nullptr);
      _impl_.mask_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.filters_ != nullptr);
      _impl_.filters_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserCharactersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.QueryFilters filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filters(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.GetUserCharactersRequest.owner_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetUserCharactersRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.GetUserCharactersRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.FieldMask mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // .sro.QueryFilters filters = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::filters(this),
        _Internal::filters(this).GetCachedSize(), target, stream);
  }

  // string owner_id = 3;
  if (!this->_internal_owner_id().empty()) {
    const std::string& _s = this->_internal_owner_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.GetUserCharactersRequest.owner_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.GetUserCharactersRequest)
  return target;
}

::size_t GetUserCharactersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.GetUserCharactersRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_id = 3;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.FieldMask mask = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mask_);
    }

    // .sro.QueryFilters filters = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filters_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUserCharactersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetUserCharactersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUserCharactersRequest::GetClassData() const { return &_class_data_; }


void GetUserCharactersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetUserCharactersRequest*>(&to_msg);
  auto& from = static_cast<const GetUserCharactersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.GetUserCharactersRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_mask());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_filters()->::sro::QueryFilters::MergeFrom(
          from._internal_filters());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUserCharactersRequest::CopyFrom(const GetUserCharactersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.GetUserCharactersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserCharactersRequest::IsInitialized() const {
  return true;
}

void GetUserCharactersRequest::InternalSwap(GetUserCharactersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_id_, lhs_arena,
                                       &other->_impl_.owner_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserCharactersRequest, _impl_.filters_)
      + sizeof(GetUserCharactersRequest::_impl_.filters_)
      - PROTOBUF_FIELD_OFFSET(GetUserCharactersRequest, _impl_.mask_)>(
          reinterpret_cast<char*>(&_impl_.mask_),
          reinterpret_cast<char*>(&other->_impl_.mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserCharactersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[2]);
}
// ===================================================================

class EditCharacterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EditCharacterRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EditCharacterRequest, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::FieldMask& mask(const EditCharacterRequest* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sro::character::Character& character(const EditCharacterRequest* msg);
  static void set_has_character(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::FieldMask&
EditCharacterRequest::_Internal::mask(const EditCharacterRequest* msg) {
  return *msg->_impl_.mask_;
}
const ::sro::character::Character&
EditCharacterRequest::_Internal::character(const EditCharacterRequest* msg) {
  return *msg->_impl_.character_;
}
void EditCharacterRequest::clear_mask() {
  if (_impl_.mask_ != nullptr) _impl_.mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EditCharacterRequest::EditCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.EditCharacterRequest)
}
EditCharacterRequest::EditCharacterRequest(const EditCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditCharacterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.character_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.mask_ = new ::PROTOBUF_NAMESPACE_ID::FieldMask(*from._impl_.mask_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.character_ = new ::sro::character::Character(*from._impl_.character_);
  }
  // @@protoc_insertion_point(copy_constructor:sro.character.EditCharacterRequest)
}

inline void EditCharacterRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mask_){nullptr}
    , decltype(_impl_.character_){nullptr}
  };
}

EditCharacterRequest::~EditCharacterRequest() {
  // @@protoc_insertion_point(destructor:sro.character.EditCharacterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditCharacterRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mask_;
  if (this != internal_default_instance()) delete _impl_.character_;
}

void EditCharacterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.EditCharacterRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.mask_ != nullptr);
      _impl_.mask_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.character_ != nullptr);
      _impl_.character_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCharacterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.FieldMask mask = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.character.Character character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EditCharacterRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.EditCharacterRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.FieldMask mask = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mask(this),
        _Internal::mask(this).GetCachedSize(), target, stream);
  }

  // .sro.character.Character character = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::character(this),
        _Internal::character(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.EditCharacterRequest)
  return target;
}

::size_t EditCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.EditCharacterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.FieldMask mask = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mask_);
    }

    // .sro.character.Character character = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.character_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditCharacterRequest::GetClassData() const { return &_class_data_; }


void EditCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditCharacterRequest*>(&to_msg);
  auto& from = static_cast<const EditCharacterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.EditCharacterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_mask()->::PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(
          from._internal_mask());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_character()->::sro::character::Character::MergeFrom(
          from._internal_character());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditCharacterRequest::CopyFrom(const EditCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.EditCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCharacterRequest::IsInitialized() const {
  return true;
}

void EditCharacterRequest::InternalSwap(EditCharacterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EditCharacterRequest, _impl_.character_)
      + sizeof(EditCharacterRequest::_impl_.character_)
      - PROTOBUF_FIELD_OFFSET(EditCharacterRequest, _impl_.mask_)>(
          reinterpret_cast<char*>(&_impl_.mask_),
          reinterpret_cast<char*>(&other->_impl_.mask_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCharacterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[3]);
}
// ===================================================================

class CreateCharacterRequest::_Internal {
 public:
};

CreateCharacterRequest::CreateCharacterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.CreateCharacterRequest)
}
CreateCharacterRequest::CreateCharacterRequest(const CreateCharacterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateCharacterRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.gender_) {}

    , decltype(_impl_.realm_) {}

    , decltype(_impl_.dimension_id_) {}

    , decltype(_impl_.profession_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    _this->_impl_.owner_id_.Set(from._internal_owner_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.gender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gender().empty()) {
    _this->_impl_.gender_.Set(from._internal_gender(), _this->GetArenaForAllocation());
  }
  _impl_.realm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.realm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realm().empty()) {
    _this->_impl_.realm_.Set(from._internal_realm(), _this->GetArenaForAllocation());
  }
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension_id().empty()) {
    _this->_impl_.dimension_id_.Set(from._internal_dimension_id(), _this->GetArenaForAllocation());
  }
  _impl_.profession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.profession_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profession().empty()) {
    _this->_impl_.profession_.Set(from._internal_profession(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sro.character.CreateCharacterRequest)
}

inline void CreateCharacterRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.gender_) {}

    , decltype(_impl_.realm_) {}

    , decltype(_impl_.dimension_id_) {}

    , decltype(_impl_.profession_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.realm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.realm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.profession_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateCharacterRequest::~CreateCharacterRequest() {
  // @@protoc_insertion_point(destructor:sro.character.CreateCharacterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateCharacterRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.gender_.Destroy();
  _impl_.realm_.Destroy();
  _impl_.dimension_id_.Destroy();
  _impl_.profession_.Destroy();
}

void CreateCharacterRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateCharacterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.CreateCharacterRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.gender_.ClearToEmpty();
  _impl_.realm_.ClearToEmpty();
  _impl_.dimension_id_.ClearToEmpty();
  _impl_.profession_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCharacterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.CreateCharacterRequest.owner_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.CreateCharacterRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_gender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.CreateCharacterRequest.gender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string realm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_realm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.CreateCharacterRequest.realm"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_dimension_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.CreateCharacterRequest.dimension_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string profession = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_profession();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.CreateCharacterRequest.profession"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateCharacterRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.CreateCharacterRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner_id = 1;
  if (!this->_internal_owner_id().empty()) {
    const std::string& _s = this->_internal_owner_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.CreateCharacterRequest.owner_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.CreateCharacterRequest.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string gender = 3;
  if (!this->_internal_gender().empty()) {
    const std::string& _s = this->_internal_gender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.CreateCharacterRequest.gender");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string realm = 4;
  if (!this->_internal_realm().empty()) {
    const std::string& _s = this->_internal_realm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.CreateCharacterRequest.realm");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string dimension_id = 5;
  if (!this->_internal_dimension_id().empty()) {
    const std::string& _s = this->_internal_dimension_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.CreateCharacterRequest.dimension_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string profession = 6;
  if (!this->_internal_profession().empty()) {
    const std::string& _s = this->_internal_profession();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.CreateCharacterRequest.profession");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.CreateCharacterRequest)
  return target;
}

::size_t CreateCharacterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.CreateCharacterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner_id = 1;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string gender = 3;
  if (!this->_internal_gender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gender());
  }

  // string realm = 4;
  if (!this->_internal_realm().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_realm());
  }

  // string dimension_id = 5;
  if (!this->_internal_dimension_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dimension_id());
  }

  // string profession = 6;
  if (!this->_internal_profession().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_profession());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCharacterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateCharacterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCharacterRequest::GetClassData() const { return &_class_data_; }


void CreateCharacterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateCharacterRequest*>(&to_msg);
  auto& from = static_cast<const CreateCharacterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.CreateCharacterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_gender().empty()) {
    _this->_internal_set_gender(from._internal_gender());
  }
  if (!from._internal_realm().empty()) {
    _this->_internal_set_realm(from._internal_realm());
  }
  if (!from._internal_dimension_id().empty()) {
    _this->_internal_set_dimension_id(from._internal_dimension_id());
  }
  if (!from._internal_profession().empty()) {
    _this->_internal_set_profession(from._internal_profession());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCharacterRequest::CopyFrom(const CreateCharacterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.CreateCharacterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCharacterRequest::IsInitialized() const {
  return true;
}

void CreateCharacterRequest::InternalSwap(CreateCharacterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_id_, lhs_arena,
                                       &other->_impl_.owner_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gender_, lhs_arena,
                                       &other->_impl_.gender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.realm_, lhs_arena,
                                       &other->_impl_.realm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dimension_id_, lhs_arena,
                                       &other->_impl_.dimension_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.profession_, lhs_arena,
                                       &other->_impl_.profession_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCharacterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[4]);
}
// ===================================================================

class Character::_Internal {
 public:
  using HasBits = decltype(std::declval<Character>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Character, _impl_._has_bits_);
  static const ::sro::Location& location(const Character* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sro::Location&
Character::_Internal::location(const Character* msg) {
  return *msg->_impl_.location_;
}
void Character::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Character::Character(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.Character)
}
Character::Character(const Character& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Character* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.owner_id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.gender_) {}

    , decltype(_impl_.realm_) {}

    , decltype(_impl_.dimension_id_) {}

    , decltype(_impl_.profession_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.created_at_) {}

    , decltype(_impl_.updated_at_) {}

    , decltype(_impl_.deleted_at_) {}

    , decltype(_impl_.play_time_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    _this->_impl_.owner_id_.Set(from._internal_owner_id(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.gender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gender().empty()) {
    _this->_impl_.gender_.Set(from._internal_gender(), _this->GetArenaForAllocation());
  }
  _impl_.realm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.realm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_realm().empty()) {
    _this->_impl_.realm_.Set(from._internal_realm(), _this->GetArenaForAllocation());
  }
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension_id().empty()) {
    _this->_impl_.dimension_id_.Set(from._internal_dimension_id(), _this->GetArenaForAllocation());
  }
  _impl_.profession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.profession_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profession().empty()) {
    _this->_impl_.profession_.Set(from._internal_profession(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.location_ = new ::sro::Location(*from._impl_.location_);
  }
  ::memcpy(&_impl_.created_at_, &from._impl_.created_at_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.play_time_) -
    reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.play_time_));
  // @@protoc_insertion_point(copy_constructor:sro.character.Character)
}

inline void Character::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.owner_id_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.gender_) {}

    , decltype(_impl_.realm_) {}

    , decltype(_impl_.dimension_id_) {}

    , decltype(_impl_.profession_) {}

    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.created_at_) { ::int64_t{0} }

    , decltype(_impl_.updated_at_) { ::int64_t{0} }

    , decltype(_impl_.deleted_at_) { ::int64_t{0} }

    , decltype(_impl_.play_time_) { 0 }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.gender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.realm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.realm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dimension_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dimension_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.profession_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.profession_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:sro.character.Character)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Character::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.owner_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.gender_.Destroy();
  _impl_.realm_.Destroy();
  _impl_.dimension_id_.Destroy();
  _impl_.profession_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
}

void Character::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Character::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.Character)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.owner_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.gender_.ClearToEmpty();
  _impl_.realm_.ClearToEmpty();
  _impl_.dimension_id_.ClearToEmpty();
  _impl_.profession_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  ::memset(&_impl_.created_at_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.play_time_) -
      reinterpret_cast<char*>(&_impl_.created_at_)) + sizeof(_impl_.play_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Character::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.Character.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.Character.owner_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.Character.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string gender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_gender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.Character.gender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string realm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_realm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.Character.realm"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 play_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .sro.Location location = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string dimension_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_dimension_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.Character.dimension_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 created_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.created_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 updated_at = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.updated_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 deleted_at = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.deleted_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string profession = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_profession();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.Character.profession"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Character::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.Character)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.Character.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    const std::string& _s = this->_internal_owner_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.Character.owner_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.Character.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string gender = 4;
  if (!this->_internal_gender().empty()) {
    const std::string& _s = this->_internal_gender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.Character.gender");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string realm = 5;
  if (!this->_internal_realm().empty()) {
    const std::string& _s = this->_internal_realm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.Character.realm");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int32 play_time = 6;
  if (this->_internal_play_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_play_time(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .sro.Location location = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // string dimension_id = 8;
  if (!this->_internal_dimension_id().empty()) {
    const std::string& _s = this->_internal_dimension_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.Character.dimension_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // int64 created_at = 9;
  if (this->_internal_created_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        9, this->_internal_created_at(), target);
  }

  // int64 updated_at = 10;
  if (this->_internal_updated_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_updated_at(), target);
  }

  // int64 deleted_at = 11;
  if (this->_internal_deleted_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        11, this->_internal_deleted_at(), target);
  }

  // string profession = 12;
  if (!this->_internal_profession().empty()) {
    const std::string& _s = this->_internal_profession();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.Character.profession");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.Character)
  return target;
}

::size_t Character::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.Character)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string owner_id = 2;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner_id());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string gender = 4;
  if (!this->_internal_gender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_gender());
  }

  // string realm = 5;
  if (!this->_internal_realm().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_realm());
  }

  // string dimension_id = 8;
  if (!this->_internal_dimension_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dimension_id());
  }

  // string profession = 12;
  if (!this->_internal_profession().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_profession());
  }

  // .sro.Location location = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // int64 created_at = 9;
  if (this->_internal_created_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_created_at());
  }

  // int64 updated_at = 10;
  if (this->_internal_updated_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_updated_at());
  }

  // int64 deleted_at = 11;
  if (this->_internal_deleted_at() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_deleted_at());
  }

  // int32 play_time = 6;
  if (this->_internal_play_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_play_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Character::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Character::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Character::GetClassData() const { return &_class_data_; }


void Character::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Character*>(&to_msg);
  auto& from = static_cast<const Character&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.Character)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_gender().empty()) {
    _this->_internal_set_gender(from._internal_gender());
  }
  if (!from._internal_realm().empty()) {
    _this->_internal_set_realm(from._internal_realm());
  }
  if (!from._internal_dimension_id().empty()) {
    _this->_internal_set_dimension_id(from._internal_dimension_id());
  }
  if (!from._internal_profession().empty()) {
    _this->_internal_set_profession(from._internal_profession());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_location()->::sro::Location::MergeFrom(
        from._internal_location());
  }
  if (from._internal_created_at() != 0) {
    _this->_internal_set_created_at(from._internal_created_at());
  }
  if (from._internal_updated_at() != 0) {
    _this->_internal_set_updated_at(from._internal_updated_at());
  }
  if (from._internal_deleted_at() != 0) {
    _this->_internal_set_deleted_at(from._internal_deleted_at());
  }
  if (from._internal_play_time() != 0) {
    _this->_internal_set_play_time(from._internal_play_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Character::CopyFrom(const Character& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.Character)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  return true;
}

void Character::InternalSwap(Character* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_id_, lhs_arena,
                                       &other->_impl_.owner_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gender_, lhs_arena,
                                       &other->_impl_.gender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.realm_, lhs_arena,
                                       &other->_impl_.realm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dimension_id_, lhs_arena,
                                       &other->_impl_.dimension_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.profession_, lhs_arena,
                                       &other->_impl_.profession_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Character, _impl_.play_time_)
      + sizeof(Character::_impl_.play_time_)
      - PROTOBUF_FIELD_OFFSET(Character, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Character::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[5]);
}
// ===================================================================

class Characters::_Internal {
 public:
};

Characters::Characters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.Characters)
}
Characters::Characters(const Characters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Characters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.characters_){from._impl_.characters_}
    , decltype(_impl_.total_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:sro.character.Characters)
}

inline void Characters::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.characters_){arena}
    , decltype(_impl_.total_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Characters::~Characters() {
  // @@protoc_insertion_point(destructor:sro.character.Characters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Characters::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_characters()->~RepeatedPtrField();
}

void Characters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Characters::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.Characters)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_characters()->Clear();
  _impl_.total_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Characters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .sro.character.Character characters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Characters::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.Characters)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_total(), target);
  }

  // repeated .sro.character.Character characters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_characters_size()); i < n; i++) {
    const auto& repfield = this->_internal_characters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.Characters)
  return target;
}

::size_t Characters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.Characters)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sro.character.Character characters = 2;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->_internal_characters()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Characters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Characters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Characters::GetClassData() const { return &_class_data_; }


void Characters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Characters*>(&to_msg);
  auto& from = static_cast<const Characters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.Characters)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_characters()->MergeFrom(from._internal_characters());
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Characters::CopyFrom(const Characters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.Characters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Characters::IsInitialized() const {
  return true;
}

void Characters::InternalSwap(Characters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_characters()->InternalSwap(other->_internal_mutable_characters());

  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Characters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[6]);
}
// ===================================================================

class AddPlayTimeRequest::_Internal {
 public:
};

AddPlayTimeRequest::AddPlayTimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:sro.character.AddPlayTimeRequest)
}
AddPlayTimeRequest::AddPlayTimeRequest(const AddPlayTimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddPlayTimeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.time_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:sro.character.AddPlayTimeRequest)
}

inline void AddPlayTimeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.time_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddPlayTimeRequest::~AddPlayTimeRequest() {
  // @@protoc_insertion_point(destructor:sro.character.AddPlayTimeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPlayTimeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
}

void AddPlayTimeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPlayTimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sro.character.AddPlayTimeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPlayTimeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sro.character.AddPlayTimeRequest.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddPlayTimeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sro.character.AddPlayTimeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "sro.character.AddPlayTimeRequest.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sro.character.AddPlayTimeRequest)
  return target;
}

::size_t AddPlayTimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sro.character.AddPlayTimeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // int32 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPlayTimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddPlayTimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPlayTimeRequest::GetClassData() const { return &_class_data_; }


void AddPlayTimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddPlayTimeRequest*>(&to_msg);
  auto& from = static_cast<const AddPlayTimeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sro.character.AddPlayTimeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPlayTimeRequest::CopyFrom(const AddPlayTimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sro.character.AddPlayTimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayTimeRequest::IsInitialized() const {
  return true;
}

void AddPlayTimeRequest::InternalSwap(AddPlayTimeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);

  swap(_impl_.time_, other->_impl_.time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPlayTimeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_getter, &descriptor_table_sro_2fcharacter_2fcharacter_2eproto_once,
      file_level_metadata_sro_2fcharacter_2fcharacter_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace character
}  // namespace sro
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sro::character::GetCharacterRequest*
Arena::CreateMaybeMessage< ::sro::character::GetCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::GetCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::GetCharactersRequest*
Arena::CreateMaybeMessage< ::sro::character::GetCharactersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::GetCharactersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::GetUserCharactersRequest*
Arena::CreateMaybeMessage< ::sro::character::GetUserCharactersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::GetUserCharactersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::EditCharacterRequest*
Arena::CreateMaybeMessage< ::sro::character::EditCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::EditCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::CreateCharacterRequest*
Arena::CreateMaybeMessage< ::sro::character::CreateCharacterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::CreateCharacterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::Character*
Arena::CreateMaybeMessage< ::sro::character::Character >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::Character >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::Characters*
Arena::CreateMaybeMessage< ::sro::character::Characters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::Characters >(arena);
}
template<> PROTOBUF_NOINLINE ::sro::character::AddPlayTimeRequest*
Arena::CreateMaybeMessage< ::sro::character::AddPlayTimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sro::character::AddPlayTimeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
