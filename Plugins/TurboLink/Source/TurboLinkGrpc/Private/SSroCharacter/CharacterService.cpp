//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroCharacter/CharacterService.h"
#include "SSroCharacter/CharacterClient.h"
#include "CharacterService_Private.h"
#include "CharacterMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SGoogleProtobuf/FieldMaskMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "SSro/FilterMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UCharacterService::UCharacterService()
	: d(new UCharacterService::Private())
{
}

UCharacterService::~UCharacterService()
{
	delete d;
}

void UCharacterService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("CharacterService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to CharacterService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::character::CharacterService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UCharacterService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UCharacterServiceClient* UCharacterService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UCharacterServiceClient>();
	return client;
}

void UCharacterService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UCharacterService::CallGetCharacter(const FGrpcSroCharacterGetCharacterRequest& Request, FGetCharacterResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharacterServiceGetCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharacterServiceGetCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetCharacter();
	InnerClient->OnGetCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharacterServiceGetCharacterLambdaWrapper::OnResponse);
	InnerClient->GetCharacter(lambdaWrapper->Handle, Request, MetaData);
}

void UCharacterService::CallGetCharacters(const FGrpcSroCharacterGetCharactersRequest& Request, FGetCharactersResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharacterServiceGetCharactersLambdaWrapper* lambdaWrapper = NewObject<UCharacterServiceGetCharactersLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetCharacters();
	InnerClient->OnGetCharactersResponse.AddUniqueDynamic(lambdaWrapper, &UCharacterServiceGetCharactersLambdaWrapper::OnResponse);
	InnerClient->GetCharacters(lambdaWrapper->Handle, Request, MetaData);
}

void UCharacterService::CallGetCharactersForUser(const FGrpcSroCharacterGetUserCharactersRequest& Request, FGetCharactersForUserResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharacterServiceGetCharactersForUserLambdaWrapper* lambdaWrapper = NewObject<UCharacterServiceGetCharactersForUserLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetCharactersForUser();
	InnerClient->OnGetCharactersForUserResponse.AddUniqueDynamic(lambdaWrapper, &UCharacterServiceGetCharactersForUserLambdaWrapper::OnResponse);
	InnerClient->GetCharactersForUser(lambdaWrapper->Handle, Request, MetaData);
}

void UCharacterService::CallCreateCharacter(const FGrpcSroCharacterCreateCharacterRequest& Request, FCreateCharacterResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharacterServiceCreateCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharacterServiceCreateCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateCharacter();
	InnerClient->OnCreateCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharacterServiceCreateCharacterLambdaWrapper::OnResponse);
	InnerClient->CreateCharacter(lambdaWrapper->Handle, Request, MetaData);
}

void UCharacterService::CallDeleteCharacter(const FGrpcSroTargetId& Request, FDeleteCharacterResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharacterServiceDeleteCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharacterServiceDeleteCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteCharacter();
	InnerClient->OnDeleteCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharacterServiceDeleteCharacterLambdaWrapper::OnResponse);
	InnerClient->DeleteCharacter(lambdaWrapper->Handle, Request, MetaData);
}

void UCharacterService::CallEditCharacter(const FGrpcSroCharacterEditCharacterRequest& Request, FEditCharacterResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharacterServiceEditCharacterLambdaWrapper* lambdaWrapper = NewObject<UCharacterServiceEditCharacterLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitEditCharacter();
	InnerClient->OnEditCharacterResponse.AddUniqueDynamic(lambdaWrapper, &UCharacterServiceEditCharacterLambdaWrapper::OnResponse);
	InnerClient->EditCharacter(lambdaWrapper->Handle, Request, MetaData);
}

void UCharacterService::CallAddCharacterPlayTime(const FGrpcSroCharacterAddPlayTimeRequest& Request, FAddCharacterPlayTimeResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UCharacterServiceAddCharacterPlayTimeLambdaWrapper* lambdaWrapper = NewObject<UCharacterServiceAddCharacterPlayTimeLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitAddCharacterPlayTime();
	InnerClient->OnAddCharacterPlayTimeResponse.AddUniqueDynamic(lambdaWrapper, &UCharacterServiceAddCharacterPlayTimeLambdaWrapper::OnResponse);
	InnerClient->AddCharacterPlayTime(lambdaWrapper->Handle, Request, MetaData);
}
