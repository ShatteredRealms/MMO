//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroCharacter/InventoryNode.h"
#include "SSroCharacter/InventoryService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallInventoryServiceGetInventory* UCallInventoryServiceGetInventory::GetInventory(UObject* WorldContextObject, const FGrpcSroCharacterGetInventoryRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallInventoryServiceGetInventory* node = NewObject<UCallInventoryServiceGetInventory>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->InventoryService = Cast<UInventoryService>(turboLinkManager->MakeService("InventoryService"));
	if (node->InventoryService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->InventoryService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallInventoryServiceGetInventory::OnServiceStateChanged);
	return node;
}

void UCallInventoryServiceGetInventory::Activate()
{
	InventoryService->Connect();
}

void UCallInventoryServiceGetInventory::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroCharacterGetInventoryResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		InventoryServiceClient = InventoryService->MakeClient();
		InventoryServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallInventoryServiceGetInventory::OnContextStateChange);
		InventoryServiceClient->OnGetInventoryResponse.AddUniqueDynamic(this, &UCallInventoryServiceGetInventory::OnResponse);

		Context = InventoryServiceClient->InitGetInventory();
		InventoryServiceClient->GetInventory(Context, Request, MetaData);
	}
}

void UCallInventoryServiceGetInventory::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallInventoryServiceGetInventory::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroCharacterGetInventoryResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetInventoryResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallInventoryServiceGetInventory::Shutdown()
{
	InventoryService->OnServiceStateChanged.RemoveDynamic(this, &UCallInventoryServiceGetInventory::OnServiceStateChanged);
	if (InventoryServiceClient != nullptr)
	{
		InventoryService->RemoveClient(InventoryServiceClient);
		InventoryServiceClient->Shutdown();
		InventoryServiceClient = nullptr;
	}

	if (InventoryService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(InventoryService);
		InventoryService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
