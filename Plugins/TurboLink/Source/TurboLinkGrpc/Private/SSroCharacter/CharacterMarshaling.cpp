//Generated by TurboLink CodeGenerator, do not edit!
#include "CharacterMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SGoogleProtobuf/FieldMaskMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "SSro/FilterMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::character::GetCharacterRequest* in, FGrpcSroCharacterGetCharacterRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->mask()), &(out->Mask));
    out->Id=UTF8_TO_TCHAR(in->id().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterGetCharacterRequest* in, ::sro::character::GetCharacterRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Mask), out->mutable_mask());
    out->set_id(TCHAR_TO_UTF8(*(in->Id)));
}

void GRPC_TO_TURBOLINK(const ::sro::character::GetCharactersRequest* in, FGrpcSroCharacterGetCharactersRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->mask()), &(out->Mask));
    GRPC_TO_TURBOLINK(&(in->filters()), &(out->Filters));
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterGetCharactersRequest* in, ::sro::character::GetCharactersRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Mask), out->mutable_mask());
    TURBOLINK_TO_GRPC(&(in->Filters), out->mutable_filters());
}

void GRPC_TO_TURBOLINK(const ::sro::character::GetUserCharactersRequest* in, FGrpcSroCharacterGetUserCharactersRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->mask()), &(out->Mask));
    GRPC_TO_TURBOLINK(&(in->filters()), &(out->Filters));
    out->OwnerId=UTF8_TO_TCHAR(in->owner_id().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterGetUserCharactersRequest* in, ::sro::character::GetUserCharactersRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Mask), out->mutable_mask());
    TURBOLINK_TO_GRPC(&(in->Filters), out->mutable_filters());
    out->set_owner_id(TCHAR_TO_UTF8(*(in->OwnerId)));
}

void GRPC_TO_TURBOLINK(const ::sro::character::EditCharacterRequest* in, FGrpcSroCharacterEditCharacterRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->mask()), &(out->Mask));
    {
        FGrpcSroCharacterCharacter field;
        GRPC_TO_TURBOLINK(&(in->character()), &field);
        out->Character = MakeShareable(new FGrpcSroCharacterCharacter(field));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterEditCharacterRequest* in, ::sro::character::EditCharacterRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Mask), out->mutable_mask());
    TURBOLINK_TO_GRPC(in->Character.Get(), out->mutable_character());
}

void GRPC_TO_TURBOLINK(const ::sro::character::CreateCharacterRequest* in, FGrpcSroCharacterCreateCharacterRequest* out)
{
    out->OwnerId=UTF8_TO_TCHAR(in->owner_id().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Gender=UTF8_TO_TCHAR(in->gender().c_str());
    out->Realm=UTF8_TO_TCHAR(in->realm().c_str());
    out->DimensionId=UTF8_TO_TCHAR(in->dimension_id().c_str());
    out->Profession=UTF8_TO_TCHAR(in->profession().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterCreateCharacterRequest* in, ::sro::character::CreateCharacterRequest* out)
{
    out->set_owner_id(TCHAR_TO_UTF8(*(in->OwnerId)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_gender(TCHAR_TO_UTF8(*(in->Gender)));
    out->set_realm(TCHAR_TO_UTF8(*(in->Realm)));
    out->set_dimension_id(TCHAR_TO_UTF8(*(in->DimensionId)));
    out->set_profession(TCHAR_TO_UTF8(*(in->Profession)));
}

void GRPC_TO_TURBOLINK(const ::sro::character::Character* in, FGrpcSroCharacterCharacter* out)
{
    out->Id=UTF8_TO_TCHAR(in->id().c_str());
    out->OwnerId=UTF8_TO_TCHAR(in->owner_id().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Gender=UTF8_TO_TCHAR(in->gender().c_str());
    out->Realm=UTF8_TO_TCHAR(in->realm().c_str());
    out->PlayTime=in->play_time();
    GRPC_TO_TURBOLINK(&(in->location()), &(out->Location));
    out->DimensionId=UTF8_TO_TCHAR(in->dimension_id().c_str());
    out->CreatedAt=in->created_at();
    out->UpdatedAt=in->updated_at();
    out->DeletedAt=in->deleted_at();
    out->Profession=UTF8_TO_TCHAR(in->profession().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterCharacter* in, ::sro::character::Character* out)
{
    out->set_id(TCHAR_TO_UTF8(*(in->Id)));
    out->set_owner_id(TCHAR_TO_UTF8(*(in->OwnerId)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_gender(TCHAR_TO_UTF8(*(in->Gender)));
    out->set_realm(TCHAR_TO_UTF8(*(in->Realm)));
    out->set_play_time(in->PlayTime);
    TURBOLINK_TO_GRPC(&(in->Location), out->mutable_location());
    out->set_dimension_id(TCHAR_TO_UTF8(*(in->DimensionId)));
    out->set_created_at(in->CreatedAt);
    out->set_updated_at(in->UpdatedAt);
    out->set_deleted_at(in->DeletedAt);
    out->set_profession(TCHAR_TO_UTF8(*(in->Profession)));
}

void GRPC_TO_TURBOLINK(const ::sro::character::Characters* in, FGrpcSroCharacterCharacters* out)
{
    out->Total=in->total();
    out->Characters.Empty();
    for (int i=0; i<in->characters_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->characters(i)), &(out->Characters.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterCharacters* in, ::sro::character::Characters* out)
{
    out->set_total(in->Total);
    for(const auto& value : in->Characters) {
        TURBOLINK_TO_GRPC(&value, out->add_characters());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::character::AddPlayTimeRequest* in, FGrpcSroCharacterAddPlayTimeRequest* out)
{
    out->Id=UTF8_TO_TCHAR(in->id().c_str());
    out->Time=in->time();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterAddPlayTimeRequest* in, ::sro::character::AddPlayTimeRequest* out)
{
    out->set_id(TCHAR_TO_UTF8(*(in->Id)));
    out->set_time(in->Time);
}

