//Generated by TurboLink CodeGenerator, do not edit!
#include "InventoryMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/FieldMaskMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::character::GetInventoryRequest* in, FGrpcSroCharacterGetInventoryRequest* out)
{
    GRPC_TO_TURBOLINK(&(in->mask()), &(out->Mask));
    out->CharacterId=UTF8_TO_TCHAR(in->character_id().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterGetInventoryRequest* in, ::sro::character::GetInventoryRequest* out)
{
    TURBOLINK_TO_GRPC(&(in->Mask), out->mutable_mask());
    out->set_character_id(TCHAR_TO_UTF8(*(in->CharacterId)));
}

void GRPC_TO_TURBOLINK(const ::sro::character::GetInventoryResponse* in, FGrpcSroCharacterGetInventoryResponse* out)
{
    out->Items.Empty();
    for (int i=0; i<in->items_size(); ++i) {
        FGrpcSroCharacterItem field;
        GRPC_TO_TURBOLINK(&(in->items(i)), &field);
        out->Items.Add(MakeShareable(new FGrpcSroCharacterItem(field)));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterGetInventoryResponse* in, ::sro::character::GetInventoryResponse* out)
{
    for(const auto& value : in->Items) {
        TURBOLINK_TO_GRPC(value.Get(), out->add_items());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::character::Item* in, FGrpcSroCharacterItem* out)
{
    out->Id=in->id();
    out->Slot=in->slot();
    out->Quantity=in->quantity();
}

void TURBOLINK_TO_GRPC(const FGrpcSroCharacterItem* in, ::sro::character::Item* out)
{
    out->set_id(in->Id);
    out->set_slot(in->Slot);
    out->set_quantity(in->Quantity);
}

