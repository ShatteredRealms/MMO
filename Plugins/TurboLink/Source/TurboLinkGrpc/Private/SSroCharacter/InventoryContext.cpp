//Generated by TurboLink CodeGenerator, do not edit!
#include "InventoryContext.h"
#include "SSroCharacter/InventoryClient.h"
#include "InventoryService_Private.h"
#include "InventoryMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/FieldMaskMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_InventoryService_GetInventory::GrpcContext_InventoryService_GetInventory(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_InventoryService_GetInventory::Call(const FGrpcSroCharacterGetInventoryRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::character::GetInventoryRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UInventoryService* service = (UInventoryService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetInventory(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_InventoryService_GetInventory::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::character::GetInventoryResponse* _RpcResponse) 
		{
			UInventoryServiceClient* client = (UInventoryServiceClient*)(this->Client);
			if (!(client->OnGetInventoryResponse.IsBound())) return;

			FGrpcSroCharacterGetInventoryResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetInventoryResponse.Broadcast(Handle, _Result, response);
		}
	);
}
