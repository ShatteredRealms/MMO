//Generated by TurboLink CodeGenerator, do not edit!
#include "CharacterContext.h"
#include "SSroCharacter/CharacterClient.h"
#include "CharacterService_Private.h"
#include "CharacterMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SGoogleProtobuf/FieldMaskMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "SSro/FilterMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_CharacterService_GetCharacter::GrpcContext_CharacterService_GetCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharacterService_GetCharacter::Call(const FGrpcSroCharacterGetCharacterRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::character::GetCharacterRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharacterService* service = (UCharacterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharacterService_GetCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::character::Character* _RpcResponse) 
		{
			UCharacterServiceClient* client = (UCharacterServiceClient*)(this->Client);
			if (!(client->OnGetCharacterResponse.IsBound())) return;

			FGrpcSroCharacterCharacter response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetCharacterResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_CharacterService_GetCharacters::GrpcContext_CharacterService_GetCharacters(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharacterService_GetCharacters::Call(const FGrpcSroCharacterGetCharactersRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::character::GetCharactersRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharacterService* service = (UCharacterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetCharacters(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharacterService_GetCharacters::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::character::Characters* _RpcResponse) 
		{
			UCharacterServiceClient* client = (UCharacterServiceClient*)(this->Client);
			if (!(client->OnGetCharactersResponse.IsBound())) return;

			FGrpcSroCharacterCharacters response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetCharactersResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_CharacterService_GetCharactersForUser::GrpcContext_CharacterService_GetCharactersForUser(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharacterService_GetCharactersForUser::Call(const FGrpcSroCharacterGetUserCharactersRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::character::GetUserCharactersRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharacterService* service = (UCharacterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetCharactersForUser(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharacterService_GetCharactersForUser::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::character::Characters* _RpcResponse) 
		{
			UCharacterServiceClient* client = (UCharacterServiceClient*)(this->Client);
			if (!(client->OnGetCharactersForUserResponse.IsBound())) return;

			FGrpcSroCharacterCharacters response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetCharactersForUserResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_CharacterService_CreateCharacter::GrpcContext_CharacterService_CreateCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharacterService_CreateCharacter::Call(const FGrpcSroCharacterCreateCharacterRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::character::CreateCharacterRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharacterService* service = (UCharacterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharacterService_CreateCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::character::Character* _RpcResponse) 
		{
			UCharacterServiceClient* client = (UCharacterServiceClient*)(this->Client);
			if (!(client->OnCreateCharacterResponse.IsBound())) return;

			FGrpcSroCharacterCharacter response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateCharacterResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_CharacterService_DeleteCharacter::GrpcContext_CharacterService_DeleteCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharacterService_DeleteCharacter::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharacterService* service = (UCharacterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharacterService_DeleteCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UCharacterServiceClient* client = (UCharacterServiceClient*)(this->Client);
			if (!(client->OnDeleteCharacterResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDeleteCharacterResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_CharacterService_EditCharacter::GrpcContext_CharacterService_EditCharacter(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharacterService_EditCharacter::Call(const FGrpcSroCharacterEditCharacterRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::character::EditCharacterRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharacterService* service = (UCharacterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncEditCharacter(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharacterService_EditCharacter::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::character::Character* _RpcResponse) 
		{
			UCharacterServiceClient* client = (UCharacterServiceClient*)(this->Client);
			if (!(client->OnEditCharacterResponse.IsBound())) return;

			FGrpcSroCharacterCharacter response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnEditCharacterResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_CharacterService_AddCharacterPlayTime::GrpcContext_CharacterService_AddCharacterPlayTime(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_CharacterService_AddCharacterPlayTime::Call(const FGrpcSroCharacterAddPlayTimeRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::character::AddPlayTimeRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UCharacterService* service = (UCharacterService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncAddCharacterPlayTime(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_CharacterService_AddCharacterPlayTime::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UCharacterServiceClient* client = (UCharacterServiceClient*)(this->Client);
			if (!(client->OnAddCharacterPlayTimeResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnAddCharacterPlayTimeResponse.Broadcast(Handle, _Result, response);
		}
	);
}
