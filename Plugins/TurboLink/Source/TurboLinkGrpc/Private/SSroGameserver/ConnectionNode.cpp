//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGameserver/ConnectionNode.h"
#include "SSroGameserver/ConnectionService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallConnectionServiceConnectGameServer* UCallConnectionServiceConnectGameServer::ConnectGameServer(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallConnectionServiceConnectGameServer* node = NewObject<UCallConnectionServiceConnectGameServer>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ConnectionService = Cast<UConnectionService>(turboLinkManager->MakeService("ConnectionService"));
	if (node->ConnectionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ConnectionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallConnectionServiceConnectGameServer::OnServiceStateChanged);
	return node;
}

void UCallConnectionServiceConnectGameServer::Activate()
{
	ConnectionService->Connect();
}

void UCallConnectionServiceConnectGameServer::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverConnectGameServerResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ConnectionServiceClient = ConnectionService->MakeClient();
		ConnectionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallConnectionServiceConnectGameServer::OnContextStateChange);
		ConnectionServiceClient->OnConnectGameServerResponse.AddUniqueDynamic(this, &UCallConnectionServiceConnectGameServer::OnResponse);

		Context = ConnectionServiceClient->InitConnectGameServer();
		ConnectionServiceClient->ConnectGameServer(Context, Request, MetaData);
	}
}

void UCallConnectionServiceConnectGameServer::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallConnectionServiceConnectGameServer::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverConnectGameServerResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnConnectGameServerResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallConnectionServiceConnectGameServer::Shutdown()
{
	ConnectionService->OnServiceStateChanged.RemoveDynamic(this, &UCallConnectionServiceConnectGameServer::OnServiceStateChanged);
	if (ConnectionServiceClient != nullptr)
	{
		ConnectionService->RemoveClient(ConnectionServiceClient);
		ConnectionServiceClient->Shutdown();
		ConnectionServiceClient = nullptr;
	}

	if (ConnectionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ConnectionService);
		ConnectionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallConnectionServiceVerifyConnect* UCallConnectionServiceVerifyConnect::VerifyConnect(UObject* WorldContextObject, const FGrpcSroGameserverVerifyConnectRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallConnectionServiceVerifyConnect* node = NewObject<UCallConnectionServiceVerifyConnect>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ConnectionService = Cast<UConnectionService>(turboLinkManager->MakeService("ConnectionService"));
	if (node->ConnectionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ConnectionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallConnectionServiceVerifyConnect::OnServiceStateChanged);
	return node;
}

void UCallConnectionServiceVerifyConnect::Activate()
{
	ConnectionService->Connect();
}

void UCallConnectionServiceVerifyConnect::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroTargetId response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ConnectionServiceClient = ConnectionService->MakeClient();
		ConnectionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallConnectionServiceVerifyConnect::OnContextStateChange);
		ConnectionServiceClient->OnVerifyConnectResponse.AddUniqueDynamic(this, &UCallConnectionServiceVerifyConnect::OnResponse);

		Context = ConnectionServiceClient->InitVerifyConnect();
		ConnectionServiceClient->VerifyConnect(Context, Request, MetaData);
	}
}

void UCallConnectionServiceVerifyConnect::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallConnectionServiceVerifyConnect::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroTargetId& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnVerifyConnectResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallConnectionServiceVerifyConnect::Shutdown()
{
	ConnectionService->OnServiceStateChanged.RemoveDynamic(this, &UCallConnectionServiceVerifyConnect::OnServiceStateChanged);
	if (ConnectionServiceClient != nullptr)
	{
		ConnectionService->RemoveClient(ConnectionServiceClient);
		ConnectionServiceClient->Shutdown();
		ConnectionServiceClient = nullptr;
	}

	if (ConnectionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ConnectionService);
		ConnectionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallConnectionServiceTransferPlayer* UCallConnectionServiceTransferPlayer::TransferPlayer(UObject* WorldContextObject, const FGrpcSroGameserverTransferPlayerRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallConnectionServiceTransferPlayer* node = NewObject<UCallConnectionServiceTransferPlayer>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ConnectionService = Cast<UConnectionService>(turboLinkManager->MakeService("ConnectionService"));
	if (node->ConnectionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ConnectionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallConnectionServiceTransferPlayer::OnServiceStateChanged);
	return node;
}

void UCallConnectionServiceTransferPlayer::Activate()
{
	ConnectionService->Connect();
}

void UCallConnectionServiceTransferPlayer::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverConnectGameServerResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ConnectionServiceClient = ConnectionService->MakeClient();
		ConnectionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallConnectionServiceTransferPlayer::OnContextStateChange);
		ConnectionServiceClient->OnTransferPlayerResponse.AddUniqueDynamic(this, &UCallConnectionServiceTransferPlayer::OnResponse);

		Context = ConnectionServiceClient->InitTransferPlayer();
		ConnectionServiceClient->TransferPlayer(Context, Request, MetaData);
	}
}

void UCallConnectionServiceTransferPlayer::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallConnectionServiceTransferPlayer::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverConnectGameServerResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnTransferPlayerResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallConnectionServiceTransferPlayer::Shutdown()
{
	ConnectionService->OnServiceStateChanged.RemoveDynamic(this, &UCallConnectionServiceTransferPlayer::OnServiceStateChanged);
	if (ConnectionServiceClient != nullptr)
	{
		ConnectionService->RemoveClient(ConnectionServiceClient);
		ConnectionServiceClient->Shutdown();
		ConnectionServiceClient = nullptr;
	}

	if (ConnectionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ConnectionService);
		ConnectionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallConnectionServiceIsCharacterPlaying* UCallConnectionServiceIsCharacterPlaying::IsCharacterPlaying(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallConnectionServiceIsCharacterPlaying* node = NewObject<UCallConnectionServiceIsCharacterPlaying>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ConnectionService = Cast<UConnectionService>(turboLinkManager->MakeService("ConnectionService"));
	if (node->ConnectionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ConnectionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallConnectionServiceIsCharacterPlaying::OnServiceStateChanged);
	return node;
}

void UCallConnectionServiceIsCharacterPlaying::Activate()
{
	ConnectionService->Connect();
}

void UCallConnectionServiceIsCharacterPlaying::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverConnectionStatus response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ConnectionServiceClient = ConnectionService->MakeClient();
		ConnectionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallConnectionServiceIsCharacterPlaying::OnContextStateChange);
		ConnectionServiceClient->OnIsCharacterPlayingResponse.AddUniqueDynamic(this, &UCallConnectionServiceIsCharacterPlaying::OnResponse);

		Context = ConnectionServiceClient->InitIsCharacterPlaying();
		ConnectionServiceClient->IsCharacterPlaying(Context, Request, MetaData);
	}
}

void UCallConnectionServiceIsCharacterPlaying::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallConnectionServiceIsCharacterPlaying::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverConnectionStatus& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnIsCharacterPlayingResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallConnectionServiceIsCharacterPlaying::Shutdown()
{
	ConnectionService->OnServiceStateChanged.RemoveDynamic(this, &UCallConnectionServiceIsCharacterPlaying::OnServiceStateChanged);
	if (ConnectionServiceClient != nullptr)
	{
		ConnectionService->RemoveClient(ConnectionServiceClient);
		ConnectionServiceClient->Shutdown();
		ConnectionServiceClient = nullptr;
	}

	if (ConnectionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ConnectionService);
		ConnectionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallConnectionServiceIsUserPlaying* UCallConnectionServiceIsUserPlaying::IsUserPlaying(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallConnectionServiceIsUserPlaying* node = NewObject<UCallConnectionServiceIsUserPlaying>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->ConnectionService = Cast<UConnectionService>(turboLinkManager->MakeService("ConnectionService"));
	if (node->ConnectionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->ConnectionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallConnectionServiceIsUserPlaying::OnServiceStateChanged);
	return node;
}

void UCallConnectionServiceIsUserPlaying::Activate()
{
	ConnectionService->Connect();
}

void UCallConnectionServiceIsUserPlaying::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverConnectionStatus response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		ConnectionServiceClient = ConnectionService->MakeClient();
		ConnectionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallConnectionServiceIsUserPlaying::OnContextStateChange);
		ConnectionServiceClient->OnIsUserPlayingResponse.AddUniqueDynamic(this, &UCallConnectionServiceIsUserPlaying::OnResponse);

		Context = ConnectionServiceClient->InitIsUserPlaying();
		ConnectionServiceClient->IsUserPlaying(Context, Request, MetaData);
	}
}

void UCallConnectionServiceIsUserPlaying::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallConnectionServiceIsUserPlaying::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverConnectionStatus& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnIsUserPlayingResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallConnectionServiceIsUserPlaying::Shutdown()
{
	ConnectionService->OnServiceStateChanged.RemoveDynamic(this, &UCallConnectionServiceIsUserPlaying::OnServiceStateChanged);
	if (ConnectionServiceClient != nullptr)
	{
		ConnectionService->RemoveClient(ConnectionServiceClient);
		ConnectionServiceClient->Shutdown();
		ConnectionServiceClient = nullptr;
	}

	if (ConnectionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(ConnectionService);
		ConnectionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
