//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGameserver/DimensionService.h"
#include "SSroGameserver/DimensionClient.h"
#include "DimensionService_Private.h"
#include "DimensionMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UDimensionService::UDimensionService()
	: d(new UDimensionService::Private())
{
}

UDimensionService::~UDimensionService()
{
	delete d;
}

void UDimensionService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("DimensionService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to DimensionService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::gameserver::DimensionService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UDimensionService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UDimensionServiceClient* UDimensionService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UDimensionServiceClient>();
	return client;
}

void UDimensionService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UDimensionService::CallGetDimension(const FGrpcSroTargetId& Request, FGetDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UDimensionServiceGetDimensionLambdaWrapper* lambdaWrapper = NewObject<UDimensionServiceGetDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetDimension();
	InnerClient->OnGetDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UDimensionServiceGetDimensionLambdaWrapper::OnResponse);
	InnerClient->GetDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UDimensionService::CallGetDimensions(const FGrpcGoogleProtobufEmpty& Request, FGetDimensionsResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UDimensionServiceGetDimensionsLambdaWrapper* lambdaWrapper = NewObject<UDimensionServiceGetDimensionsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetDimensions();
	InnerClient->OnGetDimensionsResponse.AddUniqueDynamic(lambdaWrapper, &UDimensionServiceGetDimensionsLambdaWrapper::OnResponse);
	InnerClient->GetDimensions(lambdaWrapper->Handle, Request, MetaData);
}

void UDimensionService::CallCreateDimension(const FGrpcSroGameserverCreateDimensionRequest& Request, FCreateDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UDimensionServiceCreateDimensionLambdaWrapper* lambdaWrapper = NewObject<UDimensionServiceCreateDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateDimension();
	InnerClient->OnCreateDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UDimensionServiceCreateDimensionLambdaWrapper::OnResponse);
	InnerClient->CreateDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UDimensionService::CallDuplicateDimension(const FGrpcSroGameserverDuplicateDimensionRequest& Request, FDuplicateDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UDimensionServiceDuplicateDimensionLambdaWrapper* lambdaWrapper = NewObject<UDimensionServiceDuplicateDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDuplicateDimension();
	InnerClient->OnDuplicateDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UDimensionServiceDuplicateDimensionLambdaWrapper::OnResponse);
	InnerClient->DuplicateDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UDimensionService::CallEditDimension(const FGrpcSroGameserverEditDimensionRequest& Request, FEditDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UDimensionServiceEditDimensionLambdaWrapper* lambdaWrapper = NewObject<UDimensionServiceEditDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitEditDimension();
	InnerClient->OnEditDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UDimensionServiceEditDimensionLambdaWrapper::OnResponse);
	InnerClient->EditDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UDimensionService::CallDeleteDimension(const FGrpcSroTargetId& Request, FDeleteDimensionResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UDimensionServiceDeleteDimensionLambdaWrapper* lambdaWrapper = NewObject<UDimensionServiceDeleteDimensionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteDimension();
	InnerClient->OnDeleteDimensionResponse.AddUniqueDynamic(lambdaWrapper, &UDimensionServiceDeleteDimensionLambdaWrapper::OnResponse);
	InnerClient->DeleteDimension(lambdaWrapper->Handle, Request, MetaData);
}

void UDimensionService::CallGameServerUpdate(const FGrpcSroTargetId& Request, FGameServerUpdateResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UDimensionServiceGameServerUpdateLambdaWrapper* lambdaWrapper = NewObject<UDimensionServiceGameServerUpdateLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGameServerUpdate();
	InnerClient->OnGameServerUpdateResponse.AddUniqueDynamic(lambdaWrapper, &UDimensionServiceGameServerUpdateLambdaWrapper::OnResponse);
	InnerClient->GameServerUpdate(lambdaWrapper->Handle, Request, MetaData);
}
