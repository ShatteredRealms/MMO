//Generated by TurboLink CodeGenerator, do not edit!
#include "DimensionMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::gameserver::CreateDimensionRequest* in, FGrpcSroGameserverCreateDimensionRequest* out)
{
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Version=UTF8_TO_TCHAR(in->version().c_str());
    out->MapIds.Empty();
    for (int i=0; i<in->map_ids_size(); ++i) {
        out->MapIds.Add(UTF8_TO_TCHAR(in->map_ids(i).c_str()));
    }
    out->Location=UTF8_TO_TCHAR(in->location().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverCreateDimensionRequest* in, ::sro::gameserver::CreateDimensionRequest* out)
{
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_version(TCHAR_TO_UTF8(*(in->Version)));
    for(const auto& value : in->MapIds) {
        out->add_map_ids(TCHAR_TO_UTF8(*(value)));
    } 
    out->set_location(TCHAR_TO_UTF8(*(in->Location)));
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::DuplicateDimensionRequest* in, FGrpcSroGameserverDuplicateDimensionRequest* out)
{
    out->TargetId=UTF8_TO_TCHAR(in->target_id().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverDuplicateDimensionRequest* in, ::sro::gameserver::DuplicateDimensionRequest* out)
{
    out->set_target_id(TCHAR_TO_UTF8(*(in->TargetId)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::EditDimensionRequest* in, FGrpcSroGameserverEditDimensionRequest* out)
{
    out->TargetId=UTF8_TO_TCHAR(in->target_id().c_str());
    switch(in->optional_name_case())
    {
    case ::sro::gameserver::EditDimensionRequest::kName:
        out->Optional_name.Name=UTF8_TO_TCHAR(in->name().c_str());
        out->Optional_name.Optional_nameCase = EGrpcSroGameserverEditDimensionRequestOptional_name::Name;
        break;
    }
    switch(in->optional_version_case())
    {
    case ::sro::gameserver::EditDimensionRequest::kVersion:
        out->Optional_version.Version=UTF8_TO_TCHAR(in->version().c_str());
        out->Optional_version.Optional_versionCase = EGrpcSroGameserverEditDimensionRequestOptional_version::Version;
        break;
    }
    out->EditMaps=in->edit_maps();
    out->MapIds.Empty();
    for (int i=0; i<in->map_ids_size(); ++i) {
        out->MapIds.Add(UTF8_TO_TCHAR(in->map_ids(i).c_str()));
    }
    switch(in->optional_location_case())
    {
    case ::sro::gameserver::EditDimensionRequest::kLocation:
        out->Optional_location.Location=UTF8_TO_TCHAR(in->location().c_str());
        out->Optional_location.Optional_locationCase = EGrpcSroGameserverEditDimensionRequestOptional_location::Location;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverEditDimensionRequest* in, ::sro::gameserver::EditDimensionRequest* out)
{
    out->set_target_id(TCHAR_TO_UTF8(*(in->TargetId)));
    switch (in->Optional_name.Optional_nameCase)
    {
    case EGrpcSroGameserverEditDimensionRequestOptional_name::Name:
        out->set_name(TCHAR_TO_UTF8(*(in->Optional_name.Name)));
        break;
    }
    switch (in->Optional_version.Optional_versionCase)
    {
    case EGrpcSroGameserverEditDimensionRequestOptional_version::Version:
        out->set_version(TCHAR_TO_UTF8(*(in->Optional_version.Version)));
        break;
    }
    out->set_edit_maps(in->EditMaps);
    for(const auto& value : in->MapIds) {
        out->add_map_ids(TCHAR_TO_UTF8(*(value)));
    } 
    switch (in->Optional_location.Optional_locationCase)
    {
    case EGrpcSroGameserverEditDimensionRequestOptional_location::Location:
        out->set_location(TCHAR_TO_UTF8(*(in->Optional_location.Location)));
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::Dimension* in, FGrpcSroGameserverDimension* out)
{
    out->Id=UTF8_TO_TCHAR(in->id().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->Version=UTF8_TO_TCHAR(in->version().c_str());
    out->MapIds.Empty();
    for (int i=0; i<in->map_ids_size(); ++i) {
        out->MapIds.Add(UTF8_TO_TCHAR(in->map_ids(i).c_str()));
    }
    out->Location=UTF8_TO_TCHAR(in->location().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverDimension* in, ::sro::gameserver::Dimension* out)
{
    out->set_id(TCHAR_TO_UTF8(*(in->Id)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_version(TCHAR_TO_UTF8(*(in->Version)));
    for(const auto& value : in->MapIds) {
        out->add_map_ids(TCHAR_TO_UTF8(*(value)));
    } 
    out->set_location(TCHAR_TO_UTF8(*(in->Location)));
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::Dimensions* in, FGrpcSroGameserverDimensions* out)
{
    out->Dimensions.Empty();
    for (int i=0; i<in->dimensions_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->dimensions(i)), &(out->Dimensions.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverDimensions* in, ::sro::gameserver::Dimensions* out)
{
    for(const auto& value : in->Dimensions) {
        TURBOLINK_TO_GRPC(&value, out->add_dimensions());
    } 
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::GameServerUpdateResponse* in, FGrpcSroGameserverGameServerUpdateResponse* out)
{
    out->MapIdsCreated.Empty();
    for (int i=0; i<in->map_ids_created_size(); ++i) {
        out->MapIdsCreated.Add(UTF8_TO_TCHAR(in->map_ids_created(i).c_str()));
    }
    out->MapIdsDeleted.Empty();
    for (int i=0; i<in->map_ids_deleted_size(); ++i) {
        out->MapIdsDeleted.Add(UTF8_TO_TCHAR(in->map_ids_deleted(i).c_str()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverGameServerUpdateResponse* in, ::sro::gameserver::GameServerUpdateResponse* out)
{
    for(const auto& value : in->MapIdsCreated) {
        out->add_map_ids_created(TCHAR_TO_UTF8(*(value)));
    } 
    for(const auto& value : in->MapIdsDeleted) {
        out->add_map_ids_deleted(TCHAR_TO_UTF8(*(value)));
    } 
}

