//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGameserver/MapClient.h"
#include "SSroGameserver/MapService.h"
#include "MapContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UMapServiceClient::InitGetMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_MapService_GetMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UMapServiceClient::GetMap(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetMap = StaticCastSharedPtr<GrpcContext_MapService_GetMap>(*context);
		contextGetMap->Call(Request);
	}
}

FGrpcContextHandle UMapServiceClient::InitGetMaps()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_MapService_GetMaps>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UMapServiceClient::GetMaps(FGrpcContextHandle Handle, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetMaps = StaticCastSharedPtr<GrpcContext_MapService_GetMaps>(*context);
		contextGetMaps->Call(Request);
	}
}

FGrpcContextHandle UMapServiceClient::InitCreateMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_MapService_CreateMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UMapServiceClient::CreateMap(FGrpcContextHandle Handle, const FGrpcSroGameserverCreateMapRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextCreateMap = StaticCastSharedPtr<GrpcContext_MapService_CreateMap>(*context);
		contextCreateMap->Call(Request);
	}
}

FGrpcContextHandle UMapServiceClient::InitEditMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_MapService_EditMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UMapServiceClient::EditMap(FGrpcContextHandle Handle, const FGrpcSroGameserverEditMapRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextEditMap = StaticCastSharedPtr<GrpcContext_MapService_EditMap>(*context);
		contextEditMap->Call(Request);
	}
}

FGrpcContextHandle UMapServiceClient::InitDeleteMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_MapService_DeleteMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UMapServiceClient::DeleteMap(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextDeleteMap = StaticCastSharedPtr<GrpcContext_MapService_DeleteMap>(*context);
		contextDeleteMap->Call(Request);
	}
}

void UMapServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UMapServiceClient::Shutdown()
{
	OnGetMapResponse.Clear();
	OnGetMapsResponse.Clear();
	OnCreateMapResponse.Clear();
	OnEditMapResponse.Clear();
	OnDeleteMapResponse.Clear();
	Super::Shutdown();
}

