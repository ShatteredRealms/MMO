//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGameserver/DimensionClient.h"
#include "SSroGameserver/DimensionService.h"
#include "DimensionContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UDimensionServiceClient::InitGetDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DimensionService_GetDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDimensionServiceClient::GetDimension(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetDimension = StaticCastSharedPtr<GrpcContext_DimensionService_GetDimension>(*context);
		contextGetDimension->Call(Request);
	}
}

FGrpcContextHandle UDimensionServiceClient::InitGetDimensions()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DimensionService_GetDimensions>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDimensionServiceClient::GetDimensions(FGrpcContextHandle Handle, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGetDimensions = StaticCastSharedPtr<GrpcContext_DimensionService_GetDimensions>(*context);
		contextGetDimensions->Call(Request);
	}
}

FGrpcContextHandle UDimensionServiceClient::InitCreateDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DimensionService_CreateDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDimensionServiceClient::CreateDimension(FGrpcContextHandle Handle, const FGrpcSroGameserverCreateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextCreateDimension = StaticCastSharedPtr<GrpcContext_DimensionService_CreateDimension>(*context);
		contextCreateDimension->Call(Request);
	}
}

FGrpcContextHandle UDimensionServiceClient::InitDuplicateDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DimensionService_DuplicateDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDimensionServiceClient::DuplicateDimension(FGrpcContextHandle Handle, const FGrpcSroGameserverDuplicateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextDuplicateDimension = StaticCastSharedPtr<GrpcContext_DimensionService_DuplicateDimension>(*context);
		contextDuplicateDimension->Call(Request);
	}
}

FGrpcContextHandle UDimensionServiceClient::InitEditDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DimensionService_EditDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDimensionServiceClient::EditDimension(FGrpcContextHandle Handle, const FGrpcSroGameserverEditDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextEditDimension = StaticCastSharedPtr<GrpcContext_DimensionService_EditDimension>(*context);
		contextEditDimension->Call(Request);
	}
}

FGrpcContextHandle UDimensionServiceClient::InitDeleteDimension()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DimensionService_DeleteDimension>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDimensionServiceClient::DeleteDimension(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextDeleteDimension = StaticCastSharedPtr<GrpcContext_DimensionService_DeleteDimension>(*context);
		contextDeleteDimension->Call(Request);
	}
}

FGrpcContextHandle UDimensionServiceClient::InitGameServerUpdate()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_DimensionService_GameServerUpdate>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UDimensionServiceClient::GameServerUpdate(FGrpcContextHandle Handle, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		for (auto const& Pair : MetaData)
		{
			context->Get()->RpcContext->AddMetadata(TCHAR_TO_UTF8(*Pair.Key), TCHAR_TO_UTF8(*Pair.Value));
		}
		auto contextGameServerUpdate = StaticCastSharedPtr<GrpcContext_DimensionService_GameServerUpdate>(*context);
		contextGameServerUpdate->Call(Request);
	}
}

void UDimensionServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UDimensionServiceClient::Shutdown()
{
	OnGetDimensionResponse.Clear();
	OnGetDimensionsResponse.Clear();
	OnCreateDimensionResponse.Clear();
	OnDuplicateDimensionResponse.Clear();
	OnEditDimensionResponse.Clear();
	OnDeleteDimensionResponse.Clear();
	OnGameServerUpdateResponse.Clear();
	Super::Shutdown();
}

