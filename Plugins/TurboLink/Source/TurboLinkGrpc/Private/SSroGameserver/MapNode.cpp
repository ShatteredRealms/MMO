//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGameserver/MapNode.h"
#include "SSroGameserver/MapService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallMapServiceGetMap* UCallMapServiceGetMap::GetMap(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallMapServiceGetMap* node = NewObject<UCallMapServiceGetMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->MapService = Cast<UMapService>(turboLinkManager->MakeService("MapService"));
	if (node->MapService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->MapService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMapServiceGetMap::OnServiceStateChanged);
	return node;
}

void UCallMapServiceGetMap::Activate()
{
	MapService->Connect();
}

void UCallMapServiceGetMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverMap response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MapServiceClient = MapService->MakeClient();
		MapServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMapServiceGetMap::OnContextStateChange);
		MapServiceClient->OnGetMapResponse.AddUniqueDynamic(this, &UCallMapServiceGetMap::OnResponse);

		Context = MapServiceClient->InitGetMap();
		MapServiceClient->GetMap(Context, Request, MetaData);
	}
}

void UCallMapServiceGetMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMapServiceGetMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverMap& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMapServiceGetMap::Shutdown()
{
	MapService->OnServiceStateChanged.RemoveDynamic(this, &UCallMapServiceGetMap::OnServiceStateChanged);
	if (MapServiceClient != nullptr)
	{
		MapService->RemoveClient(MapServiceClient);
		MapServiceClient->Shutdown();
		MapServiceClient = nullptr;
	}

	if (MapService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(MapService);
		MapService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallMapServiceGetMaps* UCallMapServiceGetMaps::GetMaps(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	UCallMapServiceGetMaps* node = NewObject<UCallMapServiceGetMaps>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->MapService = Cast<UMapService>(turboLinkManager->MakeService("MapService"));
	if (node->MapService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->MapService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMapServiceGetMaps::OnServiceStateChanged);
	return node;
}

void UCallMapServiceGetMaps::Activate()
{
	MapService->Connect();
}

void UCallMapServiceGetMaps::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverMaps response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MapServiceClient = MapService->MakeClient();
		MapServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMapServiceGetMaps::OnContextStateChange);
		MapServiceClient->OnGetMapsResponse.AddUniqueDynamic(this, &UCallMapServiceGetMaps::OnResponse);

		Context = MapServiceClient->InitGetMaps();
		MapServiceClient->GetMaps(Context, Request, MetaData);
	}
}

void UCallMapServiceGetMaps::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMapServiceGetMaps::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverMaps& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetMapsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMapServiceGetMaps::Shutdown()
{
	MapService->OnServiceStateChanged.RemoveDynamic(this, &UCallMapServiceGetMaps::OnServiceStateChanged);
	if (MapServiceClient != nullptr)
	{
		MapService->RemoveClient(MapServiceClient);
		MapServiceClient->Shutdown();
		MapServiceClient = nullptr;
	}

	if (MapService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(MapService);
		MapService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallMapServiceCreateMap* UCallMapServiceCreateMap::CreateMap(UObject* WorldContextObject, const FGrpcSroGameserverCreateMapRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallMapServiceCreateMap* node = NewObject<UCallMapServiceCreateMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->MapService = Cast<UMapService>(turboLinkManager->MakeService("MapService"));
	if (node->MapService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->MapService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMapServiceCreateMap::OnServiceStateChanged);
	return node;
}

void UCallMapServiceCreateMap::Activate()
{
	MapService->Connect();
}

void UCallMapServiceCreateMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverMap response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MapServiceClient = MapService->MakeClient();
		MapServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMapServiceCreateMap::OnContextStateChange);
		MapServiceClient->OnCreateMapResponse.AddUniqueDynamic(this, &UCallMapServiceCreateMap::OnResponse);

		Context = MapServiceClient->InitCreateMap();
		MapServiceClient->CreateMap(Context, Request, MetaData);
	}
}

void UCallMapServiceCreateMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMapServiceCreateMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverMap& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMapServiceCreateMap::Shutdown()
{
	MapService->OnServiceStateChanged.RemoveDynamic(this, &UCallMapServiceCreateMap::OnServiceStateChanged);
	if (MapServiceClient != nullptr)
	{
		MapService->RemoveClient(MapServiceClient);
		MapServiceClient->Shutdown();
		MapServiceClient = nullptr;
	}

	if (MapService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(MapService);
		MapService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallMapServiceEditMap* UCallMapServiceEditMap::EditMap(UObject* WorldContextObject, const FGrpcSroGameserverEditMapRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallMapServiceEditMap* node = NewObject<UCallMapServiceEditMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->MapService = Cast<UMapService>(turboLinkManager->MakeService("MapService"));
	if (node->MapService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->MapService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMapServiceEditMap::OnServiceStateChanged);
	return node;
}

void UCallMapServiceEditMap::Activate()
{
	MapService->Connect();
}

void UCallMapServiceEditMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverMap response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MapServiceClient = MapService->MakeClient();
		MapServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMapServiceEditMap::OnContextStateChange);
		MapServiceClient->OnEditMapResponse.AddUniqueDynamic(this, &UCallMapServiceEditMap::OnResponse);

		Context = MapServiceClient->InitEditMap();
		MapServiceClient->EditMap(Context, Request, MetaData);
	}
}

void UCallMapServiceEditMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMapServiceEditMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverMap& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnEditMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMapServiceEditMap::Shutdown()
{
	MapService->OnServiceStateChanged.RemoveDynamic(this, &UCallMapServiceEditMap::OnServiceStateChanged);
	if (MapServiceClient != nullptr)
	{
		MapService->RemoveClient(MapServiceClient);
		MapServiceClient->Shutdown();
		MapServiceClient = nullptr;
	}

	if (MapService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(MapService);
		MapService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallMapServiceDeleteMap* UCallMapServiceDeleteMap::DeleteMap(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallMapServiceDeleteMap* node = NewObject<UCallMapServiceDeleteMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->MapService = Cast<UMapService>(turboLinkManager->MakeService("MapService"));
	if (node->MapService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->MapService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallMapServiceDeleteMap::OnServiceStateChanged);
	return node;
}

void UCallMapServiceDeleteMap::Activate()
{
	MapService->Connect();
}

void UCallMapServiceDeleteMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		MapServiceClient = MapService->MakeClient();
		MapServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallMapServiceDeleteMap::OnContextStateChange);
		MapServiceClient->OnDeleteMapResponse.AddUniqueDynamic(this, &UCallMapServiceDeleteMap::OnResponse);

		Context = MapServiceClient->InitDeleteMap();
		MapServiceClient->DeleteMap(Context, Request, MetaData);
	}
}

void UCallMapServiceDeleteMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallMapServiceDeleteMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDeleteMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallMapServiceDeleteMap::Shutdown()
{
	MapService->OnServiceStateChanged.RemoveDynamic(this, &UCallMapServiceDeleteMap::OnServiceStateChanged);
	if (MapServiceClient != nullptr)
	{
		MapService->RemoveClient(MapServiceClient);
		MapServiceClient->Shutdown();
		MapServiceClient = nullptr;
	}

	if (MapService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(MapService);
		MapService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
