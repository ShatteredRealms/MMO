//Generated by TurboLink CodeGenerator, do not edit!
#include "DimensionContext.h"
#include "SSroGameserver/DimensionClient.h"
#include "DimensionService_Private.h"
#include "DimensionMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_DimensionService_GetDimension::GrpcContext_DimensionService_GetDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_DimensionService_GetDimension::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UDimensionService* service = (UDimensionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_DimensionService_GetDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::Dimension* _RpcResponse) 
		{
			UDimensionServiceClient* client = (UDimensionServiceClient*)(this->Client);
			if (!(client->OnGetDimensionResponse.IsBound())) return;

			FGrpcSroGameserverDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_DimensionService_GetDimensions::GrpcContext_DimensionService_GetDimensions(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_DimensionService_GetDimensions::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UDimensionService* service = (UDimensionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetDimensions(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_DimensionService_GetDimensions::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::Dimensions* _RpcResponse) 
		{
			UDimensionServiceClient* client = (UDimensionServiceClient*)(this->Client);
			if (!(client->OnGetDimensionsResponse.IsBound())) return;

			FGrpcSroGameserverDimensions response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetDimensionsResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_DimensionService_CreateDimension::GrpcContext_DimensionService_CreateDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_DimensionService_CreateDimension::Call(const FGrpcSroGameserverCreateDimensionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gameserver::CreateDimensionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UDimensionService* service = (UDimensionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_DimensionService_CreateDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::Dimension* _RpcResponse) 
		{
			UDimensionServiceClient* client = (UDimensionServiceClient*)(this->Client);
			if (!(client->OnCreateDimensionResponse.IsBound())) return;

			FGrpcSroGameserverDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_DimensionService_DuplicateDimension::GrpcContext_DimensionService_DuplicateDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_DimensionService_DuplicateDimension::Call(const FGrpcSroGameserverDuplicateDimensionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gameserver::DuplicateDimensionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UDimensionService* service = (UDimensionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDuplicateDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_DimensionService_DuplicateDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::Dimension* _RpcResponse) 
		{
			UDimensionServiceClient* client = (UDimensionServiceClient*)(this->Client);
			if (!(client->OnDuplicateDimensionResponse.IsBound())) return;

			FGrpcSroGameserverDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDuplicateDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_DimensionService_EditDimension::GrpcContext_DimensionService_EditDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_DimensionService_EditDimension::Call(const FGrpcSroGameserverEditDimensionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gameserver::EditDimensionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UDimensionService* service = (UDimensionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncEditDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_DimensionService_EditDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::Dimension* _RpcResponse) 
		{
			UDimensionServiceClient* client = (UDimensionServiceClient*)(this->Client);
			if (!(client->OnEditDimensionResponse.IsBound())) return;

			FGrpcSroGameserverDimension response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnEditDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_DimensionService_DeleteDimension::GrpcContext_DimensionService_DeleteDimension(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_DimensionService_DeleteDimension::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UDimensionService* service = (UDimensionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDeleteDimension(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_DimensionService_DeleteDimension::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::google::protobuf::Empty* _RpcResponse) 
		{
			UDimensionServiceClient* client = (UDimensionServiceClient*)(this->Client);
			if (!(client->OnDeleteDimensionResponse.IsBound())) return;

			FGrpcGoogleProtobufEmpty response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDeleteDimensionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_DimensionService_GameServerUpdate::GrpcContext_DimensionService_GameServerUpdate(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_DimensionService_GameServerUpdate::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UDimensionService* service = (UDimensionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGameServerUpdate(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_DimensionService_GameServerUpdate::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::GameServerUpdateResponse* _RpcResponse) 
		{
			UDimensionServiceClient* client = (UDimensionServiceClient*)(this->Client);
			if (!(client->OnGameServerUpdateResponse.IsBound())) return;

			FGrpcSroGameserverGameServerUpdateResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGameServerUpdateResponse.Broadcast(Handle, _Result, response);
		}
	);
}
