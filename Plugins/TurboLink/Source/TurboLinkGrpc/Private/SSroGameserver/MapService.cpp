//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGameserver/MapService.h"
#include "SSroGameserver/MapClient.h"
#include "MapService_Private.h"
#include "MapMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UMapService::UMapService()
	: d(new UMapService::Private())
{
}

UMapService::~UMapService()
{
	delete d;
}

void UMapService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("MapService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to MapService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel(TCHAR_TO_UTF8(*serviceEndPoint), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = sro::gameserver::MapService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UMapService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UMapServiceClient* UMapService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UMapServiceClient>();
	return client;
}

void UMapService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UMapService::CallGetMap(const FGrpcSroTargetId& Request, FGetMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMapServiceGetMapLambdaWrapper* lambdaWrapper = NewObject<UMapServiceGetMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetMap();
	InnerClient->OnGetMapResponse.AddUniqueDynamic(lambdaWrapper, &UMapServiceGetMapLambdaWrapper::OnResponse);
	InnerClient->GetMap(lambdaWrapper->Handle, Request, MetaData);
}

void UMapService::CallGetMaps(const FGrpcGoogleProtobufEmpty& Request, FGetMapsResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMapServiceGetMapsLambdaWrapper* lambdaWrapper = NewObject<UMapServiceGetMapsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetMaps();
	InnerClient->OnGetMapsResponse.AddUniqueDynamic(lambdaWrapper, &UMapServiceGetMapsLambdaWrapper::OnResponse);
	InnerClient->GetMaps(lambdaWrapper->Handle, Request, MetaData);
}

void UMapService::CallCreateMap(const FGrpcSroGameserverCreateMapRequest& Request, FCreateMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMapServiceCreateMapLambdaWrapper* lambdaWrapper = NewObject<UMapServiceCreateMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateMap();
	InnerClient->OnCreateMapResponse.AddUniqueDynamic(lambdaWrapper, &UMapServiceCreateMapLambdaWrapper::OnResponse);
	InnerClient->CreateMap(lambdaWrapper->Handle, Request, MetaData);
}

void UMapService::CallEditMap(const FGrpcSroGameserverEditMapRequest& Request, FEditMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMapServiceEditMapLambdaWrapper* lambdaWrapper = NewObject<UMapServiceEditMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitEditMap();
	InnerClient->OnEditMapResponse.AddUniqueDynamic(lambdaWrapper, &UMapServiceEditMapLambdaWrapper::OnResponse);
	InnerClient->EditMap(lambdaWrapper->Handle, Request, MetaData);
}

void UMapService::CallDeleteMap(const FGrpcSroTargetId& Request, FDeleteMapResponseLambda ResponseLambda, TMap<FString, FString>& MetaData)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UMapServiceDeleteMapLambdaWrapper* lambdaWrapper = NewObject<UMapServiceDeleteMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDeleteMap();
	InnerClient->OnDeleteMapResponse.AddUniqueDynamic(lambdaWrapper, &UMapServiceDeleteMapLambdaWrapper::OnResponse);
	InnerClient->DeleteMap(lambdaWrapper->Handle, Request, MetaData);
}
