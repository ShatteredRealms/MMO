//Generated by TurboLink CodeGenerator, do not edit!
#include "MapMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"

void GRPC_TO_TURBOLINK(const ::sro::gameserver::CreateMapRequest* in, FGrpcSroGameserverCreateMapRequest* out)
{
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->MapPath=UTF8_TO_TCHAR(in->map_path().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverCreateMapRequest* in, ::sro::gameserver::CreateMapRequest* out)
{
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_map_path(TCHAR_TO_UTF8(*(in->MapPath)));
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::EditMapRequest* in, FGrpcSroGameserverEditMapRequest* out)
{
    out->TargetId=UTF8_TO_TCHAR(in->target_id().c_str());
    switch(in->optional_name_case())
    {
    case ::sro::gameserver::EditMapRequest::kName:
        out->Optional_name.Name=UTF8_TO_TCHAR(in->name().c_str());
        out->Optional_name.Optional_nameCase = EGrpcSroGameserverEditMapRequestOptional_name::Name;
        break;
    }
    switch(in->optional_map_path_case())
    {
    case ::sro::gameserver::EditMapRequest::kMapPath:
        out->Optional_map_path.MapPath=UTF8_TO_TCHAR(in->map_path().c_str());
        out->Optional_map_path.Optional_map_pathCase = EGrpcSroGameserverEditMapRequestOptional_map_path::MapPath;
        break;
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverEditMapRequest* in, ::sro::gameserver::EditMapRequest* out)
{
    out->set_target_id(TCHAR_TO_UTF8(*(in->TargetId)));
    switch (in->Optional_name.Optional_nameCase)
    {
    case EGrpcSroGameserverEditMapRequestOptional_name::Name:
        out->set_name(TCHAR_TO_UTF8(*(in->Optional_name.Name)));
        break;
    }
    switch (in->Optional_map_path.Optional_map_pathCase)
    {
    case EGrpcSroGameserverEditMapRequestOptional_map_path::MapPath:
        out->set_map_path(TCHAR_TO_UTF8(*(in->Optional_map_path.MapPath)));
        break;
    }
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::Map* in, FGrpcSroGameserverMap* out)
{
    out->Id=UTF8_TO_TCHAR(in->id().c_str());
    out->Name=UTF8_TO_TCHAR(in->name().c_str());
    out->MapPath=UTF8_TO_TCHAR(in->map_path().c_str());
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverMap* in, ::sro::gameserver::Map* out)
{
    out->set_id(TCHAR_TO_UTF8(*(in->Id)));
    out->set_name(TCHAR_TO_UTF8(*(in->Name)));
    out->set_map_path(TCHAR_TO_UTF8(*(in->MapPath)));
}

void GRPC_TO_TURBOLINK(const ::sro::gameserver::Maps* in, FGrpcSroGameserverMaps* out)
{
    out->Maps.Empty();
    for (int i=0; i<in->maps_size(); ++i) {
        GRPC_TO_TURBOLINK(&(in->maps(i)), &(out->Maps.AddZeroed_GetRef()));
    }
}

void TURBOLINK_TO_GRPC(const FGrpcSroGameserverMaps* in, ::sro::gameserver::Maps* out)
{
    for(const auto& value : in->Maps) {
        TURBOLINK_TO_GRPC(&value, out->add_maps());
    } 
}

