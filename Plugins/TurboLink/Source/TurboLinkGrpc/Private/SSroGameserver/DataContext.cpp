//Generated by TurboLink CodeGenerator, do not edit!
#include "DataContext.h"
#include "SSroGameserver/DataClient.h"
#include "DataService_Private.h"
#include "DataMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_GameServerDataService_GetGameServerDetails::GrpcContext_GameServerDataService_GetGameServerDetails(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_GameServerDataService_GetGameServerDetails::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UGameServerDataService* service = (UGameServerDataService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetGameServerDetails(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_GameServerDataService_GetGameServerDetails::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::GameServerDetails* _RpcResponse) 
		{
			UGameServerDataServiceClient* client = (UGameServerDataServiceClient*)(this->Client);
			if (!(client->OnGetGameServerDetailsResponse.IsBound())) return;

			FGrpcSroGameserverGameServerDetails response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetGameServerDetailsResponse.Broadcast(Handle, _Result, response);
		}
	);
}
