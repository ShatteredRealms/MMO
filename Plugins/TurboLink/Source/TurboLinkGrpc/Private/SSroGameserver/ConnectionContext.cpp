//Generated by TurboLink CodeGenerator, do not edit!
#include "ConnectionContext.h"
#include "SSroGameserver/ConnectionClient.h"
#include "ConnectionService_Private.h"
#include "ConnectionMarshaling.h"
#include "SGoogleApi/AnnotationsMarshaling.h"
#include "SSro/GlobalsMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_ConnectionService_ConnectGameServer::GrpcContext_ConnectionService_ConnectGameServer(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ConnectionService_ConnectGameServer::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UConnectionService* service = (UConnectionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncConnectGameServer(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ConnectionService_ConnectGameServer::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::ConnectGameServerResponse* _RpcResponse) 
		{
			UConnectionServiceClient* client = (UConnectionServiceClient*)(this->Client);
			if (!(client->OnConnectGameServerResponse.IsBound())) return;

			FGrpcSroGameserverConnectGameServerResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnConnectGameServerResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ConnectionService_VerifyConnect::GrpcContext_ConnectionService_VerifyConnect(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ConnectionService_VerifyConnect::Call(const FGrpcSroGameserverVerifyConnectRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gameserver::VerifyConnectRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UConnectionService* service = (UConnectionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncVerifyConnect(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ConnectionService_VerifyConnect::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::TargetId* _RpcResponse) 
		{
			UConnectionServiceClient* client = (UConnectionServiceClient*)(this->Client);
			if (!(client->OnVerifyConnectResponse.IsBound())) return;

			FGrpcSroTargetId response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnVerifyConnectResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ConnectionService_TransferPlayer::GrpcContext_ConnectionService_TransferPlayer(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ConnectionService_TransferPlayer::Call(const FGrpcSroGameserverTransferPlayerRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::gameserver::TransferPlayerRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UConnectionService* service = (UConnectionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncTransferPlayer(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ConnectionService_TransferPlayer::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::ConnectGameServerResponse* _RpcResponse) 
		{
			UConnectionServiceClient* client = (UConnectionServiceClient*)(this->Client);
			if (!(client->OnTransferPlayerResponse.IsBound())) return;

			FGrpcSroGameserverConnectGameServerResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnTransferPlayerResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ConnectionService_IsCharacterPlaying::GrpcContext_ConnectionService_IsCharacterPlaying(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ConnectionService_IsCharacterPlaying::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UConnectionService* service = (UConnectionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncIsCharacterPlaying(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ConnectionService_IsCharacterPlaying::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::ConnectionStatus* _RpcResponse) 
		{
			UConnectionServiceClient* client = (UConnectionServiceClient*)(this->Client);
			if (!(client->OnIsCharacterPlayingResponse.IsBound())) return;

			FGrpcSroGameserverConnectionStatus response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnIsCharacterPlayingResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_ConnectionService_IsUserPlaying::GrpcContext_ConnectionService_IsUserPlaying(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_ConnectionService_IsUserPlaying::Call(const FGrpcSroTargetId& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::sro::TargetId rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UConnectionService* service = (UConnectionService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncIsUserPlaying(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_ConnectionService_IsUserPlaying::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::sro::gameserver::ConnectionStatus* _RpcResponse) 
		{
			UConnectionServiceClient* client = (UConnectionServiceClient*)(this->Client);
			if (!(client->OnIsUserPlayingResponse.IsBound())) return;

			FGrpcSroGameserverConnectionStatus response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnIsUserPlayingResponse.Broadcast(Handle, _Result, response);
		}
	);
}
