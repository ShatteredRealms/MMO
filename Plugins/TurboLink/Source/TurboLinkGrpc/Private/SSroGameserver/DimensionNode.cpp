//Generated by TurboLink CodeGenerator, do not edit!
#include "SSroGameserver/DimensionNode.h"
#include "SSroGameserver/DimensionService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallDimensionServiceGetDimension* UCallDimensionServiceGetDimension::GetDimension(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallDimensionServiceGetDimension* node = NewObject<UCallDimensionServiceGetDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->DimensionService = Cast<UDimensionService>(turboLinkManager->MakeService("DimensionService"));
	if (node->DimensionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->DimensionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallDimensionServiceGetDimension::OnServiceStateChanged);
	return node;
}

void UCallDimensionServiceGetDimension::Activate()
{
	DimensionService->Connect();
}

void UCallDimensionServiceGetDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		DimensionServiceClient = DimensionService->MakeClient();
		DimensionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallDimensionServiceGetDimension::OnContextStateChange);
		DimensionServiceClient->OnGetDimensionResponse.AddUniqueDynamic(this, &UCallDimensionServiceGetDimension::OnResponse);

		Context = DimensionServiceClient->InitGetDimension();
		DimensionServiceClient->GetDimension(Context, Request, MetaData);
	}
}

void UCallDimensionServiceGetDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallDimensionServiceGetDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallDimensionServiceGetDimension::Shutdown()
{
	DimensionService->OnServiceStateChanged.RemoveDynamic(this, &UCallDimensionServiceGetDimension::OnServiceStateChanged);
	if (DimensionServiceClient != nullptr)
	{
		DimensionService->RemoveClient(DimensionServiceClient);
		DimensionServiceClient->Shutdown();
		DimensionServiceClient = nullptr;
	}

	if (DimensionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(DimensionService);
		DimensionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallDimensionServiceGetDimensions* UCallDimensionServiceGetDimensions::GetDimensions(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& Request, TMap<FString, FString>& MetaData)
{
	UCallDimensionServiceGetDimensions* node = NewObject<UCallDimensionServiceGetDimensions>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->DimensionService = Cast<UDimensionService>(turboLinkManager->MakeService("DimensionService"));
	if (node->DimensionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->DimensionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallDimensionServiceGetDimensions::OnServiceStateChanged);
	return node;
}

void UCallDimensionServiceGetDimensions::Activate()
{
	DimensionService->Connect();
}

void UCallDimensionServiceGetDimensions::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverDimensions response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		DimensionServiceClient = DimensionService->MakeClient();
		DimensionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallDimensionServiceGetDimensions::OnContextStateChange);
		DimensionServiceClient->OnGetDimensionsResponse.AddUniqueDynamic(this, &UCallDimensionServiceGetDimensions::OnResponse);

		Context = DimensionServiceClient->InitGetDimensions();
		DimensionServiceClient->GetDimensions(Context, Request, MetaData);
	}
}

void UCallDimensionServiceGetDimensions::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallDimensionServiceGetDimensions::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverDimensions& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetDimensionsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallDimensionServiceGetDimensions::Shutdown()
{
	DimensionService->OnServiceStateChanged.RemoveDynamic(this, &UCallDimensionServiceGetDimensions::OnServiceStateChanged);
	if (DimensionServiceClient != nullptr)
	{
		DimensionService->RemoveClient(DimensionServiceClient);
		DimensionServiceClient->Shutdown();
		DimensionServiceClient = nullptr;
	}

	if (DimensionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(DimensionService);
		DimensionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallDimensionServiceCreateDimension* UCallDimensionServiceCreateDimension::CreateDimension(UObject* WorldContextObject, const FGrpcSroGameserverCreateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallDimensionServiceCreateDimension* node = NewObject<UCallDimensionServiceCreateDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->DimensionService = Cast<UDimensionService>(turboLinkManager->MakeService("DimensionService"));
	if (node->DimensionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->DimensionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallDimensionServiceCreateDimension::OnServiceStateChanged);
	return node;
}

void UCallDimensionServiceCreateDimension::Activate()
{
	DimensionService->Connect();
}

void UCallDimensionServiceCreateDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		DimensionServiceClient = DimensionService->MakeClient();
		DimensionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallDimensionServiceCreateDimension::OnContextStateChange);
		DimensionServiceClient->OnCreateDimensionResponse.AddUniqueDynamic(this, &UCallDimensionServiceCreateDimension::OnResponse);

		Context = DimensionServiceClient->InitCreateDimension();
		DimensionServiceClient->CreateDimension(Context, Request, MetaData);
	}
}

void UCallDimensionServiceCreateDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallDimensionServiceCreateDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallDimensionServiceCreateDimension::Shutdown()
{
	DimensionService->OnServiceStateChanged.RemoveDynamic(this, &UCallDimensionServiceCreateDimension::OnServiceStateChanged);
	if (DimensionServiceClient != nullptr)
	{
		DimensionService->RemoveClient(DimensionServiceClient);
		DimensionServiceClient->Shutdown();
		DimensionServiceClient = nullptr;
	}

	if (DimensionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(DimensionService);
		DimensionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallDimensionServiceDuplicateDimension* UCallDimensionServiceDuplicateDimension::DuplicateDimension(UObject* WorldContextObject, const FGrpcSroGameserverDuplicateDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallDimensionServiceDuplicateDimension* node = NewObject<UCallDimensionServiceDuplicateDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->DimensionService = Cast<UDimensionService>(turboLinkManager->MakeService("DimensionService"));
	if (node->DimensionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->DimensionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallDimensionServiceDuplicateDimension::OnServiceStateChanged);
	return node;
}

void UCallDimensionServiceDuplicateDimension::Activate()
{
	DimensionService->Connect();
}

void UCallDimensionServiceDuplicateDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		DimensionServiceClient = DimensionService->MakeClient();
		DimensionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallDimensionServiceDuplicateDimension::OnContextStateChange);
		DimensionServiceClient->OnDuplicateDimensionResponse.AddUniqueDynamic(this, &UCallDimensionServiceDuplicateDimension::OnResponse);

		Context = DimensionServiceClient->InitDuplicateDimension();
		DimensionServiceClient->DuplicateDimension(Context, Request, MetaData);
	}
}

void UCallDimensionServiceDuplicateDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallDimensionServiceDuplicateDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDuplicateDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallDimensionServiceDuplicateDimension::Shutdown()
{
	DimensionService->OnServiceStateChanged.RemoveDynamic(this, &UCallDimensionServiceDuplicateDimension::OnServiceStateChanged);
	if (DimensionServiceClient != nullptr)
	{
		DimensionService->RemoveClient(DimensionServiceClient);
		DimensionServiceClient->Shutdown();
		DimensionServiceClient = nullptr;
	}

	if (DimensionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(DimensionService);
		DimensionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallDimensionServiceEditDimension* UCallDimensionServiceEditDimension::EditDimension(UObject* WorldContextObject, const FGrpcSroGameserverEditDimensionRequest& Request, TMap<FString, FString>& MetaData)
{
	UCallDimensionServiceEditDimension* node = NewObject<UCallDimensionServiceEditDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->DimensionService = Cast<UDimensionService>(turboLinkManager->MakeService("DimensionService"));
	if (node->DimensionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->DimensionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallDimensionServiceEditDimension::OnServiceStateChanged);
	return node;
}

void UCallDimensionServiceEditDimension::Activate()
{
	DimensionService->Connect();
}

void UCallDimensionServiceEditDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverDimension response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		DimensionServiceClient = DimensionService->MakeClient();
		DimensionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallDimensionServiceEditDimension::OnContextStateChange);
		DimensionServiceClient->OnEditDimensionResponse.AddUniqueDynamic(this, &UCallDimensionServiceEditDimension::OnResponse);

		Context = DimensionServiceClient->InitEditDimension();
		DimensionServiceClient->EditDimension(Context, Request, MetaData);
	}
}

void UCallDimensionServiceEditDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallDimensionServiceEditDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverDimension& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnEditDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallDimensionServiceEditDimension::Shutdown()
{
	DimensionService->OnServiceStateChanged.RemoveDynamic(this, &UCallDimensionServiceEditDimension::OnServiceStateChanged);
	if (DimensionServiceClient != nullptr)
	{
		DimensionService->RemoveClient(DimensionServiceClient);
		DimensionServiceClient->Shutdown();
		DimensionServiceClient = nullptr;
	}

	if (DimensionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(DimensionService);
		DimensionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallDimensionServiceDeleteDimension* UCallDimensionServiceDeleteDimension::DeleteDimension(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallDimensionServiceDeleteDimension* node = NewObject<UCallDimensionServiceDeleteDimension>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->DimensionService = Cast<UDimensionService>(turboLinkManager->MakeService("DimensionService"));
	if (node->DimensionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->DimensionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallDimensionServiceDeleteDimension::OnServiceStateChanged);
	return node;
}

void UCallDimensionServiceDeleteDimension::Activate()
{
	DimensionService->Connect();
}

void UCallDimensionServiceDeleteDimension::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcGoogleProtobufEmpty response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		DimensionServiceClient = DimensionService->MakeClient();
		DimensionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallDimensionServiceDeleteDimension::OnContextStateChange);
		DimensionServiceClient->OnDeleteDimensionResponse.AddUniqueDynamic(this, &UCallDimensionServiceDeleteDimension::OnResponse);

		Context = DimensionServiceClient->InitDeleteDimension();
		DimensionServiceClient->DeleteDimension(Context, Request, MetaData);
	}
}

void UCallDimensionServiceDeleteDimension::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallDimensionServiceDeleteDimension::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcGoogleProtobufEmpty& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDeleteDimensionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallDimensionServiceDeleteDimension::Shutdown()
{
	DimensionService->OnServiceStateChanged.RemoveDynamic(this, &UCallDimensionServiceDeleteDimension::OnServiceStateChanged);
	if (DimensionServiceClient != nullptr)
	{
		DimensionService->RemoveClient(DimensionServiceClient);
		DimensionServiceClient->Shutdown();
		DimensionServiceClient = nullptr;
	}

	if (DimensionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(DimensionService);
		DimensionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallDimensionServiceGameServerUpdate* UCallDimensionServiceGameServerUpdate::GameServerUpdate(UObject* WorldContextObject, const FGrpcSroTargetId& Request, TMap<FString, FString>& MetaData)
{
	UCallDimensionServiceGameServerUpdate* node = NewObject<UCallDimensionServiceGameServerUpdate>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->DimensionService = Cast<UDimensionService>(turboLinkManager->MakeService("DimensionService"));
	if (node->DimensionService == nullptr)
	{
		return nullptr;
	}
	node->Request = Request;
	node->ServiceState = EGrpcServiceState::Idle;
	node->MetaData = MetaData;

	node->DimensionService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallDimensionServiceGameServerUpdate::OnServiceStateChanged);
	return node;
}

void UCallDimensionServiceGameServerUpdate::Activate()
{
	DimensionService->Connect();
}

void UCallDimensionServiceGameServerUpdate::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcSroGameserverGameServerUpdateResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		DimensionServiceClient = DimensionService->MakeClient();
		DimensionServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallDimensionServiceGameServerUpdate::OnContextStateChange);
		DimensionServiceClient->OnGameServerUpdateResponse.AddUniqueDynamic(this, &UCallDimensionServiceGameServerUpdate::OnResponse);

		Context = DimensionServiceClient->InitGameServerUpdate();
		DimensionServiceClient->GameServerUpdate(Context, Request, MetaData);
	}
}

void UCallDimensionServiceGameServerUpdate::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallDimensionServiceGameServerUpdate::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcSroGameserverGameServerUpdateResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGameServerUpdateResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallDimensionServiceGameServerUpdate::Shutdown()
{
	DimensionService->OnServiceStateChanged.RemoveDynamic(this, &UCallDimensionServiceGameServerUpdate::OnServiceStateChanged);
	if (DimensionServiceClient != nullptr)
	{
		DimensionService->RemoveClient(DimensionServiceClient);
		DimensionServiceClient->Shutdown();
		DimensionServiceClient = nullptr;
	}

	if (DimensionService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(DimensionService);
		DimensionService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
