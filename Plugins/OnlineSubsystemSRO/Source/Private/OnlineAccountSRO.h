// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once
 
#include "OnlineSubsystemSROTypes.h"
#include "OnlineJsonSerializer.h"
#include "AuthTypes.h"

/**
 * Info associated with an user account generated by this online service
 */
class FUserOnlineAccountSRO : 
	public FUserOnlineAccount,
	public FOnlineJsonSerializable
{
public:

	// FOnlineUser
	
	virtual FUniqueNetIdRef GetUserId() const override;
	virtual FString GetRealName() const override;
	virtual FString GetDisplayName(const FString& Platform = FString()) const override;
	virtual bool GetUserAttribute(const FString& AttrName, FString& OutAttrValue) const override;
	virtual bool SetUserAttribute(const FString& AttrName, const FString& AttrValue) override;

	// FUserOnlineAccount

	virtual FString GetAccessToken() const override;
	virtual bool GetAuthAttribute(const FString& AttrName, FString& OutAttrValue) const override;

	// FUserOnlineAccountSRO

	explicit FUserOnlineAccountSRO(const FString& InUserId = FString(), const FAuthTokenSRO& InAuthToken = FAuthTokenSRO())
		: UserIdPtr(FUniqueNetIdSRO::Create(InUserId))
		, UserId(InUserId)
		, AuthToken(InAuthToken)
	{
	}

	virtual ~FUserOnlineAccountSRO()
	{
	}

	/**
	 * Parse Json profile request data into the user account
	 *
	 * @param InAuthToken previously associated auth token with this Json response
	 * @param InJsonStr a json payload from a /me request
	 */
	bool Parse(const FAuthTokenSRO& InAuthToken, const FString& InJsonStr);

	/**
	 * Parse Json profile request data into the user account
	 *
	 * @param InAuthToken previously associated auth token with this Json response
	 * @param InJsonObject a json payload from a /me request
	 */
	bool Parse(const FAuthTokenSRO& InAuthToken, TSharedPtr<FJsonObject> InJsonObject);

	FAuthTokenSRO GetSROAuthToken() const
	{
		return AuthToken;
	}

	void UpdateAuthToken(const FAuthTokenSRO& InAuthToken)
	{
		AuthToken = InAuthToken;
	}

protected:

	/**
	 * Get account data attribute
	 *
	 * @param Key account data entry key
	 * @param OutVal [out] value that was found
	 *
	 * @return true if entry was found
	 */
	inline bool GetAccountData(const FString& Key, FString& OutVal) const
	{
		const FString* FoundVal = AccountData.Find(Key);
		if (FoundVal != NULL)
		{
			OutVal = *FoundVal;
			return true;
		}
		return false;
	}

	/**
	 * Set account data attribute
	 *
	 * @param Key account data entry key
	 * @param Val value that we want to set
	 *
	 * @return true if entry changed
	 */
	inline bool SetAccountData(const FString& Key, const FString& Val)
	{
		const FString* FoundVal = AccountData.Find(Key);
		if (FoundVal == NULL || *FoundVal != Val)
		{
			AccountData.Add(Key, Val);
			return true;
		}
		return false;
	}

	/** User Id represented as a FUniqueNetId */
	FUniqueNetIdRef UserIdPtr;
	/** Id associated with the user account provided by the online service during registration */
	FString UserId;
	/** Username */
	FString Username;
	/** First name */
	FString FirstName;
	/** Last name */
	FString LastName;
	/** Token which is provided to user once authenticated by the online service */
	FAuthTokenSRO AuthToken;
	/** Any addition account data associated with the user */
	FJsonSerializableKeyValueMap AccountData;

private:

	// FJsonSerializable
	BEGIN_ONLINE_JSON_SERIALIZER
		ONLINE_JSON_SERIALIZE("sub", UserId);
		ONLINE_JSON_SERIALIZE("given_name", FirstName);
		ONLINE_JSON_SERIALIZE("family_name", LastName);
		ONLINE_JSON_SERIALIZE("preferred_username", Username);
		ONLINE_JSON_SERIALIZE_SIMPLE_COPY(AccountData);
	END_ONLINE_JSON_SERIALIZER

	/** Allow the SRO identity to fill in our private members from it's callbacks */
	friend class FOnlineIdentitySRO;
};
